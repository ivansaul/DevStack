[
    {
        "name": "python",
        "title": "Python",
        "tags": [
            "script",
            "interpret"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#436b97",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/python.svg",
        "intro": "The [Python](https://www.python.org) cheat sheet is a one-page reference sheet for the Python 3 programming language.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Introduction\n\n- [Python](https://www.python.org/) _(python.org)_\n- [Python Document](https://docs.python.org/3/index.html) _(docs.python.org)_\n- [Learn X in Y minutes](https://learnxinyminutes.com/docs/python/) _(learnxinyminutes.com)_\n- [Regex in python](/regex#regex-in-python) _(cheatsheets.zip)_\n\n### Hello World\n\n```python\n>>> print(\"Hello, World!\")\nHello, World!\n```\n\nThe famous \"Hello World\" program in Python\n\n### Variables\n\n```python\nage = 18      # age is of type int\nname = \"John\" # name is now of type str\nprint(name)\n```\n\nPython can't declare a variable without assignment.\n\n### Data Types \n\n|                                    |          |\n| ---------------------------------- | -------- |\n| `str`                              | Text     |\n| `int`, `float`, `complex`          | Numeric  |\n| `list`, `tuple`, `range`           | Sequence |\n| `dict`                             | Mapping  |\n| `set`, `frozenset`                 | Set      |\n| `bool`                             | Boolean  |\n| `bytes`, `bytearray`, `memoryview` | Binary   |\n\n\n\n### Slicing String\n\n```python\n>>> msg = \"Hello, World!\"\n>>> print(msg[2:5])\nllo\n```\n\n\n\n### Lists\n\n```python\nmylist = []\nmylist.append(1)\nmylist.append(2)\nfor item in mylist:\n    print(item) # prints out 1,2\n```\n\n\n\n### If Else\n\n```python\nnum = 200\nif num > 0:\n    print(\"num is greater than 0\")\nelse:\n    print(\"num is not greater than 0\")\n```\n\n\n\n### Loops\n\n```python\nfor item in range(6):\n    if item == 3: break\n    print(item)\nelse:\n    print(\"Finally finished!\")\n```\n\n\n\n### Functions\n\n```python\n>>> def my_function():\n...     print(\"Hello from a function\")\n...\n>>> my_function()\nHello from a function\n```\n\n\n\n### File Handling \n\n```python\nwith open(\"myfile.txt\", \"r\", encoding='utf8') as file:\n    for line in file:\n        print(line)\n```\n\n\n\n### Arithmetic\n\n```python\nresult = 10 + 30 # => 40\nresult = 40 - 10 # => 30\nresult = 50 * 5  # => 250\nresult = 16 / 4  # => 4.0 (Float Division)\nresult = 16 // 4 # => 4 (Integer Division)\nresult = 25 % 2  # => 1\nresult = 5 ** 3  # => 125\n```\n\nThe `/` means quotient of x and y, and the `//` means floored quotient of x and y, also see\n[StackOverflow](https://stackoverflow.com/a/183870/13192320)\n\n### Plus-Equals\n\n```python\ncounter = 0\ncounter += 10           # => 10\ncounter = 0\ncounter = counter + 10  # => 10\n\nmessage = \"Part 1.\"\n\n# => Part 1.Part 2.\nmessage += \"Part 2.\"\n```\n\n### f-Strings (Python 3.6+)\n\n```python\n>>> website = 'cheatsheets.zip'\n>>> f\"Hello, {website}\"\n\"Hello, cheatsheets.zip\"\n\n>>> num = 10\n>>> f'{num} + 10 = {num + 10}'\n'10 + 10 = 20'\n```\n\n\n"
            },
            {
                "title": "Python Built-in Data Types",
                "content": "\n### Strings\n\n```python\nhello = \"Hello World\"\nhello = 'Hello World'\n\nmulti_string = \"\"\"Multiline Strings\nLorem ipsum dolor sit amet,\nconsectetur adipiscing elit \"\"\"\n```\n\n\n\n### Numbers\n\n```python\nx = 1    # int\ny = 2.8  # float\nz = 1j   # complex\n\n>>> print(type(x))\n<class 'int'>\n```\n\n### Booleans\n\n```python\nmy_bool = True\nmy_bool = False\n\nbool(0)     # => False\nbool(1)     # => True\n```\n\n### Lists\n\n```python\nlist1 = [\"apple\", \"banana\", \"cherry\"]\nlist2 = [True, False, False]\nlist3 = [1, 5, 7, 9, 3]\nlist4 = list((1, 5, 7, 9, 3))\n```\n\n\n\n### Tuple\n\n```python\nmy_tuple = (1, 2, 3)\nmy_tuple = tuple((1, 2, 3))\n```\n\nSimilar to List but immutable\n\n### Set\n\n```python\nset1 = {\"a\", \"b\", \"c\"}\nset2 = set((\"a\", \"b\", \"c\"))\n```\n\nSet of unique items/objects\n\n### Dictionary\n\n```python \n>>> empty_dict = {}\n>>> a = {\"one\": 1, \"two\": 2, \"three\": 3}\n>>> a[\"one\"]\n1\n>>> a.keys()\ndict_keys(['one', 'two', 'three'])\n>>> a.values()\ndict_values([1, 2, 3])\n>>> a.update({\"four\": 4})\n>>> a.keys()\ndict_keys(['one', 'two', 'three', 'four'])\n>>> a['four']\n4\n```\n\nKey: Value pair, JSON like object\n\n### Casting\n\n#### Integers\n\n```python\nx = int(1)   # x will be 1\ny = int(2.8) # y will be 2\nz = int(\"3\") # z will be 3\n```\n\n#### Floats\n\n```python\nx = float(1)     # x will be 1.0\ny = float(2.8)   # y will be 2.8\nz = float(\"3\")   # z will be 3.0\nw = float(\"4.2\") # w will be 4.2\n```\n\n#### Strings\n\n```python\nx = str(\"s1\") # x will be 's1'\ny = str(2)    # y will be '2'\nz = str(3.0)  # z will be '3.0'\n```\n"
            },
            {
                "title": "Python Advanced Data Types",
                "content": "\n### Heaps \n\n```python\nimport heapq\n\nmyList = [9, 5, 4, 1, 3, 2]\nheapq.heapify(myList) # turn myList into a Min Heap\nprint(myList)    # => [1, 3, 2, 5, 9, 4]\nprint(myList[0]) # first value is always the smallest in the heap\n\nheapq.heappush(myList, 10) # insert 10\nx = heapq.heappop(myList)  # pop and return smallest item\nprint(x)                   # => 1\n```\n\n#### Negate all values to use Min Heap as Max Heap\n\n```python\nmyList = [9, 5, 4, 1, 3, 2]\nmyList = [-val for val in myList] # multiply by -1 to negate\nheapq.heapify(myList)\n\nx = heapq.heappop(myList)\nprint(-x) # => 9 (making sure to multiply by -1 again)\n```\n\nHeaps are binary trees for which every parent node has a value less than or equal to any of its children. Useful for\naccessing min/max value quickly. Time complexity: O(n) for heapify, O(log n) push and pop. See:\n[Heapq](https://docs.python.org/3/library/heapq.html)\n\n### Stacks and Queues \n\n```python\nfrom collections import deque\n\nq = deque()          # empty\nq = deque([1, 2, 3]) # with values\n\nq.append(4)     # append to right side\nq.appendleft(0) # append to left side\nprint(q)    # => deque([0, 1, 2, 3, 4])\n\nx = q.pop() # remove & return from right\ny = q.popleft() # remove & return from left\nprint(x)    # => 4\nprint(y)    # => 0\nprint(q)    # => deque([1, 2, 3])\n\nq.rotate(1) # rotate 1 step to the right\nprint(q)    # => deque([3, 1, 2])\n```\n\nDeque is a double-ended queue with O(1) time for append/pop operations from both sides. Used as stacks and queues. See:\n[Deque](https://docs.python.org/3/library/collections.html#collections.deque)\n"
            },
            {
                "title": "Python Strings",
                "content": "\n### Array-like\n\n```python\n>>> hello = \"Hello, World\"\n>>> print(hello[1])\ne\n>>> print(hello[-1])\nd\n```\n\nGet the character at position 1 or last\n\n### Looping\n\n```python\n>>> for char in \"foo\":\n...     print(char)\nf\no\no\n```\n\nLoop through the letters in the word \"foo\"\n\n### Slicing string \n\n```java\n \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n | m | y | b | a | c | o | n |\n \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n 0   1   2   3   4   5   6   7\n-7  -6  -5  -4  -3  -2  -1\n```\n\n---\n\n```python\n>>> s = 'mybacon'\n>>> s[2:5]\n'bac'\n>>> s[0:2]\n'my'\n```\n\n```python\n>>> s = 'mybacon'\n>>> s[:2]\n'my'\n>>> s[2:]\n'bacon'\n>>> s[:2] + s[2:]\n'mybacon'\n>>> s[:]\n'mybacon'\n```\n\n```python\n>>> s = 'mybacon'\n>>> s[-5:-1]\n'baco'\n>>> s[2:6]\n'baco'\n```\n\n#### With a stride\n\n```python\n>>> s = '12345' * 5\n>>> s\n'1234512345123451234512345'\n>>> s[::5]\n'11111'\n>>> s[4::5]\n'55555'\n>>> s[::-5]\n'55555'\n>>> s[::-1]\n'5432154321543215432154321'\n```\n\n### String Length\n\n```python\n>>> hello = \"Hello, World!\"\n>>> print(len(hello))\n13\n```\n\nThe len() function returns the length of a string\n\n### Multiple copies\n\n```python\n>>> s = '===+'\n>>> n = 8\n>>> s * n\n'===+===+===+===+===+===+===+===+'\n```\n\n### Check String\n\n```python\n>>> s = 'spam'\n>>> s in 'I saw spamalot!'\nTrue\n>>> s not in 'I saw The Holy Grail!'\nTrue\n\n```\n\n### Concatenates\n\n```python\n>>> s = 'spam'\n>>> t = 'egg'\n>>> s + t\n'spamegg'\n>>> 'spam' 'egg'\n'spamegg'\n```\n\n### Formatting \n\n```python\nname = \"John\"\nprint(\"Hello, %s!\" % name)\n```\n\n```python\nname = \"John\"\nage = 23\nprint(\"%s is %d years old.\" % (name, age))\n```\n\n#### format() Method\n\n```python\ntxt1 = \"My name is {fname}, I'm {age}\".format(fname=\"John\", age=36)\ntxt2 = \"My name is {0}, I'm {1}\".format(\"John\", 36)\ntxt3 = \"My name is {}, I'm {}\".format(\"John\", 36)\n```\n\n### Input\n\n```python\n>>> name = input(\"Enter your name: \")\nEnter your name: Tom\n>>> name\n'Tom'\n```\n\nGet input data from console\n\n### Join\n\n```python\n>>> \"#\".join([\"John\", \"Peter\", \"Vicky\"])\n'John#Peter#Vicky'\n```\n\n### Endswith\n\n```python\n>>> \"Hello, world!\".endswith(\"!\")\nTrue\n```\n"
            },
            {
                "title": "Python F-Strings (Since Python 3.6+)",
                "content": "\n### f-Strings usage\n\n```python\n>>> website = 'cheatsheets.zip'\n>>> f\"Hello, {website}\"\n\"Hello, cheatsheets.zip\"\n\n>>> num = 10\n>>> f'{num} + 10 = {num + 10}'\n'10 + 10 = 20'\n\n>>> f\"\"\"He said {\"I'm John\"}\"\"\"\n\"He said I'm John\"\n\n>>> f'5 {\"{stars}\"}'\n'5 {stars}'\n>>> f'{{5}} {\"stars\"}'\n'{5} stars'\n\n>>> name = 'Eric'\n>>> age = 27\n>>> f\"\"\"Hello!\n...     I'm {name}.\n...     I'm {age}.\"\"\"\n\"Hello!\\n    I'm Eric.\\n    I'm 27.\"\n```\n\nit is available since Python 3.6, also see:\n[Formatted string literals](https://docs.python.org/3/reference/lexical_analysis.html#f-strings)\n\n### f-Strings Fill Align\n\n```python\n>>> f'{\"text\":10}'     # [width]\n'text      '\n>>> f'{\"test\":*>10}'   # fill left\n'******test'\n>>> f'{\"test\":*<10}'   # fill right\n'test******'\n>>> f'{\"test\":*^10}'   # fill center\n'***test***'\n>>> f'{12345:0>10}'    # fill with numbers\n'0000012345'\n```\n\n### f-Strings Type\n\n```python\n>>> f'{10:b}'        # binary type\n'1010'\n>>> f'{10:o}'        # octal type\n'12'\n>>> f'{200:x}'       # hexadecimal type\n'c8'\n>>> f'{200:X}'\n'C8'\n>>> f'{345600000000:e}' # scientific notation\n'3.456000e+11'\n>>> f'{65:c}'       # character type\n'A'\n>>> f'{10:#b}'      # [type] with notation (base)\n'0b1010'\n>>> f'{10:#o}'\n'0o12'\n>>> f'{10:#x}'\n'0xa'\n```\n\n### F-Strings Others\n\n```python\n>>> f'{-12345:0=10}'  # negative numbers\n'-000012345'\n>>> f'{12345:010}'    # [0] shortcut (no align)\n'0000012345'\n>>> f'{-12345:010}'\n'-000012345'\n>>> import math       # [.precision]\n>>> math.pi\n3.141592653589793\n>>> f'{math.pi:.2f}'\n'3.14'\n>>> f'{1000000:,.2f}' # [grouping_option]\n'1,000,000.00'\n>>> f'{1000000:_.2f}'\n'1_000_000.00'\n>>> f'{0.25:0%}'      # percentage\n'25.000000%'\n>>> f'{0.25:.0%}'\n'25%'\n```\n\n### F-Strings Sign\n\n```python\n>>> f'{12345:+}'      # [sign] (+/-)\n'+12345'\n>>> f'{-12345:+}'\n'-12345'\n>>> f'{-12345:+10}'\n'    -12345'\n>>> f'{-12345:+010}'\n'-000012345'\n```\n"
            },
            {
                "title": "Python Lists",
                "content": "\n### Defining\n\n```python\n>>> li1 = []\n>>> li1\n[]\n>>> li2 = [4, 5, 6]\n>>> li2\n[4, 5, 6]\n>>> li3 = list((1, 2, 3))\n>>> li3\n[1, 2, 3]\n>>> li4 = list(range(1, 11))\n>>> li4\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n\n### Generate \n\n```python\n>>> list(filter(lambda x : x % 2 == 1, range(1, 20)))\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\n>>> [x ** 2 for x in range (1, 11) if  x % 2 == 1]\n[1, 9, 25, 49, 81]\n\n>>> [x for x in [3, 4, 5, 6, 7] if x > 5]\n[6, 7]\n\n>>> list(filter(lambda x: x > 5, [3, 4, 5, 6, 7]))\n[6, 7]\n```\n\n### Append\n\n```python\n>>> li = []\n>>> li.append(1)\n>>> li\n[1]\n>>> li.append(2)\n>>> li\n[1, 2]\n>>> li.append(4)\n>>> li\n[1, 2, 4]\n>>> li.append(3)\n>>> li\n[1, 2, 4, 3]\n```\n\n### List Slicing \n\nSyntax of list slicing:\n\n```python\na_list[start:end]\na_list[start:end:step]\n```\n\n#### Slicing\n\n```python\n>>> a = ['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n>>> a[2:5]\n['bacon', 'tomato', 'ham']\n>>> a[-5:-2]\n['egg', 'bacon', 'tomato']\n>>> a[1:4]\n['egg', 'bacon', 'tomato']\n```\n\n#### Omitting index\n\n```python\n>>> a[:4]\n['spam', 'egg', 'bacon', 'tomato']\n>>> a[0:4]\n['spam', 'egg', 'bacon', 'tomato']\n>>> a[2:]\n['bacon', 'tomato', 'ham', 'lobster']\n>>> a[2:len(a)]\n['bacon', 'tomato', 'ham', 'lobster']\n>>> a\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n>>> a[:]\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n```\n\n#### With a stride\n\n```python\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n>>> a[0:6:2]\n['spam', 'bacon', 'ham']\n>>> a[1:6:2]\n['egg', 'tomato', 'lobster']\n>>> a[6:0:-2]\n['lobster', 'tomato', 'egg']\n>>> a\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n>>> a[::-1]\n['lobster', 'ham', 'tomato', 'bacon', 'egg', 'spam']\n```\n\n### Remove\n\n```python\n>>> li = ['bread', 'butter', 'milk']\n>>> li.pop()\n'milk'\n>>> li\n['bread', 'butter']\n>>> del li[0]\n>>> li\n['butter']\n```\n\n### Access\n\n```python\n>>> li = ['a', 'b', 'c', 'd']\n>>> li[0]\n'a'\n>>> li[-1]\n'd'\n>>> li[4]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list index out of range\n```\n\n### Concatenating \n\n```python\n>>> odd = [1, 3, 5]\n>>> odd.extend([9, 11, 13])\n>>> odd\n[1, 3, 5, 9, 11, 13]\n>>> odd = [1, 3, 5]\n>>> odd + [9, 11, 13]\n[1, 3, 5, 9, 11, 13]\n```\n\n### Sort & Reverse \n\n```python\n>>> li = [3, 1, 3, 2, 5]\n>>> li.sort()\n>>> li\n[1, 2, 3, 3, 5]\n>>> li.reverse()\n>>> li\n[5, 3, 3, 2, 1]\n```\n\n### Count\n\n```python\n>>> li = [3, 1, 3, 2, 5]\n>>> li.count(3)\n2\n```\n\n### Repeating\n\n```python\n>>> li = [\"re\"] * 3\n>>> li\n['re', 're', 're']\n```\n"
            },
            {
                "title": "Python Flow control",
                "content": "\n### Basic\n\n```python\nnum = 5\nif num > 10:\n    print(\"num is totally bigger than 10.\")\nelif num < 10:\n    print(\"num is smaller than 10.\")\nelse:\n    print(\"num is indeed 10.\")\n```\n\n### One line\n\n```python\n>>> a = 330\n>>> b = 200\n>>> r = \"a\" if a > b else \"b\"\n>>> print(r)\na\n```\n\n### else if\n\n```python\nvalue = True\nif not value:\n    print(\"Value is False\")\nelif value is None:\n    print(\"Value is None\")\nelse:\n    print(\"Value is True\")\n```\n\n### match case\n\n```python\nx = 1\nmatch x:\n  case 0:\n    print(\"zero\")\n  case 1:\n    print(\"one\")\n  case _:\n    print(\"multiple\")\n```\n"
            },
            {
                "title": "Python Loops",
                "content": "\n### Basic\n\n```python\nprimes = [2, 3, 5, 7]\nfor prime in primes:\n    print(prime)\n```\n\nPrints: 2 3 5 7\n\n### With index\n\n```python\nanimals = [\"dog\", \"cat\", \"mouse\"]\n# enumerate() adds counter to an iterable\nfor i, value in enumerate(animals):\n    print(i, value)\n```\n\nPrints: 0 dog 1 cat 2 mouse\n\n### While\n\n```python\nx = 0\nwhile x < 4:\n    print(x)\n    x += 1  # Shorthand for x = x + 1\n```\n\nPrints: 0 1 2 3\n\n### Break\n\n```python\nx = 0\nfor index in range(10):\n    x = index * 10\n    if index == 5:\n    \tbreak\n    print(x)\n```\n\nPrints: 0 10 20 30 40\n\n### Continue\n\n```python\nfor index in range(3, 8):\n    x = index * 10\n    if index == 5:\n    \tcontinue\n    print(x)\n```\n\nPrints: 30 40 60 70\n\n### Range\n\n```python\nfor i in range(4):\n    print(i) # Prints: 0 1 2 3\n\nfor i in range(4, 8):\n    print(i) # Prints: 4 5 6 7\n\nfor i in range(4, 10, 2):\n    print(i) # Prints: 4 6 8\n```\n\n### With zip()\n\n```python\nwords = ['Mon', 'Tue', 'Wed']\nnums = [1, 2, 3]\n# Use zip to pack into a tuple list\nfor w, n in zip(words, nums):\n    print('%d:%s, ' %(n, w))\n```\n\nPrints: 1:Mon, 2:Tue, 3:Wed,\n\n### for/else\n\n```python\nnums = [60, 70, 30, 110, 90]\nfor n in nums:\n    if n > 100:\n        print(\"%d is bigger than 100\" %n)\n        break\nelse:\n    print(\"Not found!\")\n```\n\nAlso see: [Python Tips](https://book.pythontips.com/en/latest/for_-_else.html)\n"
            },
            {
                "title": "Python Functions",
                "content": "\n### Basic\n\n```python\ndef hello_world():\n    print('Hello, World!')\n```\n\n### Return\n\n```python\ndef add(x, y):\n    print(\"x is %s, y is %s\" %(x, y))\n    return x + y\n\nadd(5, 6)    # => 11\n```\n\n### Positional arguments\n\n```python\ndef varargs(*args):\n    return args\n\nvarargs(1, 2, 3)  # => (1, 2, 3)\n```\n\nType of \"args\" is tuple.\n\n### Keyword arguments\n\n```python\ndef keyword_args(**kwargs):\n    return kwargs\n\n# => {\"big\": \"foot\", \"loch\": \"ness\"}\nkeyword_args(big=\"foot\", loch=\"ness\")\n```\n\nType of \"kwargs\" is dict.\n\n### Returning multiple\n\n```python\ndef swap(x, y):\n    return y, x\n\nx = 1\ny = 2\nx, y = swap(x, y)  # => x = 2, y = 1\n```\n\n### Default Value\n\n```python\ndef add(x, y=10):\n    return x + y\n\nadd(5)      # => 15\nadd(5, 20)  # => 25\n```\n\n### Anonymous functions\n\n```python\n# => True\n(lambda x: x > 2)(3)\n\n# => 5\n(lambda x, y: x ** 2 + y ** 2)(2, 1)\n```\n"
            },
            {
                "title": "Python Modules",
                "content": "\n### Import modules\n\n```python\nimport math\nprint(math.sqrt(16))  # => 4.0\n```\n\n### From a module\n\n```python\nfrom math import ceil, floor\nprint(ceil(3.7))   # => 4.0\nprint(floor(3.7))  # => 3.0\n```\n\n### Import all\n\n```python\nfrom math import *\n```\n\n### Shorten module\n\n```python\nimport math as m\n\n# => True\nmath.sqrt(16) == m.sqrt(16)\n```\n\n### Functions and attributes\n\n```python\nimport math\ndir(math)\n```\n"
            },
            {
                "title": "Python File Handling",
                "content": "\n### Read file\n\n#### Line by line\n\n```python\nwith open(\"myfile.txt\") as file:\n    for line in file:\n        print(line)\n```\n\n#### With line number\n\n```python\nfile = open('myfile.txt', 'r')\nfor i, line in enumerate(file, start=1):\n    print(\"Number %s: %s\" % (i, line))\n```\n\n### String\n\n#### Write a string\n\n```python\ncontents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile1.txt\", \"w+\") as file:\n    file.write(str(contents))\n```\n\n#### Read a string\n\n```python\nwith open('myfile1.txt', \"r+\") as file:\n    contents = file.read()\nprint(contents)\n```\n\n### Object\n\n#### Write an object\n\n```python\ncontents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile2.txt\", \"w+\") as file:\n    file.write(json.dumps(contents))\n```\n\n#### Read an object\n\n```python\nwith open('myfile2.txt', \"r+\") as file:\n    contents = json.load(file)\nprint(contents)\n```\n\n### Delete a File\n\n```python\nimport os\nos.remove(\"myfile.txt\")\n```\n\n### Check and Delete\n\n```python\nimport os\nif os.path.exists(\"myfile.txt\"):\n    os.remove(\"myfile.txt\")\nelse:\n    print(\"The file does not exist\")\n```\n\n### Delete Folder\n\n```python\nimport os\nos.rmdir(\"myfolder\")\n```\n"
            },
            {
                "title": "Python Classes & Inheritance",
                "content": "\n### Defining\n\n```python\nclass MyNewClass:\n    pass\n\n# Class Instantiation\nmy = MyNewClass()\n```\n\n### Constructors\n\n```python\nclass Animal:\n    def __init__(self, voice):\n        self.voice = voice\n\ncat = Animal('Meow')\nprint(cat.voice)    # => Meow\n\ndog = Animal('Woof')\nprint(dog.voice)    # => Woof\n```\n\n### Method\n\n```python\nclass Dog:\n\n    # Method of the class\n    def bark(self):\n        print(\"Ham-Ham\")\n\ncharlie = Dog()\ncharlie.bark()   # => \"Ham-Ham\"\n```\n\n### Class Variables \n\n```python\nclass MyClass:\n    class_variable = \"A class variable!\"\n\n# => A class variable!\nprint(MyClass.class_variable)\n\nx = MyClass()\n\n# => A class variable!\nprint(x.class_variable)\n```\n\n### Super() Function \n\n```python\nclass ParentClass:\n    def print_test(self):\n        print(\"Parent Method\")\n\nclass ChildClass(ParentClass):\n    def print_test(self):\n        print(\"Child Method\")\n        # Calls the parent's print_test()\n        super().print_test()\n```\n\n---\n\n```python\n>>> child_instance = ChildClass()\n>>> child_instance.print_test()\nChild Method\nParent Method\n```\n\n### repr() method\n\n```python\nclass Employee:\n    def __init__(self, name):\n        self.name = name\n\n    def __repr__(self):\n        return self.name\n\njohn = Employee('John')\nprint(john)  # => John\n```\n\n### User-defined exceptions\n\n```python\nclass CustomError(Exception):\n    pass\n```\n\n### Polymorphism\n\n```python\nclass ParentClass:\n    def print_self(self):\n        print('A')\n\nclass ChildClass(ParentClass):\n    def print_self(self):\n        print('B')\n\nobj_A = ParentClass()\nobj_B = ChildClass()\n\nobj_A.print_self() # => A\nobj_B.print_self() # => B\n```\n\n### Overriding\n\n```python\nclass ParentClass:\n    def print_self(self):\n        print(\"Parent\")\n\nclass ChildClass(ParentClass):\n    def print_self(self):\n        print(\"Child\")\n\nchild_instance = ChildClass()\nchild_instance.print_self() # => Child\n```\n\n### Inheritance\n\n```python\nclass Animal:\n    def __init__(self, name, legs):\n        self.name = name\n        self.legs = legs\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nYoki = Dog(\"Yoki\", 4)\nprint(Yoki.name) # => YOKI\nprint(Yoki.legs) # => 4\nYoki.sound()     # => Woof!\n```\n"
            },
            {
                "title": "Python Type Hints (Since Python 3.5)",
                "content": "\n### Variable & Parameter\n\n```python\nstring: str = \"ha\"\ntimes: int = 3\n\n\n# wrong hit, but run correctly\nresult: str = 1 + 2\nprint(result)  # => 3\n\n\ndef say(name: str, start: str = \"Hi\"):\n    return start + \", \" + name\n\nprint(say(\"Python\"))  # => Hi, Python\n```\n\n### Built-in date type\n\n```python\nfrom typing import Dict, Tuple, List\n\nbill: Dict[str, float] = {\n    \"apple\": 3.14,\n    \"watermelon\": 15.92,\n    \"pineapple\": 6.53,\n}\ncompleted: Tuple[str] = (\"DONE\",)\nsucceeded: Tuple[int, str] = (1, \"SUCCESS\")\nstatuses: Tuple[str, ...] = (\n    \"DONE\", \"SUCCESS\", \"FAILED\", \"ERROR\",\n)\ncodes: List[int] = (0, 1, -1, -2)\n```\n\n### Built-in date type (3.10+)\n\n```python\nbill: dict[str, float] = {\n    \"apple\": 3.14,\n    \"watermelon\": 15.92,\n    \"pineapple\": 6.53,\n}\ncompleted: tuple[str] = (\"DONE\",)\nsucceeded: tuple[int, str] = (1, \"SUCCESS\")\nstatuses: tuple[str, ...] = (\n    \"DONE\", \"SUCCESS\", \"FAILED\", \"ERROR\",\n)\ncodes: list[int] = (0, 1, -1, -2)\n```\n\n### Positional argument\n\n```python\ndef calc_summary(*args: int):\n    return sum(args)\n\nprint(calc_summary(3, 1, 4))  # => 8\n```\n\nIndicate all arguments' type is int.\n\n### Returned\n\n```python\ndef say_hello(name) -> str:\n    return \"Hello, \" + name\n\nvar = \"Python\"\nprint(say_hello(var))  # => Hello, Python\n```\n\n### Union returned\n\n```python\nfrom typing import Union\n\ndef resp200(meaningful) -> Union[int, str]:\n    return \"OK\" if meaningful else 200\n```\n\nMeans returned value type may be int or str.\n\n### Keyword argument\n\n```python\ndef calc_summary(**kwargs: int):\n    return sum(kwargs.values())\n\nprint(calc_summary(a=1, b=2))  # => 3\n```\n\nIndicate all parameters' value type is int.\n\n### Multiple returns\n\n```python\ndef resp200() -> (int, str):\n    return 200, \"OK\"\n\nreturns = resp200()\nprint(returns)  # => (200, 'OK')\nprint(type(returns))  # tuple\n```\n\n### Union returned (3.10+)\n\n```python\ndef resp200(meaningful) -> int | str:\n    return \"OK\" if meaningful else 200\n```\n\nSince Python 3.10\n\n### Property\n\n```python\nclass Employee:\n    name: str\n    age: int\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.graduated: bool = False\n```\n\n### Self instance\n\n```python\nclass Employee:\n    name: str\n\n    def set_name(self, name) -> \"Employee\":\n        self.name = name\n        return self\n\n    def copy(self) -> 'Employee':\n        return type(self)(self.name)\n```\n\n### Self instance (3.11+)\n\n```python\nfrom typing import Self\n\nclass Employee:\n    name: str\n    age: int\n\n    def set_name(self: Self, name) -> Self:\n        self.name = name\n        return self\n```\n\n### Type & Generic \n\n```python\nfrom typing import TypeVar, Type\n\nT = TypeVar(\"T\")\n\n# \"mapper\" is a type, like int, str, MyClass and so on.\n# \"default\" is an instance of type T, such as 314, \"string\", MyClass() and so on.\n# returned is an instance of type T too.\ndef converter(raw, mapper: Type[T], default: T) -> T:\n    try:\n        return mapper(raw)\n    except:\n        return default\n\nraw: str = input(\"Enter an integer: \")\nresult: int = converter(raw, mapper=int, default=0)\n```\n\n### Function \n\n```python\nfrom typing import TypeVar, Callable, Any\n\nT = TypeVar(\"T\")\n\ndef converter(raw, mapper: Callable[[Any], T], default: T) -> T:\n    try:\n        return mapper(raw)\n    except:\n        return default\n\n# Callable[[Any], ReturnType] means a function declare like:\n# def func(arg: Any) -> ReturnType:\n#     pass\n\n# Callable[[str, int], ReturnType] means a function declare like:\n# def func(string: str, times: int) -> ReturnType:\n#     pass\n\n# Callable[..., ReturnType] means a function declare like:\n# def func(*args, **kwargs) -> ReturnType:\n#     pass\n\ndef is_success(value) -> bool:\n    return value in (0, \"OK\", True, \"success\")\n\nresp = dict(code=0, message=\"OK\", data=[])\nsuccessed: bool = converter(resp[\"message\"], mapper=is_success, default=False)\n```\n"
            },
            {
                "title": "Python Operators",
                "content": "\n### Walrus \n\n```python\nvalues = [1, \"text\", True, \"\", 2]\ni = 0\n\n# It assigns a value to a variable and compares it in a boolean expression\nwhile (data := values[i]):\n\n    print(data, end=\",\")\n    i = i + 1\n\n# Expected result: 1, \"text\", True\n```\n"
            },
            {
                "title": "Miscellaneous",
                "content": "\n### Comments\n\n```python\n# This is a single line comments.\n```\n\n```python\n\"\"\" Multiline strings can be written\n    using three \"s, and are often used\n    as documentation.\n\"\"\"\n```\n\n```python\n''' Multiline strings can be written\n    using three 's, and are often used\n    as documentation.\n'''\n```\n\n### Generators\n\n```python\ndef double_numbers(iterable):\n    for i in iterable:\n        yield i + i\n```\n\nGenerators help you make lazy code.\n\n### Generator to list\n\n```python\nvalues = (-x for x in [1,2,3,4,5])\ngen_to_list = list(values)\n\n# => [-1, -2, -3, -4, -5]\nprint(gen_to_list)\n```\n\n### Handle exceptions \n\n```python\ntry:\n    # Use \"raise\" to raise an error\n    raise IndexError(\"This is an index error\")\nexcept IndexError as e:\n    pass                 # Pass is just a no-op. Usually you would do recovery here.\nexcept (TypeError, NameError):\n    pass                 # Multiple exceptions can be handled together, if required.\nelse:                    # Optional clause to the try/except block. Must follow all except blocks\n    print(\"All good!\")   # Runs only if the code in try raises no exceptions\nfinally:                 # Execute under all circumstances\n    print(\"We can clean up resources here\")\n```"
            }
        ]
    },
    {
        "name": "javascript",
        "title": "JavaScript",
        "tags": [
            "js",
            "web"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#ebd94e",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/javascript.svg",
        "intro": "A JavaScript cheat sheet with the most important concepts, functions, methods, and more. A complete quick reference for beginners.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Introduction\n\nJavaScript is a lightweight, interpreted programming language.\n\n- [JSON cheatsheet](/json) _(cheatsheets.zip)_\n- [Regex in JavaScript](/regex#regex-in-javascript) _(cheatsheets.zip)_\n\n### Console\n\n```javascript\n// => Hello world!\nconsole.log(\"Hello world!\");\n\n// => Hello CheatSheets.zip\nconsole.warn(\"hello %s\", \"CheatSheets.zip\");\n\n// Prints error message to stderr\nconsole.error(new Error(\"Oops!\"));\n```\n\n### Numbers\n\n```javascript\nlet amount = 6;\nlet price = 4.99;\n```\n\n### Variables\n\n```javascript\nlet x = null;\nlet name = \"Tammy\";\nconst found = false;\n\n// => Tammy, false, null\nconsole.log(name, found, x);\n\nvar a;\nconsole.log(a); // => undefined\n```\n\n### Strings\n\n```javascript\nlet single = \"Wheres my bandit hat?\";\nlet double = \"Wheres my bandit hat?\";\n\n// => 21\nconsole.log(single.length);\n```\n\n### Arithmetic Operators\n\n```javascript\n5 + 5 = 10     // Addition\n10 - 5 = 5     // Subtraction\n5 * 10 = 50    // Multiplication\n10 / 5 = 2     // Division\n10 % 5 = 0     // Modulo\n```\n\n### Comments\n\n```javascript\n// This line will denote a comment\n\n/*\nThe below configuration must be\nchanged before deployment.\n*/\n```\n\n### Assignment Operators\n\n```javascript\nlet number = 100;\n\n// Both statements will add 10\nnumber = number + 10;\nnumber += 10;\n\nconsole.log(number);\n// => 120\n```\n\n### String Interpolation\n\n```javascript\nlet age = 7;\n\n// String concatenation\n\"Tommy is \" + age + \" years old.\";\n\n// String interpolation\n`Tommy is ${age} years old.`;\n```\n\n### let Keyword\n\n```javascript\nlet count;\nconsole.log(count); // => undefined\ncount = 10;\nconsole.log(count); // => 10\n```\n\n### const Keyword\n\n```javascript\nconst numberOfColumns = 4;\n\n// TypeError: Assignment to constant...\nnumberOfColumns = 8;\n```\n"
            },
            {
                "title": "JavaScript Conditionals",
                "content": "\n### if Statement\n\n```javascript\nconst isMailSent = true;\n\nif (isMailSent) {\n  console.log(\"Mail sent to recipient\");\n}\n```\n\n### Ternary Operator\n\n```javascript\nvar x = 1;\n\n// => true\nresult = x == 1 ? true : false;\n```\n\n### Operators \n\n```javascript\ntrue || false; // true\n10 > 5 || 10 > 20; // true\nfalse || false; // false\n10 > 100 || 10 > 20; // false\n```\n\n#### Logical Operator &&\n\n```javascript\ntrue && true; // true\n1 > 2 && 2 > 1; // false\ntrue && false; // false\n4 === 4 && 3 > 1; // true\n```\n\n#### Comparison Operators\n\n```javascript\n1 > 3; // false\n3 > 1; // true\n250 >= 250; // true\n1 === 1; // true\n1 === 2; // false\n1 === \"1\"; // false\n```\n\n#### Logical Operator !\n\n```javascript\nlet lateToWork = true;\nlet oppositeValue = !lateToWork;\n\n// => false\nconsole.log(oppositeValue);\n```\n\n#### Nullish coalescing operator ??\n\n```javascript\nnull ?? \"I win\"; //  'I win'\nundefined ?? \"Me too\"; //  'Me too'\n\nfalse ?? \"I lose\"; //  false\n0 ?? \"I lose again\"; //  0\n\"\" ?? \"Damn it\"; //  ''\n```\n\n### else if\n\n```javascript\nconst size = 10;\n\nif (size > 100) {\n  console.log(\"Big\");\n} else if (size > 20) {\n  console.log(\"Medium\");\n} else if (size > 4) {\n  console.log(\"Small\");\n} else {\n  console.log(\"Tiny\");\n}\n// Print: Small\n```\n\n### switch Statement\n\n```javascript\nconst food = \"salad\";\n\nswitch (food) {\n  case \"oyster\":\n    console.log(\"The taste of the sea\");\n    break;\n  case \"pizza\":\n    console.log(\"A delicious pie\");\n    break;\n  default:\n    console.log(\"Enjoy your meal\");\n}\n```\n\n### == vs ===\n\n```javascript\n0 == false; // true\n0 === false; // false, different type\n1 == \"1\"; // true,  automatic type conversion\n1 === \"1\"; // false, different type\nnull == undefined; // true\nnull === undefined; // false\n\"0\" == false; // true\n\"0\" === false; // false\n```\n\nThe `==` just check the value, `===` check both the value and the type.\n"
            },
            {
                "title": "JavaScript Functions",
                "content": "\n### Functions\n\n```javascript\n// Defining the function:\nfunction sum(num1, num2) {\n  return num1 + num2;\n}\n\n// Calling the function:\nsum(3, 6); // 9\n```\n\n### Anonymous Functions\n\n```javascript\n// Named function\nfunction rocketToMars() {\n  return \"BOOM!\";\n}\n\n// Anonymous function\nconst rocketToMars = function () {\n  return \"BOOM!\";\n};\n```\n\n### Arrow Functions (ES6) \n\n#### With two arguments\n\n```javascript\nconst sum = (param1, param2) => {\n  return param1 + param2;\n};\nconsole.log(sum(2, 5)); // => 7\n```\n\n#### With no arguments\n\n```javascript\nconst printHello = () => {\n  console.log(\"hello\");\n};\nprintHello(); // => hello\n```\n\n#### With a single argument\n\n```javascript\nconst checkWeight = (weight) => {\n  console.log(`Weight : ${weight}`);\n};\ncheckWeight(25); // => Weight : 25\n```\n\n#### Concise arrow functions\n\n```javascript\nconst multiply = (a, b) => a * b;\n// => 60\nconsole.log(multiply(2, 30));\n```\n\n[Arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) available\nstarting ES2015\n\n### return Keyword\n\n```javascript\n// With return\nfunction sum(num1, num2) {\n  return num1 + num2;\n}\n\n// The function doesn't output the sum\nfunction sum(num1, num2) {\n  num1 + num2;\n}\n```\n\n### Calling Functions\n\n```javascript\n// Defining the function\nfunction sum(num1, num2) {\n  return num1 + num2;\n}\n\n// Calling the function\nsum(2, 4); // 6\n```\n\n### Function Expressions\n\n```javascript\nconst dog = function () {\n  return \"Woof!\";\n};\n```\n\n### Function Parameters\n\n```javascript\n// The parameter is name\nfunction sayHello(name) {\n  return `Hello, ${name}!`;\n}\n```\n\n### Function Declaration\n\n```javascript\nfunction add(num1, num2) {\n  return num1 + num2;\n}\n```\n"
            },
            {
                "title": "JavaScript Scope",
                "content": "\n### Scope\n\n```javascript\nfunction myFunction() {\n  var pizzaName = \"Margarita\";\n  // Code here can use pizzaName\n}\n\n// Code here can't use pizzaName\n```\n\n### Block Scoped Variables\n\n```javascript\nconst isLoggedIn = true;\n\nif (isLoggedIn == true) {\n  const statusMessage = \"Logged in.\";\n}\n\n// Uncaught ReferenceError...\nconsole.log(statusMessage);\n```\n\n### Global Variables\n\n```javascript\n// Variable declared globally\nconst color = \"blue\";\n\nfunction printColor() {\n  console.log(color);\n}\n\nprintColor(); // => blue\n```\n\n### let vs var\n\n```javascript\nfor (let i = 0; i < 3; i++) {\n  // This is the Max Scope for 'let'\n  // i accessible \u2714\ufe0f\n}\n// i not accessible \u274c\n```\n\n---\n\n```javascript\nfor (var i = 0; i < 3; i++) {\n  // i accessible \u2714\ufe0f\n}\n// i accessible \u2714\ufe0f\n```\n\n`var` is scoped to the nearest function block, and `let` is scoped to the nearest enclosing block.\n\n### Loops with closures\n\n```javascript\n// Prints 3 thrice, not what we meant.\nfor (var i = 0; i < 3; i++) {\n  setTimeout(_ => console.log(i), 10);\n}\n```\n\n---\n\n```javascript\n// Prints 0, 1 and 2, as expected.\nfor (let j = 0; j < 3; j++) {\n  setTimeout(_ => console.log(j), 10);\n}\n```\n\nThe variable has its own copy using `let`, and the variable has shared copy using `var`.\n"
            },
            {
                "title": "JavaScript Arrays",
                "content": "\n### Arrays\n\n```javascript\nconst fruits = [\"apple\", \"orange\", \"banana\"];\n\n// Different data types\nconst data = [1, \"chicken\", false];\n```\n\n### Property .length\n\n```javascript\nconst numbers = [1, 2, 3, 4];\n\nnumbers.length; // 4\n```\n\n### Index\n\n```javascript\n// Accessing an array element\nconst myArray = [100, 200, 300];\n\nconsole.log(myArray[0]); // 100\nconsole.log(myArray[1]); // 200\n```\n\n### Mutable chart\n\n|           | add | remove | start | end |\n| :-------- | :-: | :----: | :---: | :-: |\n| `push`    | \u2714  |        |       | \u2714  |\n| `pop`     |     |   \u2714   |       | \u2714  |\n| `unshift` | \u2714  |        |  \u2714   |     |\n| `shift`   |     |   \u2714   |  \u2714   |     |\n\n\n\n### Array.push()\n\n```javascript\n// Adding a single element:\nconst cart = [\"apple\", \"orange\"];\ncart.push(\"pear\");\n\n// Adding multiple elements:\nconst numbers = [1, 2];\nnumbers.push(3, 4, 5);\n```\n\nAdd items to the end and returns the new array length.\n\n### Array.pop()\n\n```javascript\nconst fruits = [\"apple\", \"orange\", \"banana\"];\n\nconst fruit = fruits.pop(); // 'banana'\nconsole.log(fruits); // [\"apple\", \"orange\"]\n```\n\nRemove an item from the end and returns the removed item.\n\n### Array.shift()\n\n```javascript\nlet cats = [\"Bob\", \"Willy\", \"Mini\"];\n\ncats.shift(); // ['Willy', 'Mini']\n```\n\nRemove an item from the beginning and returns the removed item.\n\n### Array.unshift()\n\n```javascript\nlet cats = [\"Bob\"];\n\n// => ['Willy', 'Bob']\ncats.unshift(\"Willy\");\n\n// => ['Puff', 'George', 'Willy', 'Bob']\ncats.unshift(\"Puff\", \"George\");\n```\n\nAdd items to the beginning and returns the new array length.\n\n### Array.concat()\n\n```javascript\nconst numbers = [3, 2, 1];\nconst newFirstNumber = 4;\n\n// => [ 4, 3, 2, 1 ]\n[newFirstNumber].concat(numbers);\n\n// => [ 3, 2, 1, 4 ]\nnumbers.concat(newFirstNumber);\n```\n\nIf you want to avoid mutating your original array, you can use concat.\n"
            },
            {
                "title": "JavaScript Set",
                "content": "\n### Create Set\n\n```javascript\n// Empty Set Object\nconst emptySet = new Set();\n\n// Set Object with values\nconst setObj = new Set([1, true, \"hi\"]);\n```\n\n### Add\n\n```javascript\nconst emptySet = new Set();\n\n// add values\nemptySet.add(\"a\"); // 'a'\nemptySet.add(1); // 'a', 1\nemptySet.add(true); // 'a', 1, true\nemptySet.add(\"a\"); // 'a', 1, true\n```\n\n### Delete\n\n```javascript\nconst emptySet = new Set([1, true, \"a\"]);\n\n// delete values\nemptySet.delete(\"a\"); // 1, true\nemptySet.delete(true); // 1\nemptySet.delete(1); //\n```\n\n### Has\n\n```javascript\nconst setObj = new Set([1, true, \"a\"]);\n\n// returns true or false\nsetObj.has(\"a\"); // true\nsetObj.has(1); // true\nsetObj.has(false); // false\n```\n\n### Clear\n\n```javascript\nconst setObj = new Set([1, true, \"a\"]);\n\n// clears the set\nconsole.log(setObj); // 1, true, 'a'\nsetObj.clear(); //\n```\n\n### Size\n\n```javascript\nconst setObj = new Set([1, true, \"a\"]);\n\nconsoloe.log(setObj.size); // 3\n```\n\n### ForEach\n\n```javascript\nconst setObj = new Set([1, true, \"a\"]);\n\nsetObj.forEach(function (value) {\n  console.log(value);\n});\n\n// 1\n// true\n// 'a'\n```\n"
            },
            {
                "title": "JavaScript Loops",
                "content": "\n### While Loop\n\n```javascript\nwhile (condition) {\n  // code block to be executed\n}\n\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}\n```\n\n### Reverse Loop\n\n```javascript\nconst fruits = [\"apple\", \"orange\", \"banana\"];\n\nfor (let i = fruits.length - 1; i >= 0; i--) {\n  console.log(`${i}. ${fruits[i]}`);\n}\n\n// => 2. banana\n// => 1. orange\n// => 0. apple\n```\n\n### Do\u2026While Statement\n\n```javascript\nx = 0;\ni = 0;\n\ndo {\n  x = x + i;\n  console.log(x);\n  i++;\n} while (i < 5);\n// => 0 1 3 6 10\n```\n\n### For Loop\n\n```javascript\nfor (let i = 0; i < 4; i += 1) {\n  console.log(i);\n}\n\n// => 0, 1, 2, 3\n```\n\n### Looping Through Arrays\n\n```javascript\nfor (let i = 0; i < array.length; i++) {\n  console.log(array[i]);\n}\n\n// => Every item in the array\n```\n\n### Break\n\n```javascript\nfor (let i = 0; i < 99; i += 1) {\n  if (i > 5) {\n    break;\n  }\n  console.log(i);\n}\n// => 0 1 2 3 4 5\n```\n\n### Continue\n\n```javascript\nfor (i = 0; i < 10; i++) {\n  if (i === 3) {\n    continue;\n  }\n  text += \"The number is \" + i + \"<br>\";\n}\n```\n\n### Nested\n\n```javascript\nfor (let i = 0; i < 2; i += 1) {\n  for (let j = 0; j < 3; j += 1) {\n    console.log(`${i}-${j}`);\n  }\n}\n```\n\n### for...in loop\n\n```javascript\nconst fruits = [\"apple\", \"orange\", \"banana\"];\n\nfor (let index in fruits) {\n  console.log(index);\n}\n// => 0\n// => 1\n// => 2\n```\n\n### for...of loop\n\n```javascript\nconst fruits = [\"apple\", \"orange\", \"banana\"];\n\nfor (let fruit of fruits) {\n  console.log(fruit);\n}\n// => apple\n// => orange\n// => banana\n```\n"
            },
            {
                "title": "JavaScript Iterators",
                "content": "\n### Functions Assigned to Variables\n\n```javascript\nlet plusFive = (number) => {\n  return number + 5;\n};\n// f is assigned the value of plusFive\nlet f = plusFive;\n\nplusFive(3); // 8\n// Since f has a function value, it can be invoked.\nf(9); // 14\n```\n\n### Callback Functions\n\n```javascript\nconst isEven = (n) => {\n  return n % 2 == 0;\n};\n\nlet printMsg = (evenFunc, num) => {\n  const isNumEven = evenFunc(num);\n  console.log(`${num} is an even number: ${isNumEven}.`);\n};\n\n// Pass in isEven as the callback function\nprintMsg(isEven, 4);\n// => The number 4 is an even number: True.\n```\n\n### Array.reduce()\n\n```javascript\nconst numbers = [1, 2, 3, 4];\n\nconst sum = numbers.reduce((accumulator, curVal) => {\n  return accumulator + curVal;\n});\n\nconsole.log(sum); // 10\n```\n\n### Array.map()\n\n```javascript\nconst members = [\"Taylor\", \"Donald\", \"Don\", \"Natasha\", \"Bobby\"];\n\nconst announcements = members.map((member) => {\n  return member + \" joined the contest.\";\n});\n\nconsole.log(announcements);\n```\n\n### Array.forEach()\n\n```javascript\nconst numbers = [28, 77, 45, 99, 27];\n\nnumbers.forEach((number) => {\n  console.log(number);\n});\n```\n\n### Array.filter()\n\n```javascript\nconst randomNumbers = [4, 11, 42, 14, 39];\nconst filteredArray = randomNumbers.filter((n) => {\n  return n > 5;\n});\n```\n"
            },
            {
                "title": "JavaScript Objects",
                "content": "\n### Accessing Properties\n\n```javascript\nconst apple = {\n  color: \"Green\",\n  price: { bulk: \"$3/kg\", smallQty: \"$4/kg\" },\n};\nconsole.log(apple.color); // => Green\nconsole.log(apple.price.bulk); // => $3/kg\n```\n\n### Naming Properties\n\n```javascript\n// Example of invalid key names\nconst trainSchedule = {\n  // Invalid because of the space between words.\n  platform num: 10,\n  // Expressions cannot be keys.\n  40 - 10 + 2: 30,\n  // A + sign is invalid unless it is enclosed in quotations.\n  +compartment: 'C'\n}\n```\n\n### Non-existent properties\n\n```javascript\nconst classElection = {\n  date: \"January 12\",\n};\n\nconsole.log(classElection.place); // undefined\n```\n\n### Mutable \n\n```javascript\nconst student = {\n  name: \"Sheldon\",\n  score: 100,\n  grade: \"A\",\n};\n\nconsole.log(student);\n// { name: 'Sheldon', score: 100, grade: 'A' }\n\ndelete student.score;\nstudent.grade = \"F\";\nconsole.log(student);\n// { name: 'Sheldon', grade: 'F' }\n\nstudent = {};\n// TypeError: Assignment to constant variable.\n```\n\n### Assignment shorthand syntax\n\n```javascript\nconst person = {\n  name: \"Tom\",\n  age: \"22\",\n};\nconst { name, age } = person;\nconsole.log(name); // 'Tom'\nconsole.log(age); // '22'\n```\n\n### Delete operator\n\n```javascript\nconst person = {\n  firstName: \"Matilda\",\n  age: 27,\n  hobby: \"knitting\",\n  goal: \"learning JavaScript\",\n};\n\ndelete person.hobby; // or delete person[hobby];\n\nconsole.log(person);\n/*\n{\n  firstName: \"Matilda\"\n  age: 27\n  goal: \"learning JavaScript\"\n}\n*/\n```\n\n### Objects as arguments\n\n```javascript\nconst origNum = 8;\nconst origObj = { color: \"blue\" };\n\nconst changeItUp = (num, obj) => {\n  num = 7;\n  obj.color = \"red\";\n};\n\nchangeItUp(origNum, origObj);\n\n// Will output 8 since integers are passed by value.\nconsole.log(origNum);\n\n// Will output 'red' since objects are passed\n// by reference and are therefore mutable.\nconsole.log(origObj.color);\n```\n\n### Shorthand object creation\n\n```javascript\nconst activity = \"Surfing\";\nconst beach = { activity };\nconsole.log(beach); // { activity: 'Surfing' }\n```\n\n### this Keyword\n\n```javascript\nconst cat = {\n  name: \"Pipey\",\n  age: 8,\n  whatName() {\n    return this.name;\n  },\n};\nconsole.log(cat.whatName()); // => Pipey\n```\n\n### Factory functions\n\n```javascript\n// A factory function that accepts 'name',\n// 'age', and 'breed' parameters to return\n// a customized dog object.\nconst dogFactory = (name, age, breed) => {\n  return {\n    name: name,\n    age: age,\n    breed: breed,\n    bark() {\n      console.log(\"Woof!\");\n    },\n  };\n};\n```\n\n### Object methods\n\n```javascript\nconst engine = {\n  // method shorthand, with one argument\n  start(adverb) {\n    console.log(`The engine starts up ${adverb}...`);\n  },\n  // anonymous arrow function expression with no arguments\n  sputter: () => {\n    console.log(\"The engine sputters...\");\n  },\n};\n\nengine.start(\"noisily\");\nengine.sputter();\n```\n\n### Getters and setters\n\n```javascript\nconst myCat = {\n  _name: \"Dottie\",\n  get name() {\n    return this._name;\n  },\n  set name(newName) {\n    this._name = newName;\n  },\n};\n\n// Reference invokes the getter\nconsole.log(myCat.name);\n\n// Assignment invokes the setter\nmyCat.name = \"Yankee\";\n```\n"
            },
            {
                "title": "JavaScript Classes",
                "content": "\n### Static Methods\n\n```javascript\nclass Dog {\n  constructor(name) {\n    this._name = name;\n  }\n\n  introduce() {\n    console.log(\"This is \" + this._name + \" !\");\n  }\n\n  // A static method\n  static bark() {\n    console.log(\"Woof!\");\n  }\n}\n\nconst myDog = new Dog(\"Buster\");\nmyDog.introduce();\n\n// Calling the static method\nDog.bark();\n```\n\n### Class\n\n```javascript\nclass Song {\n  constructor() {\n    this.title;\n    this.author;\n  }\n\n  play() {\n    console.log(\"Song playing!\");\n  }\n}\n\nconst mySong = new Song();\nmySong.play();\n```\n\n### Class Constructor\n\n```javascript\nclass Song {\n  constructor(title, artist) {\n    this.title = title;\n    this.artist = artist;\n  }\n}\n\nconst mySong = new Song(\"Bohemian Rhapsody\", \"Queen\");\nconsole.log(mySong.title);\n```\n\n### Class Methods\n\n```javascript\nclass Song {\n  play() {\n    console.log(\"Playing!\");\n  }\n\n  stop() {\n    console.log(\"Stopping!\");\n  }\n}\n```\n\n### extends\n\n```javascript\n// Parent class\nclass Media {\n  constructor(info) {\n    this.publishDate = info.publishDate;\n    this.name = info.name;\n  }\n}\n\n// Child class\nclass Song extends Media {\n  constructor(songData) {\n    super(songData);\n    this.artist = songData.artist;\n  }\n}\n\nconst mySong = new Song({\n  artist: \"Queen\",\n  name: \"Bohemian Rhapsody\",\n  publishDate: 1975,\n});\n```\n"
            },
            {
                "title": "JavaScript Modules",
                "content": "\n### Export\n\n```javascript\n// myMath.js\n\n// Default export\nexport default function add(x, y) {\n  return x + y;\n}\n\n// Normal export\nexport function subtract(x, y) {\n  return x - y;\n}\n\n// Multiple exports\nfunction multiply(x, y) {\n  return x * y;\n}\nfunction duplicate(x) {\n  return x * 2;\n}\nexport { multiply, duplicate };\n```\n\n### Import\n\n```javascript\n// main.js\nimport add, { subtract, multiply, duplicate } from './myMath.js';\n\nconsole.log(add(6, 2)); // 8\nconsole.log(subtract(6, 2)) // 4\nconsole.log(multiply(6, 2)); // 12\nconsole.log(duplicate(5)) // 10\n\n// index.html\n<script type=\"module\" src=\"main.js\"></script>\n```\n\n### Export Module\n\n```javascript\n// myMath.js\n\nfunction add(x, y) {\n  return x + y;\n}\nfunction subtract(x, y) {\n  return x - y;\n}\nfunction multiply(x, y) {\n  return x * y;\n}\nfunction duplicate(x) {\n  return x * 2;\n}\n\n// Multiple exports in node.js\nmodule.exports = {\n  add,\n  subtract,\n  multiply,\n  duplicate,\n};\n```\n\n### Require Module\n\n```javascript\n// main.js\nconst myMath = require(\"./myMath.js\");\n\nconsole.log(myMath.add(6, 2)); // 8\nconsole.log(myMath.subtract(6, 2)); // 4\nconsole.log(myMath.multiply(6, 2)); // 12\nconsole.log(myMath.duplicate(5)); // 10\n```\n"
            },
            {
                "title": "JavaScript Promises",
                "content": "\n### Promise states \n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  const res = true;\n  // An asynchronous operation.\n  if (res) {\n    resolve(\"Resolved!\");\n  } else {\n    reject(Error(\"Error\"));\n  }\n});\n\npromise.then(\n  (res) => console.log(res),\n  (err) => console.error(err),\n);\n```\n\n### Executor function\n\n```javascript\nconst executorFn = (resolve, reject) => {\n  resolve(\"Resolved!\");\n};\n\nconst promise = new Promise(executorFn);\n```\n\n### setTimeout()\n\n```javascript\nconst loginAlert = () => {\n  console.log(\"Login\");\n};\n\nsetTimeout(loginAlert, 6000);\n```\n\n### .then() method\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"Result\");\n  }, 200);\n});\n\npromise.then(\n  (res) => {\n    console.log(res);\n  },\n  (err) => {\n    console.error(err);\n  },\n);\n```\n\n### Promise.catch()\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    reject(Error(\"Promise Rejected Unconditionally.\"));\n  }, 1000);\n});\n\npromise.then((res) => {\n  console.log(value);\n});\n\npromise.catch((err) => {\n  console.error(err);\n});\n```\n\n### Promise.all()\n\n```javascript\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(3);\n  }, 300);\n});\nconst promise2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(2);\n  }, 200);\n});\n\nPromise.all([promise1, promise2]).then((res) => {\n  console.log(res[0]);\n  console.log(res[1]);\n});\n```\n\n### Avoiding nested Promise and .then()\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"*\");\n  }, 1000);\n});\n\nconst twoStars = (star) => {\n  return star + star;\n};\n\nconst oneDot = (star) => {\n  return star + \".\";\n};\n\nconst print = (val) => {\n  console.log(val);\n};\n\n// Chaining them all together\npromise.then(twoStars).then(oneDot).then(print);\n```\n\n### Creating\n\n```javascript\nconst executorFn = (resolve, reject) => {\n  console.log(\"The executor function of the promise!\");\n};\n\nconst promise = new Promise(executorFn);\n```\n\n### Chaining multiple .then()\n\n```javascript\nconst promise = new Promise((resolve) => setTimeout(() => resolve(\"dAlan\"), 100));\n\npromise\n  .then((res) => {\n    return res === \"Alan\" ? Promise.resolve(\"Hey Alan!\") : Promise.reject(\"Who are you?\");\n  })\n  .then(\n    (res) => {\n      console.log(res);\n    },\n    (err) => {\n      console.error(err);\n    },\n  );\n```\n\n### Fake http Request with Promise\n\n```javascript\nconst mock = (success, timeout = 1000) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (success) {\n        resolve({ status: 200, data: {} });\n      } else {\n        reject({ message: \"Error\" });\n      }\n    }, timeout);\n  });\n};\nconst someEvent = async () => {\n  try {\n    await mock(true, 1000);\n  } catch (e) {\n    console.log(e.message);\n  }\n};\n```\n"
            },
            {
                "title": "JavaScript Async-Await",
                "content": "\n### Asynchronous\n\n```javascript\nfunction helloWorld() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"Hello World!\");\n    }, 2000);\n  });\n}\n\nconst msg = async function () {\n  //Async Function Expression\n  const msg = await helloWorld();\n  console.log(\"Message:\", msg);\n};\n\nconst msg1 = async () => {\n  //Async Arrow Function\n  const msg = await helloWorld();\n  console.log(\"Message:\", msg);\n};\n\nmsg(); // Message: Hello World! <-- after 2 seconds\nmsg1(); // Message: Hello World! <-- after 2 seconds\n```\n\n### Resolving Promises\n\n```javascript\nlet pro1 = Promise.resolve(5);\nlet pro2 = 44;\nlet pro3 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 100, \"foo\");\n});\n\nPromise.all([pro1, pro2, pro3]).then(function (values) {\n  console.log(values);\n});\n// expected => Array [5, 44, \"foo\"]\n```\n\n### Async Await Promises\n\n```javascript\nfunction helloWorld() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"Hello World!\");\n    }, 2000);\n  });\n}\n\nasync function msg() {\n  const msg = await helloWorld();\n  console.log(\"Message:\", msg);\n}\n\nmsg(); // Message: Hello World! <-- after 2 seconds\n```\n\n### Error Handling\n\n```javascript\nlet json = '{ \"age\": 30 }'; // incomplete data\n\ntry {\n  let user = JSON.parse(json); // <-- no errors\n  console.log(user.name); // no name!\n} catch (e) {\n  console.error(\"Invalid JSON data!\");\n}\n```\n\n### Aysnc await operator\n\n```javascript\nfunction helloWorld() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"Hello World!\");\n    }, 2000);\n  });\n}\n\nasync function msg() {\n  const msg = await helloWorld();\n  console.log(\"Message:\", msg);\n}\n\nmsg(); // Message: Hello World! <-- after 2 seconds\n```\n"
            },
            {
                "title": "JavaScript Requests",
                "content": "\n### JSON\n\n```json\nconst jsonObj = {\n  \"name\": \"Rick\",\n  \"id\": \"11A\",\n  \"level\": 4\n};\n```\n\nAlso see: [JSON cheatsheet](/json)\n\n### XMLHttpRequest\n\n```javascript\nconst xhr = new XMLHttpRequest();\nxhr.open(\"GET\", \"mysite.com/getjson\");\n```\n\n`XMLHttpRequest` is a browser-level API that enables the client to script data transfers via JavaScript, NOT part of the\nJavaScript language.\n\n### GET\n\n```javascript\nconst req = new XMLHttpRequest();\nreq.responseType = \"json\";\nreq.open(\"GET\", \"/getdata?id=65\");\nreq.onload = () => {\n  console.log(xhr.response);\n};\n\nreq.send();\n```\n\n### POST \n\n```javascript\nconst data = {\n  fish: \"Salmon\",\n  weight: \"1.5 KG\",\n  units: 5,\n};\nconst xhr = new XMLHttpRequest();\nxhr.open(\"POST\", \"/inventory/add\");\nxhr.responseType = \"json\";\nxhr.send(JSON.stringify(data));\n\nxhr.onload = () => {\n  console.log(xhr.response);\n};\n```\n\n### fetch api \n\n```javascript\nfetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      'apikey': apiKey\n    },\n    body: data\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error('Request failed!');\n  }, networkError => {\n    console.log(networkError.message)\n  })\n}\n```\n\n### JSON Formatted\n\n```javascript\nfetch(\"url-that-returns-JSON\")\n  .then((response) => response.json())\n  .then((jsonResponse) => {\n    console.log(jsonResponse);\n  });\n```\n\n### promise url parameter fetch api\n\n```javascript\nfetch('url')\n.then(\n  response  => {\n    console.log(response);\n  },\n rejection => {\n    console.error(rejection.message);\n);\n```\n\n### Fetch API Function\n\n```javascript\nfetch(\"https://api-xxx.com/endpoint\", {\n  method: \"POST\",\n  body: JSON.stringify({ id: \"200\" }),\n})\n  .then(\n    (response) => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error(\"Request failed!\");\n    },\n    (networkError) => {\n      console.log(networkError.message);\n    },\n  )\n  .then((jsonResponse) => {\n    console.log(jsonResponse);\n  });\n```\n\n### async await syntax \n\n```javascript\nconst getSuggestions = async () => {\n  const wordQuery = inputField.value;\n  const endpoint = `${url}${queryParams}${wordQuery}`;\n  try {\n    const response = await fetch(endpoint, { cache: \"no-cache\" });\n    if (response.ok) {\n      const jsonResponse = await response.json();\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n```"
            }
        ]
    },
    {
        "name": "swift",
        "title": "Swift",
        "tags": [
            "Apple",
            "iOS",
            "iPadOS"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#eb4e38",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/swift.svg",
        "intro": "This cheat sheet provides examples of using Swift that cover basic Swift knowledge, control flow etc.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Variable \n\n```swift\nvar score = 0  // Variable\nlet pi = 3.14  // Constant\n\nvar greeting = \"Hello\"\nvar numberOfToys = 8\nvar isMorning = true\n\nvar numberOfToys: Int = 8\nnumberOfToys += 1\n\nprint(numberOfToys)\n// prints \"9\"\n```\n\n### Type annotations\n\n```swift\nvar greeting: String = \"Hello\"\nvar numberOfToys: Int = 8\nvar isMorning: Bool = true\nvar price: Double = 8.99\n```\n\n### Arithmetic operators \n\n- `+` Add\n- `-` Subtraction\n- `*` Multiplication\n- `/` Division\n- `%` Remainder\n\n\n\n---\n\n```swift\nvar x = 0\nx = 4 + 2 // x is now 6\nx = 4 - 2 // x is now 2\nx = 4 * 2 // x is now 8\nx = 4 / 2 // x is now 2\nx = 4 % 2 // x is now 0\n```\n\n---\n\n- `+=` Adds and assigns sums\n- `-=` subtract and assign the difference\n- `*=` Multiplication and assignment\n- `/=` Divide and assign quotient\n- `%=` Divide and assign remainder\n\n\n\n#### Compound Assignment Operators\n\n```swift\nvar numberOfDogs = 100\nnumberOfDogs += 1\nprint(\"There are \\(numberOfDogs) Dalmatians!\")\n\n// print: There are 101 Dalmatians!\n```\n\n### String interpolation\n\n```swift\nvar apples = 6\nprint(\"I have \\(apples) apples!\")\n\n// print: I have 6 apples!\n```\n\n### Multi-line string\n\n```swift\nlet myLongString = \"\"\"\nSwift?\nThis is my favorite language!\nYeah!\n\"\"\"\n```\n\n### Code Comments\n\n```swift\n// This line represents a comment in Swift.\n\n/*\nThis is all commented out.\nNone will run!\n*/\n```\n\n### Form a tuple \n\n```swift\nlet player = (\"Maya\", 5, 150)\n\nprint(player) // (\"Maya\", 5, 150)\nprint(\"\\(player.0): level \\(player.1), \\(player.2) pts\") // Maya: level 5, 150 pts\n```\n\n### Decompose tuple\n\n```swift\nlet player = (name: \"Maya\", level: 5)\nlet (currentName, curLevel) = player\nprint(\"\\(currentName): level \\(curLevel)\")\n// print: Maya: level 5\n```\n\n### Special comment syntax (MARK)\n\n```swift\n// MARK: -view settings\n```\n\n`MARK` can be used to display comments in the column\n\n### Special comment syntax (TODO)\n\n```swift\n// TODO: update logic to accommodate data changes\n```\n\n`TODO` is used to display reminders of things that need to be done\n\n### Special Comment Syntax (FIXME)\n\n```swift\n// FIXME: Fix buggy behavior when making changes to existing entries\n```\n\n`FIXME` is used to display reminders about things that need to be fixed\n"
            },
            {
                "title": "Variable",
                "content": "\n### Variable declaration\n\nVariables are declared with `var`:\n\n```swift\nvar greeting = \"Hello\"\nvar numberOfToys = 8\nvar isMorning = true\n```\n\nFor clarity, variable declarations can contain type annotations:\n\n```swift\nvar greeting: String = \"Hello\"\nvar numberOfToys: Int = 8\nvar isMorning: Bool = true\n```\n\nVariables are mutable. Their values be changed:\n\n```swift\nvar numberOfToys: Int = 8\nnumberOfToys += 1\n\nprint(numberOfToys)\n// print \"9\"\n```\n\n### Constants\n\nConstants are declared with `let`:\n\n```swift\nlet greeting = \"Hello\"\nlet numberOfToys = 8\nlet isMorning = true\n```\n\nFor clarity, constant declarations can contain type annotations:\n\n```swift\nlet greeting: String = \"Hello\"\nlet numberOfToys: Int = 8\nlet isMorning: Bool = true\n```\n\nConstants are immutable. Their values be changed:\n\n```swift\nlet numberOfToys: Int = 8\nnumberOfToys += 1\n// Error: numberOfToys is immutable\n```\n\n### Computed variables (get and set) \n\n```swift\nimport Foundation\n\nlet df = DateFormatter()\ndf.dateFormat = \"d MMMM yyyy\"\n\nguard var birth = df.date(from: \"5 June 1999\") else {\n    print(\"Date is not valid\")\n    return\n}\n\nvar age: Int {\n    Calendar.current\n        .dateComponents([.year],\n                        from: birth,\n                        to: Date()).year!\n}\n\nprint(age) // 23\nguard let birth2 = df.date(from: \"5 June 2002\") else {\n    print(\"Date is not valid\")\n    return\n}\nbirth = birth2\nprint(age) // 20\n```\n\nIn the example below, distanceInFeet has a `getter` and a `setter`. Because of the `setter`, the `getter` requires the\nkeyword `get`:\n\n```swift\nvar distanceInMeters: Float = 100\n\nvar distanceInFeet: Float {\n  get {\n    distanceInMeters *3.28\n  }\n  set(newDistance) {\n    distanceInMeters = newDistance /3.28\n  }\n}\n\nprint(distanceInMeters) // 100.0\nprint(distanceInFeet)   // 328.0\n\ndistanceInFeet = 250\nprint(distanceInMeters) // 76.21951\nprint(distanceInFeet)   // 250.0\n\ndistanceInMeters = 800\nprint(distanceInMeters) // 800.0\nprint(distanceInFeet)   // 2624.0\n```\n\n### willSet \n\n```swift\nvar distance = 5 {\n  willSet {\n    print(\"The distance will be set\")\n  }\n}\n\ndistance = 10 // print: distance will be set\n```\n\nThe new value can be accessed in `willSet`:\n\n```swift\nvar distance = 5 {\n  willSet(newDistance) {\n    print(\"The distance will be set \\(newDistance)\")\n  }\n}\n\ndistance = 10 // print: distance will be set to 10\n```\n\n`willSet` can be used to execute some code before setting the variable value\n\n### didSet\n\n```swift\nvar distance = 5 {\n  didSet {\n    print(\"The distance is set to \\(distance)\")\n    print(\"Its old value is: \\(oldValue)\")\n  }\n}\ndistance = 10 // print: distance will be set to 10\n              // print: its old value is: 5\n```\n\n### willSet and didSet\n\n```swift\nvar distance = 5 {\n  willSet(newDistance) {\n    print(\"The distance will be set to \\(newDistance)\")\n  }\n  didSet {\n    print(\"The distance is set to \\(distance)\")\n    print(\"Its old value is: \\(oldValue)\")\n  }\n}\ndistance = 10\n```\n"
            },
            {
                "title": "Conditions",
                "content": "\n### if statement\n\n```swift\nvar halloween = true\nif halloween {\n  print(\"Trick or treat!\")\n}\n// print: Trick or treat!\nif 5 > 3 {\n  print(\"5 is greater than 3\")\n} else {\n  print(\"5 is not more than 3\")\n}\n// output: \"5 is greater than 3\"\n```\n\n### else statement\n\n```swift\nvar turbulence = false\n\nif turbulence {\n  print(\"Please sit down.\")\n} else {\n  print(\"You are free to move around.\")\n}\n// print: You are free to move around.\n```\n\n### else if statement\n\n```swift\nvar weather = \"rainy\"\nif weather == \"sunny\" {\n  print(\"Get some sunscreen\")\n} else if weather == \"rainy\" {\n  print(\"Take an umbrella\")\n} else if weather == \"snowing\" {\n  print(\"Put on your snow boots\")\n} else {\n  print(\"Invalid weather\")\n}\n// print: take an umbrella\n```\n\n### Comparison Operators\n\n```swift\n5 > 1      // true\n6 < 10     // true\n2 >= 3     // false\n3 <= 5     // true\n\"A\" == \"a\" // false\n\"B\" != \"b\" // true\n```\n\n-`<` less than <br> -`>` greater than <br> -`<=` less than or equal to <br> -`>=` greater than or equal to <br> -`==` is\nequal to <br> -`!=` is not equal to\n\n### Range Operators\n\n```swift\na...b      // numbers between a and b (including both a and b)\na..<b      // numbers between a and b (including a but excluding b)\n...b      // numbers till b (including b)\n```\n\n-`a...b` Closed Range <br> -`a..<b` Half-Open Range <br> -`...b` One-Sided Range\n\n### Ternary conditional operator\n\n```swift\nvar driverLicense = true\n\ndriverLicense\n    ? print(\"driver seat\") : print(\"passenger seat\")\n// print: driver's seat\n```\n\n### switch statement\n\n```swift\nvar secondaryColor = \"green\"\n\nswitch secondaryColor {\n  case \"orange\":\n    print(\"A mixture of red and yellow\")\n  case \"purple\":\n    print(\"A mix of red and blue\")\n  default:\n    print(\"This may not be a secondary color\")\n}\n// print: mix of blue and yellow\n```\n\n### switch statement: interval matching\n\n```swift\nlet year = 1905\nvar artPeriod: String\n\nswitch year {\n  case 1860...1885:\n    artPeriod = \"Impressionism\"\n  case 1886...1910:\n    artPeriod = \"Post-Impressionism\"\n  default:\n    artPeriod = \"Unknown\"\n}\n// print: post-impressionism\n```\n\n### switch statement: composite case\n\n```swift\nlet service = \"Seamless\"\n\nswitch service {\ncase \"Uber\", \"Lyft\":\n    print(\"travel\")\n  case \"DoorDash\", \"Seamless\", \"GrubHub\":\n    print(\"Restaurant delivery\")\n  case \"Instacart\", \"FreshDirect\":\n    print(\"Grocery Delivery\")\n  default:\n    print(\"Unknown service\")\n}\n// print: restaurant takeaway\n```\n\n### switch statement: where clause\n\n```swift\nlet num = 7\n\nswitch num {\n  case let x where x % 2 == 0:\n    print(\"\\(num) is even\")\n  case let x where x % 2 == 1:\n    print(\"\\(num) odd number\")\n  default:\n    print(\"\\(num) is invalid\")\n}\n\n// print: 7 odd\n```\n\n### Logical Operators\n\n```swift\n!true  // false\n!false //true\n```\n\n### Logical Operators &&\n\n```swift\ntrue && true   // true\ntrue && false  // false\nfalse && true  // false\nfalse && false // false\n```\n\n### Logical operators ||\n\n```swift\ntrue || true   // true\ntrue || false  // true\nfalse || true  // true\nfalse || false // false\n```\n\n### Combined Logical Operators\n\n```swift\n!false && true || false // true\n```\n\n`!false && true` first evaluates and returns `true` Then, the expression, `true` || `false` evaluates and returns the\nfinal result `true`\n\n```swift\nfalse || true && false // false\n```\n\n`true && false` first evaluates to return `false` Then, the expression, `false` || `false` evaluates and returns the\nfinal result `false`\n\n### Control the order of execution\n\n```swift\n\n// without parentheses:\ntrue || true && false || false\n//----> true\n\n// with brackets:\n(true || true) && (false || false)\n//----> false\n\n```\n\n### Simple guards\n\n```swift\nfunc greet(name: String?) {\n  guard let unwrapped = name else {\n    print(\"Hello guest!\")\n    return\n  }\n  print(\"Hello \\(unwrapped)!\")\n}\ngreet(name: \"Asma\") // output: Hello Asma!\ngreet(name: nil)    // output: Hello guest!\n```\n"
            },
            {
                "title": "cycle",
                "content": "\n### scope\n\n```swift\nlet zeroToThree = 0...3\n//zeroToThree: 0, 1, 2, 3\n```\n\n### stride() function\n\n```swift\nfor oddNum in stride(from: 1, to: 5, by: 2) {\n  print(oddNum)\n}\n// print: 1\n// print: 3\n```\n\n### for-in loop\n\n```swift\nfor char in \"hehe\" {\n  print(char)\n}\n// print: h\n// print: e\n// print: h\n// print: e\n```\n\n### continue keyword\n\n```swift\nfor num in 0...5 {\n  if num % 2 == 0 {\n    continue\n  }\n  print(num)\n}\n// print: 1\n// print: 3\n// print: 5\n```\n\nThe `continue` keyword will force the loop to continue for the next iteration\n\n### break keyword\n\n```swift\nfor char in \"supercalifragilistic\" {\nif char == \"c\" {\n    break\n  }\n  print(char)\n}\n// print: s\n// print: u\n// print: p\n// print: e\n// print: r\n```\n\n### Use underscores\n\n```swift\nfor _ in 1...3 {\n  print(\"Ole\")\n}\n// print: Ole\n// print: Ole\n// print: Ole\n```\n\n### while loop\n\n```swift\nvar counter = 1\nvar stopNum = Int.random(in: 1...10)\n\nwhile counter < stopNum {\n  print(counter)\n  counter += 1\n}\n// loop to print until the stop condition is met\n```\n\nA `while` loop accepts a condition and keeps executing its body code while the provided condition is `true`. If the\ncondition is never false, the loop will keep running and the program will get stuck in an `infinite loop`\n"
            },
            {
                "title": "Arrays and collections",
                "content": "\n### Array\n\n```swift\nvar scores = [Int]()\n// array is empty: []\n```\n\n### .count property\n\n```swift\nvar grocery = [\"\ud83e\udd53\", \"\ud83e\udd5e\", \"\ud83c\udf6a\", \"\ud83e\udd5b\", \"\ud83c\udf4a\"]\nprint(grocery.count)\n// print: 5\n```\n\n### index \n\nThe index refers to the item's position in the ordered list, and a single element is retrieved from the array using the\nsubscript syntax `array[index]`.\n\n```swift\nvar vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\nprint(vowels[0]) // prints: a\nprint(vowels[1]) // prints: e\nprint(vowels[2]) // print: i\nprint(vowels[3]) // prints: o\nprint(vowels[4]) // prints: u\n```\n\nNote: Swift arrays are zero-indexed, meaning the first element has index 0.\n\n### Initialize with array literal\n\n```swift\n// use type inference:\nvar snowfall = [2.4, 3.6, 3.4, 1.8, 0.0]\n// explicit type:\nvar temp: [Int] = [33, 31, 30, 38, 44]\n```\n\n### Initialize with default value\n\n```swift\nvar teams = [Int](repeating: 0, count: 3)\nprint(teams) // prints: [0, 0, 0]\n// or with Array type\nvar sizes = Array<Int>(repeating: 0, count: 3)\nprint(sizes) // prints: [0, 0, 0]\n```\n\n### .append() method and += operator\n\n```swift\nvar gymBadges = [\"Boulder\", \"Cascade\"]\ngymBadges.append(\"Thunder\")\ngymBadges += [\"Rainbow\", \"Soul\"]\n// [\"Boulder\", \"Cascade\", \"Thunder\",\n// \"Rainbow\", \"Soul\"]\n```\n\n### .insert() and .remove() methods\n\n```swift\nvar moon = [\"\ud83c\udf16\", \"\ud83c\udf17\", \"\ud83c\udf18\", \"\ud83c\udf11\"]\nmoon.insert(\"\ud83c\udf15\", at: 0)\n// [\"\ud83c\udf15\", \"\ud83c\udf16\", \"\ud83c\udf17\", \"\ud83c\udf18\", \"\ud83c\udf11\"]\n\nmoon.remove(at: 4)\n// [\"\ud83c\udf15\", \"\ud83c\udf16\", \"\ud83c\udf17\", \"\ud83c\udf18\"]\n```\n\n### Iterate over an array\n\n```swift\nvar employees = [\"Peter\", \"Denial\", \"Jame\"]\nfor person in employees {\n  print(person)\n}\n// print: Peter\n// print: Denial\n// print: Jam\n```\n\n### Collection (Set)\n\n```swift\nvar paintingsInMOMA: Set = [\n  \"The Dream\",\n  \"The Starry Night\",\n  \"The False Mirror\"\n]\n```\n\nWe can use a collection (`Set`) to store `unique` elements of the same data type\n\n### Empty collection (Set)\n\n```swift\nvar team = Set<String>()\n\nprint(team)\n// print: []\n```\n\n### Populate the collection\n\n```swift\nvar vowels: Set = [\"a\", \"e\", \"i\", \"o\",\"u\"]\n```\n\nTo create a set filled with values, use the `Set` keyword before the assignment operator.\n\n### .insert()\n\n```swift\nvar cookieJar: Set = [\n  \"Chocolate Chip\",\n  \"Oatmeal Raisin\"\n]\n// add a new element\ncookieJar.insert(\"Peanut Butter Chip\")\n```\n\n### .remove() and .removeAll() methods\n\n```swift\nvar oddNumbers: Set = [1, 2, 3, 5]\n\n// remove existing element\noddNumbers.remove(2)\n// remove all elements\noddNumbers.removeAll()\n```\n\n### .contains()\n\n```swift\nvar names: Set = [\"Rosa\", \"Doug\", \"Waldo\"]\nprint(names.contains(\"Lola\")) // print: false\n\nif names.contains(\"Waldo\"){\n  print(\"There's Waldo!\")\n} else {\n  print(\"Where's Waldo?\")\n}\n// print: There's Waldo!\n```\n\n### .isEmpty property\n\n```swift\nvar emptyList = [String]()\nprint(emptyList.isEmpty)     // print: true\n\nvar populatedList: [Int] = [1, 2, 3]\nprint(populatedList.isEmpty) // print: false\n```\n\n### Iterate over a collection\n\n```swift\nvar recipe: Set = [\"Egg\", \"Flour\", \"Sugar\"]\n\nfor ingredient in recipe {\n  print (\"Include \\(ingredient) in the recipe\")\n}\n```\n\n### .isEmpty property\n\n```swift\nvar emptySet = Set<String>()\nprint(emptySet.isEmpty)     // print: true\n\nvar populatedSet: Set = [1, 2, 3]\nprint(populatedSet.isEmpty) // print: false\n```\n\n### .count property\n\n```swift\nvar band: Set = [\"Peter\", \"Denial\", \"Jame\"]\n\nprint(\"The band has \\(band.count) players.\")\n// print: Band has 4 players.\n```\n\n### .intersection() Intersection\n\n```swift\nvar setA: Set = [\"A\", \"B\", \"C\", \"D\"]\nvar setB: Set = [\"C\", \"D\", \"E\", \"F\"]\n\nvar setC = setA.intersection(setB)\nprint(setC) // print: [\"D\", \"C\"]\n```\n\n### .union()\n\n```swift\nvar setA: Set = [\"A\", \"B\", \"C\", \"D\"]\nvar setB: Set = [\"C\", \"D\", \"E\", \"F\"]\n\nvar setC = setA.union(setB)\nprint(setC)\n// print: [\"B\", \"A\", \"D\", \"F\", \"C\", \"E\"]\n```\n\n### .symmetricDifference() Symmetric difference\n\n```swift\nvar setA: Set = [\"A\", \"B\", \"C\", \"D\"]\nvar setB: Set = [\"C\", \"D\", \"E\", \"F\"]\n\nvar setC = setA.symmetricDifference(setB)\nprint(setC)\n// print: [\"B\", \"E\", \"F\", \"A\"]\n```\n\n### .subtracting() Subtraction\n\n```swift\nvar setA: Set = [\"A\", \"B\", \"C\", \"D\"]\nvar setB: Set = [\"C\", \"D\"]\n\nvar setC = setA.subtracting(setB)\nprint(setC)\n// print: [\"B\", \"A\"]\n```\n"
            },
            {
                "title": "dictionary",
                "content": "\n### Base Dictionary\n\n```swift\nvar dictionaryName = [\n  \"Key1\": \"Value1\",\n  \"Key2\": \"Value2\",\n  \"Key3\": \"Value3\"\n]\n```\n\nAn `unordered` collection of pairs of data or key-value pairs\n\n### Keys\n\n```swift\nvar fruitStand = [\n  \"Coconuts\": 12,\n  \"Pineapples\": 12,\n  \"Papaya\": 12\n]\n```\n\nEach `key` is `unique` even if they all contain the same `value`\n\n### Type Consistency\n\n```swift\nvar numberOfSides = [\n  \"triangle\": 3,\n  \"square\": 4,\n  \"rectangle\": 4\n]\n```\n\nContains only `String` keys and `Int` values\n\n### Initialize and populate the dictionary\n\n```swift\nvar employeeID = [\n  \"Hamlet\": 1367,\n  \"Horatio\": 8261,\n  \"Ophelia\": 9318\n]\n```\n\n### Initialize an empty dictionary\n\n```swift\n// initializer syntax:\nvar yearlyFishPopulation = [Int: Int]()\n\n// Empty dictionary literal syntax:\nvar yearlyBirdPopulation: [Int: Int] = [:]\n```\n\n### add to dictionary\n\n```swift\nvar pronunciation = [\n  \"library\": \"lai\u00b7breh\u00b7ree\",\n  \"apple\": \"a\u00b7pl\"\n]\n// new key: \"programming\", new value: \"prow gra\"\npronunciation[\"programming\"] = \"prow\u00b7gra\"\n```\n\n### Delete key-value pair \n\n```swift\nvar bookShelf = [\n  \"Goodnight\": \"Margaret Wise Brown\",\n  \"The BFG\": \"Roald Dahl\",\n  \"Falling Up\": \"Shel Silverstein\",\n  \"No, David!\": \"David Shannon\"\n]\n// remove value by setting key to nil\nbookShelf[\"The BFG\"] = nil\n\n// remove value using .removeValue()\nbookShelf.removeValue(forKey: \"Goodnight\")\n\n// remove all values\nbookShelf.removeAll()\n```\n\n### Modify the key-value pair \n\n```swift\nvar change = [\n  \"Quarter\": 0.29,\n  \"Dime\": 0.15,\n  \"Nickel\": 0.05\n]\n\n// Change the value using subscript syntax\nchange[\"Quarter\"] = .25\n\n// Change the value using .updateValue()\nchange.updateValue(.10, forKey: \"Dime\")\n```\n\nTo change the value of a key-value pair, use the `.updateValue()` method or the subscript syntax by appending brackets\n`[ ]` with the existing keys within to the name of the dictionary, then adding the assignment operator _(`= `)_ followed\nby the modified value\n\n### .isEmpty property\n\n```swift\nvar bakery = [String:Int]()\n\n// check if the dictionary is empty\nprint(bakery.isEmpty) // prints true\nbakery[\"Cupcakes\"] = 12\n// check if the dictionary is empty\nprint(bakery.isEmpty) // print false\n```\n\n### .count property\n\n```swift\nvar fruitStand = [\n  \"Apples\": 12,\n  \"Oranges\", 17\n]\nprint(fruitStand.count) // print: 2\n```\n\n### Assigning values to variables\n\n```swift\nvar hex = [\n  \"red\": \"#ff0000\",\n  \"yellow\": \"#ffff00\",\n  \"blue\": \"#0000ff\",\n]\n\nprint(\"Blue hexadecimal code \\(hex[\"blue\"])\")\n// print: blue hex code Optional(\"#0000ff\")\n\nif let redHex = hex[\"red\"] {\n  print(\"red hexadecimal code \\(redHex)\")\n}\n// print: red hex code #ff0000\n```\n\nAssigning the value of a key-value pair to a variable will return an optional value. To extract values, use the optional\nexpansion\n\n### Traversing the dictionary\n\n```swift\nvar emojiMeaning = [\n  \"\ud83e\udd14\": \"Thinking Face\",\n  \"\ud83d\ude2a\": \"Sleepy Face\",\n  \"\ud83d\ude35\": \"Dizzy Face\"\n]\n// loop through keys and values\nfor (emoji, meaning) in emojiMeaning {\n  print(\"\\(emoji) is called '\\(meaning)Emoji'\")\n}\n// iterate through keys only\nfor emoji in emojiMeaning.keys {\n  print(emoji)\n}\n// iterate through values only\nfor meaning in emojiMeaning.values {\n  print(meaning)\n}\n```\n"
            },
            {
                "title": "function",
                "content": "\n### Basic functions\n\n```swift\nfunc washCar() -> Void {\n  print(\"Soap\")\n  print(\"Scrub\")\n  print(\"Rinse\")\n  print(\"Dry\")\n}\n```\n\n### Call functions\n\n```swift\nfunc greetLearner() {\n print(\"Welcome to CheatSheets.zip!\")\n}\n// function call:\ngreetLearner()\n// print: Welcome to CheatSheets.zip!\n```\n\n### return value\n\n```swift\nlet birthYear = 1994\nvar currentYear = 2020\n\nfunc findAge() -> Int {\n  return currentYear-birthYear\n}\n\nprint(findAge()) // prints: 26\n```\n\n### Multiple parameters \n\n```swift\nfunc convertFracToDec(numerator: Double, denominator: Double) -> Double {\n  return numerator / denominator\n}\n\nlet decimal = convertFracToDec(numerator: 1.0, denominator: 2.0)\nprint(decimal) // prints: 0.5\n```\n\n### Omit parameter labels\n\n```swift\nfunc findDiff(_ a: Int, b: Int) -> Int {\n  return a -b\n}\n\nprint(findDiff(6, b: 4)) // prints: 2\n```\n\n### return multiple values \n\n```swift\nfunc smartphoneModel() -> (name: String, version: String, yearReleased: Int) {\n  return (\"iPhone\", \"8 Plus\", 2017)\n}\nlet phone = smartphoneModel()\n\nprint(phone.name)         // print: iPhone\nprint(phone.version)      // print: 8 Plus\nprint(phone.yearReleased) // print: 2017\n```\n\n### Parameters & Arguments\n\n```swift\nfunc findSquarePerimet(side: Int) -> Int {\n  return side *4\n}\n\nlet perimeter = findSquarePerimet(side: 5)\nprint(perimeter) // print: 20\n\n// Parameter: side\n// Argument: 5\n```\n\n### Implicit return\n\n```swift\nfunc nextTotalSolarEclipse() -> String {\n  \"April 8th, 2024 \ud83c\udf0e\"\n}\n\nprint(nextTotalSolarEclipse())\n// print: April 8th, 2024 \ud83c\udf0e\n```\n\n### Default parameters\n\n```swift\nfunc greet(person: String = \"guest\") {\n  print(\"Hello \\(person)\")\n}\ngreet() // Hello guest\ngreet(person: \"Aliya\") // Hello Aliya\n```\n\n### Input and output parameters \n\n```swift\nvar currentSeason = \"Winter\"\n\nfunc season(month: Int, name: inout String) {\n  switch month {\n    case 1...2:\n      name = \"Winter \u26c4\ufe0f\"\n    case 3...6:\n      name = \"Spring \ud83c\udf31\"\n    case 7...9:\n      name = \"Summer \u26f1\"\n    case 10...11:\n      name = \"Autumn \ud83c\udf42\"\n    default:\n      name = \"Unknown\"\n  }\n}\nseason(month: 4, name: &currentSeason)\n\nprint(currentSeason) // Spring \ud83c\udf31\n```\n\n### variable parameter\n\n```swift\nfunc totalStudent(data: String...) -> Int {\n  let numStudents = data.count\n  return numStudents\n}\n\nprint(totalStudent(data: \"Denial\", \"Peter\"))\n// print: 2\n```\n\n### Optional parameters\n\n```swift\nfunc getFirstInitial(from name: String?) -> String? {\n  return name?.first\n}\n```\n\nFunctions can accept optional types and return optional types. When a function cannot return a reasonable instance of\nthe requested type, it should return `nil`\n"
            },
            {
                "title": "structure",
                "content": "\n### Structure Creation\n\n```swift\nstruct Building {\n  var address: String\n  var floors: Int\n  init(address: String, floors: Int) {\n    self.address = address\n    self.floors = floors\n  }\n}\n```\n\nStructs or structs are used to programmatically represent real-life objects in code. A structure is created using the\n`struct` keyword, followed by its name, followed by a body containing its properties and methods\n\n### Default property values\n\n```swift\nstruct Car {\n  var numOfWheels = 4\n  var topSpeed = 80\n}\n\nvar reliantRobin = Car(numOfWheels: 3)\n\nprint(reliantRobin.numOfWheels) // prints: 3\nprint(reliantRobin.topSpeed)    // print: 80\n```\n\n### Structural instance creation\n\n```swift\nstruct Person {\n  var name: String\n  var age: Int\n\n  init(name: String, age: Int) {\n    self.name = name\n    self.age = age\n  }\n}\n\n// Person instance:\nvar morty = Person(name: \"Peter\", age: 14)\n```\n\n### init() method \n\n```swift\nstruct TV {\n  var size: Int\n  var type: String\n\n  init(size: Int, type: String) {\n    self.size = size\n    self.type = type\n  }\n}\n```\n\nUsing the `TV` class\n\n```swift\nvar newTV = TV(size: 65, type: \"LED\")\n```\n\n### Check type\n\n```swift\nprint(type(of: \"abc\")) // print: String\nprint(type(of: 123))   // print: 123\n```\n\n### Mutation method (mutating) \n\n```swift\nstruct Menu {\n  var menuItems = [\"Fries\", \"Burgers\"]\n  mutating func addToMenu(dish: String) {\n    self.menuItems.append(dish)\n  }\n}\n```\n\nUsing the `Menu` class\n\n```swift\nvar dinerMenu = Menu()\ndinerMenu.addToMenu(dish: \"Toast\")\nprint(dinerMenu.menuItems)\n// prints: [\"Fries\", \"Burgers\", \"Toast\"]\n```\n\n### Structural methods\n\n```swift\nstruct Dog {\n  func bark() {\n    print(\"Woof\")\n  }\n}\nlet fido = Dog()\nfido.bark() // prints: Woof\n```\n"
            },
            {
                "title": "class",
                "content": "\n### reference type (class) \n\n```swift\nclass Player {\n  var name: String\n\n  init(name: String) {\n    self.name = name\n  }\n}\n\nvar player1 = Player(name: \"Tomoko\")\nvar player2 = player1\nplayer2.name = \"Isabella\"\n\nprint(player1.name) // Isabella\nprint(player2.name) // Isabella\n```\n\n### instance of the class\n\n```swift\nclass Person {\n  var name = \"\"\n  var age = 0\n}\n\nvar sonny = Person()\n// sonny is now an instance of Person\n```\n\n### init() method \n\n```swift\nclass Fruit {\n  var hasSeeds = true\n  var color: String\n\n  init(color: String) {\n    self.color = color\n  }\n}\n```\n\nUsing the Fruit class\n\n```swift\nlet apple = Fruit(color: \"red\")\n```\n\nA class can be initialized using the `init()` method and the corresponding initialization properties. In the `init()`\nmethod, the `self` keyword is used to refer to the actual instance of the class assigning property values\n\n### Class Attributes\n\n```swift\nvar ferris = Student()\n\nferris.name = \"Ferris Bueller\"\nferris.year = 12\nferris.gpa = 3.81\nferris.honors = false\n```\n\n### Inherit \n\nSuppose we have a BankAccount class:\n\n```swift\nclass BankAccount {\n  var balance = 0.0\n  func deposit(amount: Double) {\n    balance += amount\n  }\n  func withdraw(amount: Double) {\n    balance -= amount\n  }\n}\n```\n\n`SavingsAccount` extends `BankAccount` class\n\n```swift\nclass SavingsAccount: BankAccount {\n  var interest = 0.0\n\n  func addInterest() {\n    let interest = balance *0.005\n    self.deposit(amount: interest)\n  }\n}\n```\n\nThe new `SavingsAccount` class (subclass) automatically gets all the characteristics of the `BankAccount` class\n(superclass). Additionally, the `SavingsAccount` class defines an `.interest` property and an `.addInterest()` method.\n\n### Example\n\nuse data type\n\n```swift\nclass Student {\n  var name: String\n  var year: Int\n  var gpa: Double\n  var honors: Bool\n}\n```\n\nUse default property values\n\n```swift\nclass Student {\n  var name = \"\"\n  var gpa = 0.0\n  var honors = false\n}\n```\n\n### This is an example of a struct definition and a class definition\n\n```swift\nstruct Resolution {\n  var width = 0\n  var height = 0\n}\nclass VideoMode {\n  var resolution = Resolution()\n  var interlaced = false\n  var frameRate = 0.0\n  var name: String?\n}\n```\n\nThe `Resolution` structure definition and the `VideoMode` class definition only describe the appearance of `Resolution`\nor `VideoMode`, create an instance of the structure or class:\n\n```swift\nlet resolution = Resolution(width: 1920)\nlet someVideoMode = VideoMode()\n```\n"
            },
            {
                "title": "Enumerate",
                "content": "\n### Define the enumeration\n\n```swift\nenum Day {\n  case monday\n  case tuesday\n  case wednesday\n  case thursday\n  case friday\n  case saturday\n  case sunday\n}\n\nlet casualWorkday: Day = .friday\n```\n\n### Switch statement\n\n```swift\nenum Dessert {\n  case cake(flavor: String)\n  case vanillaIceCream(scoops: Int)\n  case brownie\n}\n\nlet customerOrder: Dessert = .cake(flavor: \"Red Velvet\")\nswitch customerOrder {\n  case let .cake(flavor):\n    print(\"You ordered a \\(flavor) cake\")\n  case .brownie:\n    print(\"You ordered a chocolate cake\")\n}\n// prints: \"You ordered a red velvet cake\"\n```\n\n### CaseIterable\n\n```swift\nenum Season: CaseIterable {\n  case winter\n  case spring\n  case summer\n  case falls\n}\n\nfor season in Season.allCases {\n  print(season)\n}\n```\n\nAdd conformance to the `CaseIterable` protocol to access the `allCases` property, which returns an array of all cases of\nthe enumeration\n\n### Original value\n\n```swift\nenum Beatle: String {\n  case john paul george ringo\n}\n\nprint(\"The Beatles are \\(Beatle.john.rawValue).\")\n// print: The Beatles are john.\n```\n\n### Related values\n\n```swift\nenum Dessert {\n  case cake(flavor: String)\n  case vanillaIceCream(scoops: Int)\n  case brownie\n}\n\nlet order: Dessert = .cake(flavor: \"Red Velvet\")\n```\n\n### instance method \n\n```swift\nenum Traffic {\n  case light\n  case heavy\n\n  mutating func reportAccident() {\n    self = .heavy\n  }\n}\n\nvar currentTraffic: Traffic = .light\n\ncurrentTraffic.reportAccident()\n// currentTraffic is now .heavy\n```\n\nJust like classes and structs, enumerations can have instance methods. If an instance method mutates the value of the\nenum, it needs to be marked `mutating`\n\n### Initialize from primitive value\n\n```swift\nenum Hello: String {\n  case english = \"Hello\"\n  case japanese = \"Hello!\"\n  case emoji = \"\ud83d\udc4b\"\n}\nlet hello1 = Hello(rawValue: \"Hello!\")\nlet hello2 = Hello(rawValue: \"\u041f\u0440\u0438\u0432\u0435\u0442\")\nprint(hello1) // Optional(Hello.japanese)\nprint(hello2) // nil\n```\n\n### Computed properties\n\n```swift\nenum ShirtSize: String {\n  case small = \"S\"\n  case medium = \"M\"\n  case large = \"L\"\n  case extraLarge = \"XL\"\n  var description: String {\n    return \"The size of this shirt is \\(self.rawValue)\"\n  }\n}\n```\n"
            },
            {
                "title": "Extensions",
                "content": "\n### What are extensions?\n\nExtensions is a way to add new add new functionality to existing classes, structures, enumerations, or protocol types. This includes adding new methods, properties, initializers, and more.\n\n### Why use extensions?\n\nExtensions are particularly useful for organizing and modularizing our code without needing to modify the original type, especially when we don't have access to the original source code.\n\n### Extension syntax\n\n```swift\nextension SomeType {\n    // New functionalities to be added\n}\n```\n\n### Computed properties\n\n```swift\nextension Int {\n    var isEven: Bool {\n        self % 2 == 0\n    }\n}\n\nprint(4.isEven) // Outputs: true\nprint(7.isEven) // Outputs: false\n```\n\n### Methods\n\n```swift\nextension String {\n    func reverse() -> String {\n        String(self.reversed())\n    }\n}\n\nprint(\"abc\".reverse()) // Output: cba\n```\n\n### Mutating methods\n\n```swift\nextension Int {\n    mutating func square() {\n        self = self * self\n    }\n}\n\nvar number = 5\nnumber.square()\nprint(number) // Output: 25\n```\n\n### Initializers\n\n```swift\nextension Date {\n    init?(timestamp: Double) {\n        self.init(timeIntervalSince1970: timestamp)\n    }\n}\n\nlet timestamp = 1693982400.0 // Unix timestamp for 2023-09-06 06:40:00\nif let date = Date(timestamp: timestamp) {\n    print(date) // Output: 2023-09-06 06:40:00 +0000\n}\n```\n\n### Subscripts\n\n```swift\nextension String {\n    subscript(index: Int) -> Character {\n        self[self.index(startIndex, offsetBy: index)]\n    }\n}\n\nprint(\"Swift\"[0]) // Output: S\nprint(\"Swift\"[1]) // Output: w\nprint(\"Swift\"[2]) // Output: i\nprint(\"Swift\"[3]) // Output: f\nprint(\"Swift\"[4]) // Output: t\n```\n\n### Protocol extensions \n\nIt works pretty much like abstract classes when regarding a functionality we want to be available in all the classes that implements some protocol (without having to inherit from a base common class).\n\n```swift\n// Define a protocol\nprotocol Describable {\n    func describe() -> String\n}\n\n// Provide a default implementation using a protocol extension\nextension Describable {\n    func describe() -> String {\n        \"This is a generic description\"\n    }\n}\n\n// Define a struct that conforms Describable protocol\nstruct Person: Describable {\n    var name: String\n    var age: Int\n\n    // Overriding the default implementation\n    func describe() -> String {\n        \"My name is \\(name) and I am \\(age) years old.\"\n    }\n}\n\nstruct Employee: Describable {\n    var name: String\n    var age: Int\n\n    // Using the default implementation\n}\n\n// By just implementing the protocol the describe() method is available\n\nlet person = Person(name: \"Ivan\", age: 21)\nlet employee = Employee(name: \"Saul\", age: 25)\n\nprint(person.describe()) // Output: My name is Ivan and I am 21 years old.\nprint(employee.describe()) // Output: This is a generic description\n```\n\n### Constraints for extensions\n\nThis is especially useful when we want to add functionality to a type that conforms to a specific protocol or has certain conditions.\n\n```swift\nextension Array where Element: Numeric {\n    func sum() -> Element {\n        reduce(0, +)\n    }\n}\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.sum()) // Output: 15\n\nlet doubles = [1.5, 2.5, 3.5]\nprint(doubles.sum()) // Output: 7.5\n\n// This will not work because String is not Numeric\n// let strings = [\"a\", \"b\", \"c\"]\n// print(strings.sum()) // Error: Cannot invoke 'sum' with an array of strings\n```\n\n### Organizing code with extensions\n\nExtensions are not limited to adding functionality; they are also handy for code organization. We can group related methods, properties or views in separate extensions.\n\n```swift\nimport SwiftUI\n\nstruct HomeView: View {\n    var body: some View {\n        ScrollView {\n            header\n            // Add other views\n        }\n    }\n}\n\nextension HomeView {\n    private var header: some View {\n        Text(\"Header ...\")\n    }\n}\n\n#Preview {\n    HomeView()\n}\n```\n"
            },
            {
                "title": "Generics",
                "content": "\n### What are generics?\n\nGenerics in Swift are a feature that allows us to create functions, classes, structures, and protocols that can work with any data type.\n\n### Why use generics?\n\nGenerics enable us to write clear and concise code that works with any data type. By using placeholders (like `T`), this reduces the risk of introducing bugs.\n\n### Type parameters \n\n```swift\nfunc foo<T, U>(a: T, b: U) {\n  // ...\n}\n\nstruct Foo<T, U> {\n  var a: T\n  // ...\n}\n```\n\nThe placeholders `T` is an example of a type parameter, are written inside angle brackets(such as `<T>`).\n\n### Generic Data Structures\n\n```swift\nstruct Box<T> {\n    var value: T\n}\nlet intBox = Box(value: 10)\nlet stringBox = Box(value: \"Hello\")\n\nprint(intBox.value) // Output: 10\nprint(stringBox.value) // Output: \"Hello\"\n```\n\n### Generic Functions \n\n```swift\nfunc swapValues<T>(_ a: inout T, _ b: inout T) {\n    let temp = a\n    a = b\n    b = temp\n}\n\nvar a = 10\nvar b = 20\nswapValues(&a, &b)\nprint(a) // Output: 20\nprint(b) // Output: 10\n\nvar c = \"Hello\"\nvar d = \"World\"\nswapValues(&c, &d)\nprint(c) // Output: \"World\"\nprint(d) // Output: \"Hello\"\n```\n\n### Constraints on Generics\n\n```swift\nfunc sum<T: Numeric>(_ array: [T]) -> T {\n    array.reduce(0, +)\n}\n\nprint(sum([1, 1.5, 2])) // Output: 4.5\n\n// This will not work because String is not Numeric\n// print(sum([\"a\", \"b\", \"c\"]))\n// Error: function 'sum' requires that 'String' conform to 'Numeric'\n```\n\n### Associated Types\n\n```swift\nprotocol Foo {\n    associatedtype T\n    func foo() -> T\n}\n```\n\nAssociated types are used in protocols to define a placeholder for a type that will be specified later. They act as a generic placeholder. The exact type isn't defined in the protocol itself; instead, it's determined when a class, struct, or enum conforms to the protocol.\n\n### Generic Protocols \n\n```swift\nprotocol Storage {\n    associatedtype Item\n    func store(item: Item)\n    func retrieve() -> Item?\n}\n\nclass SimpleStorage<T>: Storage {\n    private var items: [T] = []\n\n    func store(item: T) {\n        items.append(item)\n    }\n\n    func retrieve() -> T? {\n        return items.isEmpty ? nil : items.removeLast()\n    }\n}\n\nlet intStorage = SimpleStorage<Int>()\nintStorage.store(item: 42)\nprint(intStorage.retrieve() ?? \"Empty\")  // Output: 42\n```\n\n### Generic Typealiases\n\nGeneric typealiases allow us to create a new name for an existing type (i.e., they would not introduce a new type).\n\n```swift\ntypealias StringDictionary<T> = [String: T]\ntypealias IntFunction<T> = (Int) -> Int\ntypealias Vector<T> = (T, T, T)\n```\n"
            },
            {
                "title": "Also See",
                "content": "\n- [Swift Documentation (Official)](https://www.swift.org/documentation/) _(swift.or)_\n- [Swift Programming Language (Official)](https://docs.swift.org/swift-book/) _(swift.or)_\n- [One-Stop Quick Reference for Swift Developers](https://swiftly.dev/) _(swiftly.dev)_"
            }
        ]
    },
    {
        "name": "rust",
        "title": "Rust",
        "tags": [],
        "categories": [
            "Programming"
        ],
        "background": "#5733FF",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/rust.svg",
        "intro": "The Rust quick reference cheat sheet that aims at providing help on writing basic syntax and methods.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Hello_World.rs\n\n```rust\nfn main() {\n    println!(\"Hello, World!\");\n}\n```\n\n#### Compiling and Running\n\n```shell\n$ rustc Hello_World.rs\n$ ./Hello_World\nHello, World!\n```\n\n### Primitive types\n\n|                           |                                 |\n| ------------------------- | :------------------------------ |\n| `bool`                    | Boolean (`true` _/_ `false`)    |\n| `char`                    | character                       |\n| `f32`, `f64`              | 32-bits, 64-bits floats         |\n| `i64`, `i32`, `i16`, `i8` | signed 16- ... integers         |\n| `u64`, `u32`, `u16`, `u8` | unsigned 16-bits, ... integers  |\n| `isize`                   | pointer-sized signed integers   |\n| `usize`                   | pointer-sized unsigned integers |\n\n\n\n### Formatting \n\n```rust \n// Single Placeholder\nprintln!(\"{}\", 1);\n\n// Multiple Placeholder\nprintln!(\"{} {}\", 1, 3);\n\n// Positional Arguments\nprintln!(\n    \"{0} is {1} {2}, also {0} is a {3} programming language\",\n    \"Rust\", \"cool\", \"language\", \"safe\"\n);\n\n// Named Arguments\nprintln!(\n    \"{country} is a diverse nation with unity.\",\n    country = \"India\"\n);\n\n// Placeholder traits :b for binary, :0x is for hex and :o is octal\nprintln!(\"Let us print 76 is binary which is {:b} , and hex equivalent is {:0x} and octal equivalent is {:o}\", 76, 76, 76);\n\n// Debug Trait\nprintln!(\n    \"Print whatever we want to here using debug trait {:?}\",\n    (76, 'A', 90)\n);\n\n// New Format Strings in 1.58\nlet x = \"world\";\nprintln!(\"Hello {x}!\");\n```\n\n### Printing Styles\n\n```rust\n// Prints the output\nprint!(\"Hello World\\n\");\n\n// Appends a new line after printing\nprintln!(\"Appending a new line\");\n\n// Prints as an error\neprint!(\"This is an error\\n\");\n\n// Prints as an error with new line\neprintln!(\"This is an error with new line\");\n```\n\n### Variables\n\n```rust\n// Initializing and declaring a variable\nlet some_variable = \"This_is_a_variable\";\n\n// Making a variable mutable\nlet mut mutable_variable = \"Mutable\";\n\n// Assigning multiple variables\nlet (name, age) = (\"ElementalX\", 20);\n\n// (Global) constant\nconst SCREAMING_SNAKE_CASE: i64 = 9;\n```\n\n### Comments\n\n```rust\n// Line Comments\n/*.............Block Comments */\n/// Outer doc comments\n//! Inner doc comments\n```\n\nSee: [Comment](https://doc.rust-lang.org/reference/comments.html)\n\n### Functions\n\n```rust\nfn test() {\n    println!(\"This is a function!\");\n}\n\nfn main() {\n    test();\n}\n```\n\n\n"
            },
            {
                "title": "Rust Types",
                "content": "\n### Integer\n\n```rust\nlet mut a: u32 = 8;\nlet b: u64 = 877;\nlet c: i64 = 8999;\nlet d = -90;\n```\n\n### Floating-Point\n\n```rust\nlet mut sixty_bit_float: f64 = 89.90;\nlet thirty_two_bit_float: f32 = 7.90;\nlet just_a_float = 69.69;\n```\n\n### Boolean\n\n```rust \nlet true_val: bool = true;\nlet false_val: bool = false;\nlet just_a_bool = true;\nlet is_true = 8 < 5; // => false\n```\n\n### Character\n\n```rust\nlet first_letter_of_alphabet = 'a';\nlet explicit_char: char = 'F';\nlet implicit_char = '8';\nlet emoji = \"\\u{1f600}\"; // => \ud83d\ude00\n```\n\n### String Literal\n\n```rust \nlet community_name = \"AXIAL\";\nlet no_of_members: &str = \"ten\";\n\nprintln!(\"The name of the community is {community_name} and it has {no_of_members} members\");\n```\n\n\n\n### Arrays\n\n```rust\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n| 92  | 97  | 98  | 99  | 98  | 94  |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n   0     1     2     3     4     5\n```\n\n---\n\n```rust\nlet array: [i64; 6] = [92, 97, 98, 99, 98, 94];\n```\n\n### Multi-Dimensional Array \n\n```rust\n     j0   j1   j2   j3   j4   j5\n   \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\ni0 | 1  | 2  | 3  | 4  | 5  | 6  |\n   \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524\ni1 | 6  | 5  | 4  | 3  | 2  | 1  |\n   \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n```\n\n---\n\n```rust\nlet array: [[i64; 6]; 2] = [\n    [1, 2, 3, 4, 5, 6],\n    [6, 5, 4, 3, 2, 1]\n];\n```\n\n### Mutable Array\n\n```rust\nlet mut array: [i32; 3] = [2, 6, 10];\n\narray[1] = 4;\narray[2] = 6;\n```\n\nUse the `mut` keyword to make it mutable.\n\n### Slices\n\n```rust\nlet mut array: [i64; 4] = [1, 2, 3, 4];\nlet mut slices: &[i64] = &array[0..3]; // Lower range is inclusive and upper range is exclusive\n\nprintln!(\"The elements of the slices are : {slices:?}\");\n```\n\n### Vectors\n\n```rust\nlet some_vector = vec![1, 2, 3, 4, 5];\n```\n\nA vector is declared using the `vec!` macro.\n\n### Tuples\n\n```rust\nlet tuple = (1, 'A', \"Cool\", 78, true);\n```\n"
            },
            {
                "title": "Rust Strings",
                "content": "\n### String Literal\n\n```rust\nlet cs: &str = \"cheat sheet\";\n\n// => Share cheat sheet for developers\nprintln!(\"Share {cs} for developers\");\n```\n\n### String Object\n\n```rust\n// Creating an empty string object\nlet my_string = String::new();\n\n// Converting to a string object\nlet S_string = a_string.to_string()\n\n// Creating an initialized string object\nlet lang = String::from(\"Rust\");\nprintln!(\"First language is {lang}\");\n```\n\n### .capacity()\n\n```rust\nlet rand = String::from(\"Random String\");\nrand.capacity() // => 13\n```\n\nCalculates the capacity of the string in bytes.\n\n### .contains()\n\n```rust\nlet name = String::from(\"ElementalX\");\nname.contains(\"Element\") // => true\n```\n\nChecks if the substring is contained inside the original string or not.\n\n### Pushing a single character\n\n```rust\nlet mut half_text = String::from(\"Hal\");\nhalf_text.push('f'); // => Half\n```\n\n### Pushing an entire String\n\n```rust\nlet mut hi = String::from(\"Hey there...\");\nhi.push_str(\"How are you doing??\");\n\n// => Hey there...How are you doing??\nprintln!(\"{hi}\");\n```\n"
            },
            {
                "title": "Rust Operators",
                "content": "\n### Comparison Operators\n\n|          |                                  |\n| -------- | :------------------------------- |\n| `e == f` | `e` is equal to `f`              |\n| `e != f` | `e` is NOT equal to `f`          |\n| `e < f`  | `e` is less than `f`             |\n| `e > f`  | `e` is greater `f`               |\n| `e <= f` | `e` is less than or equal to `f` |\n| `e >= f` | `e` is greater or equal to `f`   |\n\n---\n\n```rust\nlet (e, f) = (1, 100);\n\nlet greater = f > e;        // => true\nlet less = f < e;           // => false\nlet greater_equal = f >= e; // => true\nlet less_equal = e <= f;    // => true\nlet equal_to = e == f;      // => false\nlet not_equal_to = e != f;  // => true\n```\n\n### Arithmetic Operators\n\n|          |                                            |\n| -------- | :----------------------------------------- |\n| `a +  b` | `a` is added to `b`                        |\n| `a -  b` | `b` is subtracted from `a`                 |\n| `a /  b` | `a` is divided by `b`                      |\n| `a % b`  | Gets remainder of `a` by dividing with `b` |\n| `a * b`  | `a` is multiplied with `b`                 |\n\n---\n\n```rust \nlet (a, b) = (4, 5);\n\nlet sum: i32 = a + b;            // => 9\nlet subtractions: i32 = a - b;   // => -1\nlet multiplication: i32 = a * b; // => 20\nlet division: i32 = a / b;       // => 0\nlet modulus: i32 = a % b;        // => 4\n```\n\n### Bitwise Operators\n\n| Operator            | Description             |\n| ------------------- | ----------------------- |\n| `g & h`             | Binary AND              |\n| <code>g \\| h</code> | Binary OR               |\n| `g ^ h`             | Binary XOR              |\n| `!g`                | Binary one's complement |\n| `g << h`            | Binary shift left       |\n| `g >> h`            | Binary shift right      |\n\n---\n\n```rust \nlet (g, h) = (0x1, 0x2);\n\nlet bitwise_and = g & h;  // => 0\nlet bitwise_or = g | h;   // => 3\nlet bitwise_xor = g ^ h;  // => 3\nlet right_shift = g >> 2; // => 0\nlet left_shift = h << 4;  // => 32\n```\n\n### Logical Operators\n\n| Example               | Meaning               |\n| --------------------- | --------------------- |\n| `c && d`              | Both are true _(AND)_ |\n| <code>c \\|\\| d</code> | Either is true _(OR)_ |\n| `!c`                  | `c` is false _(NOT)_  |\n\n---\n\n```rust\nlet (c, d) = (true, false);\n\nlet and = c && d;  // => false\nlet or = c || d;   // => true\nlet not = !c;      // => false\n```\n\n### Compound Assignment Operator\n\n```rust\nlet mut k = 9;\nlet mut l = k;\n```\n\n---\n\n| Operator             | Description                             |\n| -------------------- | --------------------------------------- |\n| `k += l`             | Add a value and assign, then k=9        |\n| `k -= l`             | Substrate a value and assign, then k=18 |\n| `k /= l`             | Divide a value and assign, then k=9     |\n| `k *= l`             | Multiply a value and assign, then k=81  |\n| <code>k \\|= l</code> | Bitwise OR and assign, then k=89        |\n"
            },
            {
                "title": "Rust Flow Control",
                "content": "\n### If Expression\n\n```rust\nlet case1: i32 = 81;\nlet case2: i32 = 82;\n\nif case1 < case2 {\n  println!(\"case1 is greater than case2\");\n}\n```\n\n### If...Else Expression\n\n```rust\nlet case3 = 8;\nlet case4 = 9;\n\nif case3 >= case4 {\n    println!(\"case3 is better than case4\");\n} else {\n    println!(\"case4 is greater than case3\");\n}\n```\n\n### If...Else...if...Else Expression\n\n```rust\nlet foo = 12;\nlet bar = 13;\n\nif foo == bar {\n    println!(\"foo is equal to bar\");\n} else if foo < bar {\n    println!(\"foo less than bar\");\n} else if foo != bar {\n    println!(\"foo is not equal to bar\");\n} else {\n    println!(\"Nothing\");\n}\n```\n\n### If...Let Expression \n\n```rust\nlet mut arr1: [i64; 3] = [1, 2, 3];\nif let [1, 2, _] = arr1 {\n    println!(\"Works with array\");\n}\n\nlet mut arr2: [&str; 2] = [\"one\", \"two\"];\nif let [\"Apple\", _] = arr2 {\n    println!(\"Works with str array too\");\n}\n```\n\n---\n\n```rust\nlet tuple_1 = (\"India\", 7, 90, 90.432);\nif let (_, 7, 9, 78.99) = tuple_1 {\n    println!(\"Works with tuples too\");\n}\n\nlet tuple_2 = (9, 7, 89, 12, \"Okay\");\nif let (9, 7, 89, 12, blank) = tuple_2 {\n    println!(\"Everything {blank} mate?\");\n}\n\nlet tuple_3 = (89, 90, \"Yes\");\nif let (9, 89, \"Yes\") = tuple_3 {\n    println!(\"Pattern did match\");\n} else {\n    println!(\"Pattern did not match\");\n}\n```\n\n### Match Expression \n\n```rust\nlet day_of_week = 2;\nmatch day_of_week {\n    1 => {\n        println!(\"Its Monday my dudes\");\n    }\n    2 => {\n        println!(\"It's Tuesday my dudes\");\n    }\n    3 => {\n        println!(\"It's Wednesday my dudes\");\n    }\n    4 => {\n        println!(\"It's Thursday my dudes\");\n    }\n    5 => {\n        println!(\"It's Friday my dudes\");\n    }\n    6 => {\n        println!(\"It's Saturday my dudes\");\n    }\n    7 => {\n        println!(\"It's Sunday my dudes\");\n    }\n    _ => {\n        println!(\"Default!\")\n    }\n};\n```\n\n### Nested...If Expression\n\n```rust\nlet nested_conditions = 89;\nif nested_conditions == 89 {\n    let just_a_value = 98;\n    if just_a_value >= 97 {\n        println!(\"Greater than 97\");\n    }\n}\n```\n\n### For Loop\n\n```rust\nfor mut i in 0..15 {\n    i -= 1;\n    println!(\"The value of i is : {i}\");\n}\n```\n\n### While Loop\n\n```rust\nlet mut check = 0;\nwhile check < 11 {\n    println!(\"Check is : {check}\");\n    check += 1;\n    println!(\"After incrementing: {check}\");\n\n    if check == 10 {\n        break; // stop while\n    }\n}\n```\n\n### Loop keyword\n\n```rust\nloop {\n    println!(\"hello world forever!\");\n}\n```\n\nThe infinite loop indicated.\n\n### Break Statement\n\n```rust\nlet mut i = 1;\nloop {\n    println!(\"i is {i}\");\n    if i > 100 {\n        break;\n    }\n    i *= 2;\n}\n```\n\n### Continue Statement\n\n```rust\nfor (v, c) in (0..10 + 1).enumerate() {\n    println!(\"The {c} number loop\");\n    if v == 9 {\n        println!(\"Here we go continue?\");\n        continue;\n    }\n    println! {\"The value of v is : {v}\"};\n}\n```\n"
            },
            {
                "title": "Rust Functions",
                "content": "\n### Basic function\n\n```rust\nfn print_message() {\n    println!(\"Hello, CheatSheets.zip!\");\n}\n\nfn main() {\n    //Invoking a function in Rust.\n    print_message();\n}\n```\n\n### Pass by Value\n\n```rust\nfn main() {\n    let x: u32 = 10;\n    let y: u32 = 20;\n\n    // => 200\n    println!(\"Calc: {}\", cal_rect(x, y));\n}\n\nfn cal_rect(x: u32, y: u32) -> u32 {\n    x * y\n}\n```\n\n### Pass by Reference\n\n```rust\nfn main() {\n    let mut by_ref = 3; // => 3\n    power_of_three(&mut by_ref);\n    println!(\"{by_ref}\"); // => 9\n}\n\nfn power_of_three(by_ref: &mut i32) {\n    // de-referencing is important\n    *by_ref = *by_ref * *by_ref;\n    println!(\"{by_ref}\"); // => 9\n}\n```\n\n### Returns\n\n```rust \nfn main() {\n    let (mut radius, mut pi) = (3.0, 3.14);\n    let (area, _perimeter) = calculate(\n        &mut radius,\n        &mut pi\n    );\n    println!(\"The area and the perimeter of the circle are: {area} & {_perimeter}\");\n}\n\nfn calculate(radius: &mut f64, pi: &mut f64) -> (f64, f64) {\n    let perimeter = 2.0 * *pi * *radius;\n    let area = *pi * *radius * *radius;\n    return (area, perimeter);\n}\n```\n\n### Arrays as Arguments\n\n```rust\nfn main() {\n    let mut array: [i32; 5] = [1, 2, 3, 4, 6];\n    print_arrays(array);\n    println!(\"The elements: {array:?}\");\n}\n\nfn print_arrays(mut array: [i32; 5]) {\n    array[0] = 89;\n    array[1] = 90;\n    array[2] = 91;\n    array[3] = 92;\n    array[4] = 93;\n    println!(\"The elements: {array:?}\");\n}\n```\n\n### Returning Arrays\n\n```rust\nfn main() {\n    let mut arr: [i32; 5] = [2, 4, 6, 8, 10];\n    multiply(arr);\n    println!(\"The array is : {:?}\", multiply(arr));\n}\n\nfn multiply(mut arr: [i32; 5]) -> [i32; 5] {\n    arr[2] = 90;\n    for mut i in 0..5 {\n        arr[i] = arr[i] * arr[2];\n    }\n    return arr;\n}\n```\n"
            },
            {
                "title": "Misc",
                "content": "\n### Type Casting\n\n```rust\nlet a_int = 90; // int\n// int to float\nlet mut type_cast = (a_int as f64);\n```\n\n---\n\n```rust\nlet original: char = 'I';\n// char to int => 73\nlet type_casted: i64 = original as i64;\n```\n\nTo perform type-casting in Rust one must use the `as` keyword.\n\n### Borrowing\n\n```rust\nlet mut foo = 4;\nlet mut borrowed_foo = &foo;\nprintln!(\"{borrowed_foo}\");\n```\n\n---\n\n```rust\nlet mut bar = 3;\nlet mut mutable_borrowed_bar = &mut bar;\nprintln!(\"{mutable_borrowed_bar}\");\n```\n\nHere borrowed value borrows the value from value one using `&` operator.\n\n### De-referencing\n\n```rust\nlet mut borrow = 10;\nlet deref = &mut borrow;\n\nprintln!(\"{}\", *deref);\n```\n\nDe-referencing in rust can be done using the `*` operator\n\n### Variable Scope\n\n```rust\n{\n    // The scope limited to this braces\n    let a_number = 1;\n}\nprintln!(\"{a_number}\");\n```\n\nThis will produce error as the scope of the variable `a_number` ends at the braces\n"
            },
            {
                "title": "Also see",
                "content": "\n- [The Rust Document](https://doc.rust-lang.org/book/ch00-00-introduction.html) _(doc.rust-lang.org)_\n- [The Rust Reference](https://doc.rust-lang.org/reference/introduction.html) _(doc.rust-lang.org)_\n- [Rust Cheatsheet](https://phaiax.github.io/rust-cheatsheet/) _(phaiax.github.io)_"
            }
        ]
    },
    {
        "name": "kotlin",
        "title": "Kotlin",
        "tags": [
            "Cross-platform",
            "Android"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#7954f6",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/kotlin.svg",
        "intro": "A quick reference cheatsheet for Kotlin that includes usage, examples, and more.\n",
        "sections": [
            {
                "title": "Introduction to Kotlin",
                "content": "\n### main()\n\n```kotlin\nfun main() {\n  println(\"Greetings, CheatSheets.zip!\")\n  // Code goes here\n}\n```\n\nThe main() function is the starting point of every Kotlin program and must be included in the code before execution\n\n### Print statement\n\n```kotlin\nprintln(\"Greetings, earthling!\")\nprint(\"Take me to \")\nprint(\"your leader.\")\n\n/*\nPrint:\nGreetings, earthling!\nTake me to your leader.\n*/\n```\n\n### Notes\n\n```kotlin\n// this is a single line comment\n\n/*\nthis\nnote\nfor\nmany\n*/\n```\n\n### Execution order\n\n```kotlin\nfun main() {\n  println(\"I will be printed first.\")\n  println(\"I will be printed second.\")\n  println(\"I will be printed third.\")\n}\n```\n"
            },
            {
                "title": "Data Types and Variables",
                "content": "\n### Mutable variables\n\n```kotlin\nvar age = 25\nage = 26\n```\n\n### Immutable variables\n\n```kotlin\nval goldenRatio = 1.618\n```\n\n### Type inference\n\n```kotlin\n// The following variables are assigned a literal value inside double quotes\n// so the inferred type is String\n\nvar color = \"Purple\"\n```\n\n### String concatenation\n\n```kotlin\nvar streetAddress = \"123 Main St.\"\nvar cityState = \"Brooklyn, NY\"\n\nprintln(streetAddress + \" \" + cityState)\n// Print: 123 Main St. Brooklyn, NY\n```\n\n### String Templates\n\n```kotlin\nvar address = \"123 Main St.\"\nprintln(\"The address is $address\")\n// prints: The address is 123 Main St.\n```\n\n### Built-in Properties and Functions\n\n```kotlin\nvar monument = \"the Statue of Liberty\"\n\nprintln(monument. capitalize())\n// print: The Statue of Liberty\nprintln(monument. length)\n// print: 21\n```\n\n### Character escape \n\n```kotlin \nprint(\"\\\"Excellent!\\\" I cried. \\\"Elementary,\\\" said he.\")\n\n// Print: \"Excellent!\" I cried. \"Elementary,\" said he.\n```\n\n- `\\n` insert new line\n- `\\t` inserts a tab\n- `\\r` inserts carriage return\n- `\\'` inserts a single quote\n- `\\\"` inserts a double quote\n- `\\\\` inserts a backslash\n- `\\$` inserts a dollar sign\n\n### Arithmetic Operators\n\n```kotlin\n5 + 7  // 12\n9 -2   // 7\n8 *4   // 32\n25 /5  // 5\n31 % 2 // 1\n```\n\n`+` addition, `-` subtraction, `*` multiplication, `/` division, and `%` modulus\n\n### Order of operations\n\n```kotlin\n5 + 8 *2 /4 -3 // 6\n3 + (4 + 4) /2 // 7\n4 *2 + 1 *7    // 15\n3 + 18 /2 *1   // 12\n6 -3 % 2 + 2   // 7\n```\n\n### Enhanced assignment operator\n\n```kotlin\nvar batteryPercentage = 80\n\n// long syntax\nbatteryPercentage = batteryPercentage + 10\n\n// short syntax with augmented assignment operator\nbatteryPercentage += 10\n```\n\n### Increment and decrement operators\n\n```kotlin\nvar year = 2019\nyear++   // 2020\nyear--   // 2019\n```\n\n### Math library\n\n```kotlin\nMath.pow(2.0, 3.0) // 8.0\nMath.min(6, 9)     // 6\nMath.max(10, 12)   // 12\nMath. round(13.7)  // 14\n```\n"
            },
            {
                "title": "Conditional Expression",
                "content": "\n### If expression\n\n```kotlin\nvar morning = true\n\nif (morning) {\n  println(\"Rise and shine!\")\n}\n// Print: Rise and shine!\n```\n\n### Else-expression\n\n```kotlin\nvar rained = false\n\nif (rained) {\n  println(\"No need to water the plants today.\")\n} else {\n  println(\"The plant needs to be watered!\")\n}\n// print: The plant needs watering!\n```\n\n### Else-If expressions\n\n```kotlin\nvar age = 65\n\nif (age < 18 ) {\n  println(\"You are considered a minor\")\n} else if (age < 60) {\n  println(\"You are considered an adult\")\n} else {\n  println(\"You are considered senior\")\n}\n\n// print: you are considered senior\n```\n\n### Comparison Operators\n\n```kotlin\nvar myAge = 19\nvar sisterAge = 11\nvar cousinAge = 11\n\nmyAge > sisterAge  // true\nmyAge < cousinAge  // false\nmyAge >= cousinAge // true\nmyAge <= sisterAge // false\n```\n\n### Logical Operators\n\n```kotlin\nvar humid = true\nvar raining = true\nvar jacket = false\n\nprintln(!humid)\n// print: false\nprintln(jacket && raining)\n// print: true\nprintln(humid || raining)\n// print: true\n```\n\n### AND operator: &&\n\n```kotlin\nvar humid = true\nvar raining = true\nvar shorts = false\nvar sunny = false\n\n// true AND true\nprintln(humid && raining) // true\n// true AND false\nprintln(humid && shorts)  // false\n// false AND true\nprintln(sunny && raining) // false\n// false AND false\nprintln(shorts && sunny)  // false\n```\n\n### Or operator:||\n\n```kotlin\nvar late = true\nvar skipBreakfast = true\nvar underslept = false\nvar checkEmails = false\n\n// true OR true\nprintln(skipBreakfast || late) // true\n// true OR false\nprintln(late || checkEmails)   // true\n// false OR true\nprintln(underslept || late)    // true\n// false OR false\nprintln(checkEmails || underslept) // false\n```\n\n### NOT operator\n\n```kotlin\nvar hungry = true\nvar full = false\n\nprintln(!hungry) // false\nprintln(!full)   // true\n```\n\n### Evaluation order\n\n```kotlin\n!true && (false || true) // false\n/*\n(false || true) is evaluated first to return true.\nThen, evaluate !true && true and return the final result false\n*/\n\n!false && true || false // true\n/*\n!false is evaluated first to return true.\nThen true && true is evaluated, returning true.\nthen, true || evaluates to false and eventually returns true\n*/\n```\n\n### Nested conditions\n\n```kotlin\nvar studied = true\nvar wellRested = true\n\nif (wellRested) {\n  println(\"Good luck today!\")\n  if (studied) {\n    println(\"You should prepare for the exam!\")\n  } else {\n    println(\"Spend a few hours studying before the exam!\")\n  }\n}\n\n// Print: Good luck today!\n// print: You should be ready for the exam!\n```\n\n### When expression\n\n```kotlin\nvar grade = \"A\"\n\nwhen (grade) {\n  \"A\" -> println(\"Great job!\")\n  \"B\" -> println(\"Great job!\")\n  \"C\" -> println(\"You passed!\")\n  else -> println(\"Close! Be sure to prepare more next time!\")\n}\n// print: Great job!\n```\n\n### Range operator\n\n```kotlin \nvar height = 46 // inches\n\nif (height in 1..53) {\n  println(\"Sorry, you must be at least 54 inches to ride the coaster\")\n}\n// Prints: Sorry, you must be at least 54 inches to ride the roller coaster\n```\n\n### Equality Operators\n\n```kotlin\nvar myAge = 22\nvar sisterAge = 21\n\nmyAge == sisterAge // false\nmyAge != sisterAge // true\n```\n"
            },
            {
                "title": "Null-Safety",
                "content": "\n### Nullable vs Not-Nullable\n\n```kotlin\nvar a: String = \"Kotlin\" // a can never be null\na = null // compilation error\nvar b: String? = \"Kotlin\" // b can be null\nb = null // ok\n```\n\n### Safe-Calls\n\n```kotlin\nval a = \"Kotlin\"\nval b: String? = null\nprintln(a.length) // can be called safely, because a is never null\nprintln(b?.length) // b?.length returns the length of b, or null if b is null\nprintln(a?.length) // Unnecessary safe call\n```\n\n### Chaining Safe-Calls\n\n```kotlin\nbob?.department?.head?.name // chain returns null if any property is null\n```\n\n### Elvis Operator\n\n```kotlin\nval l = b?.length ?: -1 // if b is null, return the default value -1\n// equval to:\nval l: Int = if (b != null) b.length else -1\n```\n\n### Not Null Assertion Operator\n\n```kotlin\nval l = b!!.length // throws a NullPointerException, if b is null\n```\n"
            },
            {
                "title": "Collections",
                "content": "\n### Immutable list\n\n```kotlin \nvar programmingLanguages = listOf(\"C#\", \"Java\", \"Kotlin\", \"Ruby\")\n```\n\n### Mutable List\n\n```kotlin \nvar fruits = mutableListOf(\"Orange\", \"Apple\", \"Banana\", \"Mango\")\n```\n\n### Access List\n\n```kotlin \nvar cars = listOf(\"BMW\", \"Ferrari\", \"Volvo\", \"Tesla\")\n\nprintln(cars[2]) // Prints: Volvo\n```\n\n### Size Attribute\n\n```kotlin \nvar worldContinents = listOf(\"Asia\", \"Africa\", \"North America\", \"South America\", \"Antarctica\", \"Europe\", \"Australia\")\n\nprintln(worldContinents.size) // Prints: 7\n```\n\n### List Manipulation \n\n```kotlin \nvar seas = listOf(\"Black Sea\", \"Caribbean Sea\", \"North Sea\")\nprintln(seas. contains(\"North Sea\")) // Prints: true\n\n// The contains() function performs a read operation on any list and determines if the element exists\nseas.add(\"Baltic Sea\") // Error: cannot write to immutable list\n// The add() function can only be called on mutable lists, so the code above throws an error\n```\n\n### Immutable Sets\n\n```kotlin \nvar primaryColors = setOf(\"Red\", \"Blue\", \"Yellow\")\n```\n\n### Mutable Sets\n\n```kotlin \nvar womenInTech = mutableSetOf(\"Ada Lovelace\", \"Grace Hopper\", \"Radia Perlman\", \"Sister Mary Kenneth Keller\")\n```\n\n### Access Collection Elements \n\n```kotlin \nvar companies = setOf(\"Facebook\", \"Apple\", \"Netflix\", \"Google\")\n\nprintln(companies.elementAt(3))\n// Prints: Google\nprintln(companies.elementAt(4))\n// Returns and Error\nprintln(companies.elementAtOrNull(4))\n// Prints: null\n```\n\n### Immutable Map\n\n```kotlin \nvar averageTemp = mapOf(\"winter\" to 35,  \"spring\" to 60,  \"summer\" to 85, \"fall\" to 55)\n```\n\n### Mutable Mapping\n\n```kotlin \nvar europeanDomains = mutableMapOf(\"Germany\" to \"de\", \"Slovakia\" to \"sk\", \"Hungary\" to \"hu\", \"Norway\" to \"no\")\n```\n\n### Retrieve map keys and values\n\n```kotlin \nvar oscarWinners = mutableMapOf(\"Parasite\" to \"Bong Joon-ho\", \"Green Book\" to \"Jim Burke\", \"The Shape Of Water\" to \"Guillermo del Toro\")\n\nprintln(oscarWinners.keys)\n// Prints: [Parasite, Green Book, The Shape Of Water]\n\nprintln(oscarWinners.values)\n// Prints: [Bong Joon-ho, Jim Burke, Guillermo del Toro]\nprintln(oscarWinners[\"Parasite\"])\n// Prints: Bong Joon-ho\n```\n\n### Add and remove map entries\n\n```kotlin \nvar worldCapitals = mutableMapOf(\"United States\" to \"Washington D.C.\", \"Germany\" to \"Berlin\", \"Mexico\" to \"Mexico City\", \"France\" to \"Paris\")\n\nworldCapitals.put(\"Brazil\", \"Brasilia\")\nprintln(worldCapitals)\n// Prints: {United States=Washington D.C., Germany=Berlin, Mexico=Mexico City, France=Paris, Brazil=Brasilia}\n\nworldCapitals.remove(\"Germany\")\nprintln(worldCapitals)\n// Prints: {United States=Washington D.C., Mexico=Mexico City, France=Paris, Brazil=Brasilia}\n```\n"
            },
            {
                "title": "Function",
                "content": "\n### Function\n\n```kotlin\nfun greet() {\n  println(\"Hey there!\")\n}\n\nfun main() {\n  //Function call\n  greet() //Prints: Hey there!\n}\n```\n\n### Function Parameters\n\n```kotlin \nfun birthday(name: String, age: Int) {\n   println(\"Happy birthday $name! You turn $age today!\")\n}\n\nfun main() {\n  birthday(\"Oscar\", 26)\n  //Prints: Happy birthday Oscar! You turn 25 today!\n  birthday(\"Amarah\", 30)\n  //Prints: Happy birthday Amarah! You turn 30 today!\n}\n```\n\n### Default Parameters\n\n```kotlin \nfun favoriteLanguage(name, language = \"Kotlin\") {\n  println(\"Hello, $name. Your favorite programming language is $language\")\n}\n\nfun main() {\n  favoriteLanguage(\"Manon\")\n  //Prints: Hello, Manon. Your favorite programming language is Kotlin\n\n  favoriteLanguage(\"Lee\", \"Java\")\n  //Prints: Hello, Lee. Your favorite programming language is Java\n}\n```\n\n### Named Parameters\n\n```kotlin \nfun findMyAge(currentYear: Int, birthYear: Int) {\n   var myAge = currentYear -birthYear\nprintln(\"I am $myAge years old.\")\n}\n\nfun main() {\n  findMyAge(currentYear = 2020, birthYear = 1995)\n  //Prints: I am 25 years old.\n  findMyAge(birthYear = 1920, currentYear = 2020)\n  //Prints: I am 100 years old.\n}\n```\n\n### Return Statement\n\n```kotlin \n//Return type is declared outside the parentheses\nfun getArea(length: Int, width: Int): Int {\n  var area = length *width\n\n  //return statement\n  return area\n}\n\nfun main() {\n  var myArea = getArea(10, 8)\nprintln(\"The area is $myArea.\")\n//Prints: The area is 80.\n}\n```\n\n### Single expression function\n\n```kotlin\nfun fullName(firstName: String, lastName: String) = \"$firstName $lastName\"\n\nfun main() {\n  println(fullName(\"Ariana\", \"Ortega\"))\n  //Prints: Ariana Ortega\n  println(fullName(\"Kai\", \"Gittens\"))\n  //Prints: Kai Gittens\n}\n```\n\n### Function Literals\n\n```kotlin\nfun main() {\n  //Anonymous Function:\n  var getProduct = fun(num1: Int, num2: Int): Int {\nreturn num1 *num2\n  }\n  println(getProduct(8, 3))\n  //Prints: 24\n//Lambda Expression\n  var getDifference = { num1: Int, num2: Int -> num1 -num2 }\n  println(getDifference(10, 3))\n  //Prints: 7\n}\n```\n"
            },
            {
                "title": "Class",
                "content": "\n### Class Example\n\n```kotlin\n//class with properties containing default values\nclass Student {\n  var name = \"Lucia\"\n  var semester = \"Fall\"\n  var gpa = 3.95\n}\n\n//shorthand syntax without class body\nclass Student\n```\n\n### Class Instance\n\n```kotlin\n// Class\nclass Student {\n  var name = \"Lucia\"\n  var semester = \"Fall\"\nvar gpa = 3.95\n}\n\nfun main() {\n  var student = Student()\n  // Instance\n  println(student.name)\n  // Prints: Lucia\n  println(student.semester)\n  // Prints: Fall\n  println(student.gpa)\n  // Prints: 3.95\n}\n```\n\n### Primary Constructor\n\n```kotlin \nclass Student(val name: String, val gpa: Double, val semester: String, val estimatedGraduationYear: Int)\n\nfun main() {\n  var student = Student(\"Lucia\", 3.95, \"Fall\", 2022)\n  println(student.name)\n  //Prints: Lucia\n  println(student.gpa)\n  //Prints: 3.95\n  println(student.semester)\n  //Prints: Fall\n  println(student.estimatedGraduationYear)\n  //Prints: 2022\n}\n```\n\n### Initialization Block\n\n```kotlin \nclass Student(val name: String, val gpa: Double, val semester: String, val estimatedGraduationYear: Int) {\n  init {\n    println(\"$name has ${estimatedGraduationYear -2020} years left in college.\")\n  }\n}\n\nfun main() {\n  var student = Student(\"Lucia\", 3.95, \"Fall\", 2022)\n//Prints: Lucia has 2 years left in college.\n}\n```\n\n### Member Function \n\n```kotlin \nclass Student(val name: String, val gpa: Double, val semester: String, val estimatedGraduationYear: Int) {\n\n  init {\nprintln(\"$name has ${estimatedGraduationYear -2020} years left in college.\")\n  }\n\n  //member function\n  fun calculateLetterGrade(): String {\n    return when {\n      gpa >= 3.0 -> \"A\"\n      gpa >= 2.7 -> \"B\"\n      gpa >= 1.7 -> \"C\"\ngpa >= 1.0 -> \"D\"\n      else -> \"E\"\n    }\n  }\n}\n\n//When the instance is created and the function is called, the when expression will be executed and return the letter grade\nfun main() {\n  var student = Student(\"Lucia\", 3.95, \"Fall\", 2022)\n//Prints: Lucia has 2 years left in college.\n  println(\"${student.name}'s letter grade is ${student.calculateLetterGrade()}.\")\n  //Prints: Lucia's letter grade is A.\n}\n```\n"
            },
            {
                "title": "See Also",
                "content": "\n- [Kotlin Language Official Documentation](https://kotlinlang.org/) _(kotlinlang.org)_"
            }
        ]
    },
    {
        "name": "dart",
        "title": "Dart",
        "tags": [
            "dart",
            "flutter"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#58aee9",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/dart.svg",
        "intro": "A Dart cheat sheet with the most important concepts, functions, methods, and more. A complete quick reference for beginners.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### hello.dart\n\n```dart\n// top-level function where app execution starts\nvoid main(){\n    print(\"Hello World!\"); // Print to console\n}\n```\n\nEvery app has a main() function\n\n### Variables\n\n```dart\nint x = 2; // explicitly typed\nvar p = 5; // type inferred - Generic var with type inference\n\ndynamic z = 8; // variable can take on any type\nz = \"cool\"; // cool\n\n// if you never intend to change a variable use final or const. Something like this:\n\nfinal email = \"temid@gmail.com\"; // Same as var but cannot be reassigned\nfinal String email = \"temid@gmail.com\"; // you can't change the value\n\nconst qty = 5; // Compile-time constant\n```\n\n### Datatypes\n\n```dart\n\nint age = 20; // integers, range -2^63 to 2^63 - 1\ndouble height = 1.85; // floating-point numbers\n\n// You can also declare a variable as a num\nnum x = 1;  // x can have both int and double values\nx += 2.5;\nprint(x); //Print: 3.5\n\nString name = \"Nicola\";\n\nbool isFavourite = true;\nbool isLoaded = false;\n```\n\n### String interpolation\n\n```dart\n// can use single or double qoutes for String type\nvar firstName = 'Nicola';\nvar lastName = \"Tesla\";\n\n//can embed variables in string with $\nString fullName = \"$firstName $lastName\";\n\n// concatenate with +\nvar name = \"Albert \" + \"Einstein\";\n\nString upperCase = '${firstName.toUpperCase()}';\nprint(upperCase); //Print: NICOLA\n```\n\n### Comments\n\n```dart\n// This is a normal, one-line comment.\n\n/// This is a documentation comment, used to document libraries,\n/// classes, and their members. Tools like IDEs and dartdoc treat\n/// doc comments specially.\n\n/* Comments like these are also supported. */\n```\n### multiline String\n\n```dart\nFor multiline String we have to use ''' your text'''\nfor example\nprint('''My long string''');\n//this will show long string\n//this will help for only long strings\n```\n\n\n### Imports\n\n```dart\n// Importing core libraries\nimport 'dart:math';\n\n// Importing libraries from external packages\nimport 'package:test/test.dart';\n\n// Importing files\nimport 'path/to/my_other_file.dart';\n```\n"
            },
            {
                "title": "Operators",
                "content": "\n### Arithmatic Operators\n\n```dart\nprint(2 + 3); //Print: 5\nprint(2 - 3); //Print: -1\nprint(2 * 3); //Print: 6\nprint(5 / 2);  //Print: 2.5 - Result is a double\nprint(5 ~/ 2); //Print: 2 - Result is an int\nprint(5 % 2); //Print: 1 - Remainder\n\nint a = 1, b;\n// Increment\nb = ++a; // preIncrement - Increment a before b gets its value.\nb = a++; // postIncrement - Increment a AFTER b gets its value.\n\n//Decrement\nb = --a; // predecrement - Decrement a before b gets its value.\nb = a--; // postdecrement - Decrement a AFTER b gets its value.\n```\n\n### Equality and relational operators\n\n```dart\nprint(2 == 2);  //Print: true - Equal\nprint(2 != 3); //Print: true - Not  Equal\nprint(3 > 2); //Print: true - Grater than\nprint(2 < 3); //Print: true - Less than\nprint(3 >= 3); //Print: true - Greater than or equal to\nprint(2 <= 3); //Print: true - Less than or equal to\n```\n\n### Logical operators\n\n```dart\n// !expr inverts the expression (changes false to true, and vice versa)\n// ||\tlogical OR\n// &&\tlogical AND\nbool isOutOfStock = false;\nint quantity = 3;\nif (!isOutOfStock && (quantity == 2 || quantity == 3)) {\n  // ...Order the product...\n}\n```\n"
            },
            {
                "title": "Control Flows : Conditionals",
                "content": "\n### if and else if\n\n```dart\nif(age < 18){\n    print(\"Teen\");\n} else if( age > 18 && age <60){\n    print(\"Adult\");\n} else {\n    print(\"Old\");\n}\n```\n\n### switch case\n\n```dart\nenum Pet {dog, cat}\nPet myPet = Pet.dog;\nswitch(myPet){\n    case Pet.dog:\n        print('My Pet is Dog.');\n        break;\n    case Pet.cat:\n        print('My Pet is Cat.');\n        break;\n    default:\n        print('I don\\'t have a Pet');\n}\n// Prints: My Pet is Dog.\n```\n"
            },
            {
                "title": "Control Flows : Loops",
                "content": "\n### while loop\n\n```dart\nwhile (!dreamsAchieved) {\n  workHard();\n}\n```\n\nwhile loop check condition before iteration of the loop\n\n### do-while loop\n\n```dart\ndo {\n  workHard();\n} while (!dreamsAchieved);\n```\n\ndo-while loop verifies the condition after the execution of the statements inside the loop\n\n### for loop\n\n```dart\nfor(int i=0; i< 10; i++){\n    print(i);\n}\n\nvar numbers = [1,2,3];\n// for-in loop for lists\nfor(var number in numbers){\n    print(number);\n}\n```\n\n\n### for in loop\n\n```dart\n  // Define a list of numbers\n  var numbers = [1, 2, 3, 4, 5];\n\n  // Use a for-in loop to iterate over the list\n  for (var number in numbers) {\n    print(number);\n  }\n\n  // Define a list of strings\n  var fruits = ['Apple', 'Banana', 'Cherry'];\n\n  // Use a for-in loop to iterate over the list\n  for (var fruit in fruits) {\n    print(fruit);\n  }\n```\n\n"
            },
            {
                "title": "Collections",
                "content": "\n### Lists\n\n```dart\n// ordered group of objects\nvar list = [1, 2, 3];\n\nprint(list.length); //Print: 3\nprint(list[1]); //Print: 2\n\n// other ways of list declaration and initializations\n\nList<String> cities = <String>[\"New York\", \"Mumbai\", \"Tokyo\"];\n\n// To create a list that\u2019s a compile-time constant\nconst constantCities = const [\"New York\", \"Mumbai\", \"Tokyo\"];\n```\n\n### Sets\n\n```dart\n// A set in Dart is an unordered collection of unique items.\nvar halogens = {'fluorine', 'chlorine', 'bromine', 'iodine', 'astatine'};\n\n// to create an empty set\nvar names = <String>{};\nSet<String> names = {}; // This works, too.\n//var names = {}; // Creates a map, not a set.\n```\n\n### Maps\n\n```dart\n// a map is an object that associates keys and values\nvar person = Map<String, String>();\n// To initialize the map, do this:\n \nperson['lastName'] = 'Tesla';\n\nprint(person); //Print: {firstName: Nicola, lastName: Tesla}\nprint(person['lastName']); //Print: Tesla\n\n\nvar nobleGases = {\n  // Key: Value\n  2: 'helium',\n  10: 'neon',\n  18: 'argon',\n};\n```\n"
            },
            {
                "title": "Functions",
                "content": "\n### Functions\n\n```dart\n// functions in dart are objects and have a type\nint add(int a, int b){\n    return a+b;\n}\n\n// functions can be assigned to variables\nint sum = add(2,3); // returns: 5\n\n// can be passed as arguments to other functions\nint totalSum = add(2, add(2,3)); // returns : 7\n```\n\n### Arrow Syntax (=>)\n\n```dart\n// functions that contain just one expression, you can use a shorthand syntax\nbool isFav(Product product) => favProductsList.contains(product);\n```\n\n### Anonymous (lambda) functions\n\n```dart\n// small one line functions that dont have name\nint add(a,b) => a+b;\n\n// lambda functions mostly passed as parameter to other functions\nconst list = ['apples', 'bananas', 'oranges'];\nlist.forEach(\n(item) => print('${list.indexOf(item)}: $item'));\n//Prints: 0: apples 1: bananas 2: oranges\n```\n"
            },
            {
                "title": "Classes and Objects",
                "content": "\n### Class\n\n```dart\nclass Cat {\n    String name;\n\n    // method\n    void voice(){\n        print(\"Meow\");\n    }\n}\n```\n\n### Object\n\n```dart\n// instance of a class\n// below myCat is Object of class Cat\n\nvoid main(){\n    Cat myCat = Cat();\n    myCat.name = \"Kitty\";\n    myCat.voice(); // Prints: Meow\n}\n```\n\n### Constructors\n\n```dart\nclass Cat {\n    String name;\n    Cat(this.name);\n}\nvoid main(){\n    Cat myCat = Cat(\"Kitty\");\n    print(myCat.name); // Prints: Kitty\n}\n```\n\n### Abstract Classes\n\n```dart\n// abstract class\u2014a class that can\u2019t be instantiated\n// This class is declared abstract and thus can't be instantiated.\nabstract class AbstractContainer {\n  // Define constructors, fields, methods...\n\n  void updateChildren(); // Abstract method.\n}\n```\n\n### Getters Setters\n\n```dart\n// provide read and write access to an object\u2019s properties\nclass Cat {\n    String name;\n\n    // getter\n    String get catName {\n        return name;\n    }\n\n    // setter\n    void set catName(String name){\n        this.name = name;\n    }\n}\n```\n"
            },
            {
                "title": "Implicit interfaces",
                "content": "\n### A basic interface\n\n```dart\n// A person. The implicit interface contains greet().\nclass Person {\n  // In the interface, but visible only in this library.\n  final String _name;\n\n  // Not in the interface, since this is a constructor.\n  Person(this._name);\n\n  // In the interface.\n  String greet(String who) => 'Hello, $who. I am $_name.';\n}\n\n// An implementation of the Person interface.\nclass Impostor implements Person {\n  String get _name => '';\n\n  String greet(String who) => 'Hi $who. Do you know who I am?';\n}\n\nString greetBob(Person person) => person.greet('Bob');\n\nvoid main() {\n  print(greetBob(Person('Kathy'))); // Hello, Bob. I am Kathy.\n  print(greetBob(Impostor())); // Hi Bob. Do you know who I am?\n}\n```\n\n### Extending a class\n\n```dart\nclass Phone {\n\n    void use(){\n        _call();\n        _sendMessage();\n    }\n}\n// Use extends to create a subclass\nclass SmartPhone extends Phone {\n    void use(){\n        // use super to refer to the superclass\n        super.use();\n        _takePhotos();\n        _playGames();\n    }\n}\n```\n"
            },
            {
                "title": "Exceptions",
                "content": "\n### Throw\n\n```dart\n// throws or raises and exception\nthrow IntegerDivisionByZeroException();\n\n// You can also throw arbitrary objects\nthrow \"Product out of stock!\";\n```\n\n### Catch\n\n```dart\n\ntry {\n    int c = 3/0;\n    print(c);\n} on IntegerDivisionByZeroException {\n    // A specific exception\n    print('Can not divide integer by 0.')\n} on Exception catch (e) {\n    // Anything else that is an exception\n    print('Unknown exception: $e');\n} catch (e) {\n    // No specified type, handles all\n    print('Something really unknown: $e');\n}\n\n```\n\n### Finally\n\n```dart\n// To ensure that some code runs whether or not an exception is thrown\ntry {\n  cookFood();\n} catch (e) {\n  print('Error: $e'); // Handle the exception first.\n} finally {\n  cleanKitchen(); // Then clean up.\n}\n```\n"
            },
            {
                "title": "Futures",
                "content": "\n### Async Await\n\n```dart\n// functions which are asynchronous: they return after setting up a possibly time-consuming operation\n// The async and await keywords support asynchronous programming\n\nFuture<String> login() {\n String userName=\"Temidjoy\";\n return\n  Future.delayed(\n    Duration(seconds: 4), () => userName);\n}\n\n// Asynchronous\nmain() async {\n print('Authenticating please wait...');\n print(await login());\n}\n```\n"
            },
            {
                "title": "Extensions",
                "content": "\n### Why use extensions? \n\n```dart\n// Extensions allow you to add methods to existing\n// classes without modifying them.\n\n// Instead of defining a util class.\nclass StringUtil {\n  static bool isValidEmail(String str) {\n    final emailRegExp = RegExp(r\"^[a-zA-Z0-9.]+@[a-zA-Z0-9]+\\.[a-zA-Z]+\");\n    return emailRegExp.hasMatch(str);\n  }\n}\n\nprint(StringUtil.isValidEmail('someString')); //Print: false\n\n// We can define an extension which will be applied\n// on a certain type.\n\nextension StringExtensions on String {\n  bool get isValidEmail {\n    final emailRegExp = RegExp(r\"^[a-zA-Z0-9.]+@[a-zA-Z0-9]+\\.[a-zA-Z]+\");\n    return emailRegExp.hasMatch(this);\n  }\n}\n\nprint('test@example.com'.isValidEmail); //Print: true\nprint('SomeString'.isValidEmail); //Print: false\n\n```\n\n### Generic Extensions\n\n```dart\n// allows you to apply the same logic to a range of types.\nextension NumGenericExtensions<T extends num> on T {\n  T addTwo() => this + 2 as T;\n}\n\nprint(7.addTwo()); // Print: 9\n```\n\n### Dart Extensions in Flutter\n\n```dart\nextension ContextExtension on BuildContext {\n  double get screenHeight => MediaQuery.of(this).size.height;\n  double get screenWidth => MediaQuery.of(this).size.width;\n}\n\n// usage\n@override\nWidget build(BuildContext context) => MaterialApp(\n    home: Scaffold(\n      body: Container(\n        width: context.screenWidth * 0.5,\n        height: context.screenHeight * 0.3,\n        color: Colors.blue,\n        child: Text('Hello World!'),\n      ),\n    ),\n  );\n```\n"
            },
            {
                "title": "Miscellaneous",
                "content": "\n### Null and Null aware\n\n```dart\nint x; // The initial value of any object is null\n\n// ?? null aware operator\n\nx ??=6; // ??= assignment operator, which assigns a value of a variable only if that variable is currently null\nprint(x); //Print: 6\n\nx ??=3;\nprint(x); // Print: 6 - result is still 6\n\nprint(null ?? 10); // Prints: 10. Display the value on the left if it's not null else return the value on the right\n```\n\n### Ternary Operator\n\n```dart\n// condition ? exprIfTrue : exprIfFalse\nbool isAvailable;\n\nisAvailable ? orderproduct() : addToFavourite();\n```\n\n### Spread Operator (...)\n\n```dart\n// to insert multiple values into a collection.\nvar list = [1, 2, 3];\nvar list2 = [0, ...list];\n\nprint(list2.length); //Print: 4\n```\n\n### Cascade notation (..)\n\n```dart\n// allows you to make a sequence of operations on the same object\n\n// rather than doing this\nvar user = User();\nuser.name = \"Nicola\";\nuser.email = \"nicola@g.c\";\nuser.age = 24;\n\n// you can do this\nvar user = User()\n  ..name = \"Nicola\"\n  ..email = \"nicola@g.c\"\n  ..age = 24;\n```\n\n### Conditional Property Access\n\n```dart\nuserObject?.userName\n\n//The code snippet above is equivalent to following:\n(userObject != null) ? userObject.userName : null\n\n//You can chain multiple uses of ?. together in a single expression\nuserObject?.userName?.toString()\n\n// The preceeding code returns null and never calls toString() if either userObject or userObject.userName is null\n```\n### enum in dart\n```dart\ndefination: An enum (short for \"enumeration\") is a special data type that enables a variable to be a set of predefined constants. Enums are used to define variables that can only take one out of a small set of possible values. They help make code more readable and less error-prone by providing meaningful names to these sets of values.\n\n// Define the enum\nenum TrafficLight {\n  red,\n  yellow,\n  green\n}\n\n// A function that prints a message based on the traffic light state\nvoid printTrafficLightMessage(TrafficLight light) {\n  switch (light) {\n    case TrafficLight.red:\n      print('Stop!');\n      break;\n    case TrafficLight.yellow:\n      print('Get ready...');\n      break;\n    case TrafficLight.green:\n      print('Go!');\n      break;\n  }\n}\n\nvoid main() {\n  // Example usage of the enum\n  TrafficLight currentLight = TrafficLight.green;\n\n  // Print the message for the current traffic light state\n  printTrafficLightMessage(currentLight);\n}\n\n\n```"
            }
        ]
    },
    {
        "name": "go",
        "title": "Go",
        "tags": [
            "Go"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#4ba4cc",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/go.svg",
        "intro": "This cheat sheet provided basic syntax and methods to help you using [Go](https://go.dev/).\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### hello.go\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, world!\")\n}\n```\n\nRun directly\n\n```shell script\n$ go run hello.go\nHello, world!\n```\n\nOr try it out in the [Go repl](https://repl.it/languages/go)\n\n### Variables\n\n```go\nvar s1 string\ns1 = \"Learn Go!\"\n\n// declare multiple variables at once\nvar b, c int = 1, 2\nvar d = true\n```\n\nShort declaration\n\n```go\ns1 := \"Learn Go!\"        // string\nb, c := 1, 2             // int\nd := true                // bool\n```\n\n\n\n### Functions\n\n```go\npackage main\n\nimport \"fmt\"\n\n// The entry point of the programs\nfunc main() {\n    fmt.Println(\"Hello world!\")\n    say(\"Hello Go!\")\n}\n\nfunc say(message string) {\n    fmt.Println(\"You said: \", message)\n}\n```\n\n\n\n### Comments\n\n```go\n// Single line comment\n\n/* Multi-\n line comment */\n```\n\n### If statement\n\n```go\nif true {\n    fmt.Println(\"Yes!\")\n}\n```\n\n\n"
            },
            {
                "title": "Go Basic types",
                "content": "\n### Strings\n\n```go\ns1 := \"Hello\" + \"World\"\n\ns2 := `A \"raw\" string literal\ncan include line breaks.`\n\n// Outputs: 10\nfmt.Println(len(s1))\n\n// Outputs: Hello\nfmt.Println(string(s1[0:5]))\n```\n\nStrings are of type `string`.\n\n### Numbers\n\n```go\nnum := 3         // int\nnum := 3.        // float64\nnum := 3 + 4i    // complex128\nnum := byte('a') // byte (alias: uint8)\n\nvar u uint = 7        // uint (unsigned)\nvar p float32 = 22.7  // 32-bit float\n```\n\n#### Operators\n\n```go\nx := 5\nx++\nfmt.Println(\"x + 4 =\", x + 4)\nfmt.Println(\"x * 4 =\", x * 4)\n```\n\n\n\n### Booleans\n\n```go\nisTrue   := true\nisFalse  := false\n```\n\n#### Operators\n\n```go\nfmt.Println(true && true)   // true\nfmt.Println(true && false)  // false\nfmt.Println(true || true)   // true\nfmt.Println(true || false)  // true\nfmt.Println(!true)          // false\n```\n\n\n\n### Arrays \n\n```go\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n| 2  | 3  | 5  | 7  | 11  | 13  |\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n  0    1    2    3     4     5\n```\n\n---\n\n```go\nprimes := [...]int{2, 3, 5, 7, 11, 13}\nfmt.Println(len(primes)) // => 6\n\n// Outputs: [2 3 5 7 11 13]\nfmt.Println(primes)\n\n// Same as [:3], Outputs: [2 3 5]\nfmt.Println(primes[0:3])\n```\n\n---\n\n```go\nvar a [2]string\na[0] = \"Hello\"\na[1] = \"World\"\n\nfmt.Println(a[0], a[1]) //=> Hello World\nfmt.Println(a)   // => [Hello World]\n```\n\n#### 2d array\n\n```go\nvar twoDimension [2][3]int\nfor i := 0; i < 2; i++ {\n    for j := 0; j < 3; j++ {\n        twoDimension[i][j] = i + j\n    }\n}\n// => 2d:  [[0 1 2] [1 2 3]]\nfmt.Println(\"2d: \", twoDimension)\n```\n\n### Pointers\n\n```go\nfunc main () {\n  b := *getPointer()\n  fmt.Println(\"Value is\", b)\n}\n```\n\n```go\nfunc getPointer () (myPointer *int) {\n  a := 234\n  return &a\n}\n```\n\n```go\na := new(int)\n*a = 234\n```\n\nSee: [Pointers](https://tour.go.dev/moretypes/1)\n\n### Slices\n\n```go\ns := make([]string, 3)\ns[0] = \"a\"\ns[1] = \"b\"\ns = append(s, \"d\")\ns = append(s, \"e\", \"f\")\n\nfmt.Println(s)\nfmt.Println(s[1])\nfmt.Println(len(s))\nfmt.Println(s[1:3])\n\nslice := []int{2, 3, 4}\n```\n\nSee also: [Slices example](https://gobyexample.com/slices)\n\n### Constants\n\n```go\nconst s string = \"constant\"\nconst Phi = 1.618\nconst n = 500000000\nconst d = 3e20 / n\nfmt.Println(d)\n```\n\n### Type conversions\n\n```go\ni := 90\nf := float64(i)\nu := uint(i)\n\n// Will be equal to the character Z\ns := string(i)\n```\n\n#### How to get int string?\n\n```go\ni := 90\n\n// need import \"strconv\"\ns := strconv.Itoa(i)\nfmt.Println(s) // Outputs: 90\n```\n"
            },
            {
                "title": "Go Strings",
                "content": "\n### Strings function\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\ts \"strings\"\n)\n\nfunc main() {\n    /* Need to import strings as s */\n\tfmt.Println(s.Contains(\"test\", \"e\"))\n\n    /* Build in */\n    fmt.Println(len(\"hello\"))  // => 5\n    // Outputs: 101\n\tfmt.Println(\"hello\"[1])\n    // Outputs: e\n\tfmt.Println(string(\"hello\"[1]))\n\n}\n```\n\n### fmt.Printf \n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\ntype point struct {\n\tx, y int\n}\n\nfunc main() {\n\tp := point{1, 2}\n\tfmt.Printf(\"%v\\n\", p)                        // => {1 2}\n\tfmt.Printf(\"%+v\\n\", p)                       // => {x:1 y:2}\n\tfmt.Printf(\"%#v\\n\", p)                       // => main.point{x:1, y:2}\n\tfmt.Printf(\"%T\\n\", p)                        // => main.point\n\tfmt.Printf(\"%t\\n\", true)                     // => TRUE\n\tfmt.Printf(\"%d\\n\", 123)                      // => 123\n\tfmt.Printf(\"%b\\n\", 14)                       // => 1110\n\tfmt.Printf(\"%c\\n\", 33)                       // => !\n\tfmt.Printf(\"%x\\n\", 456)                      // => 1c8\n\tfmt.Printf(\"%f\\n\", 78.9)                     // => 78.9\n\tfmt.Printf(\"%e\\n\", 123400000.0)              // => 1.23E+08\n\tfmt.Printf(\"%E\\n\", 123400000.0)              // => 1.23E+08\n\tfmt.Printf(\"%s\\n\", \"\\\"string\\\"\")             // => \"string\"\n\tfmt.Printf(\"%q\\n\", \"\\\"string\\\"\")             // => \"\\\"string\\\"\"\n\tfmt.Printf(\"%x\\n\", \"hex this\")               // => 6.86578E+15\n\tfmt.Printf(\"%p\\n\", &p)                       // => 0xc00002c040\n\tfmt.Printf(\"|%6d|%6d|\\n\", 12, 345)           // => |    12|   345|\n\tfmt.Printf(\"|%6.2f|%6.2f|\\n\", 1.2, 3.45)     // => |  1.20|  3.45|\n\tfmt.Printf(\"|%-6.2f|%-6.2f|\\n\", 1.2, 3.45)   // => |1.20  |3.45  |\n\tfmt.Printf(\"|%6s|%6s|\\n\", \"foo\", \"b\")        // => |   foo|     b|\n\tfmt.Printf(\"|%-6s|%-6s|\\n\", \"foo\", \"b\")      // => |foo   |b     |\n\n\ts := fmt.Sprintf(\"a %s\", \"string\")\n\tfmt.Println(s)\n\n\tfmt.Fprintf(os.Stderr, \"an %s\\n\", \"error\")\n}\n\n```\n\nSee also: [fmt](https://go.dev/pkg/fmt/)\n\n### Function examples\n\n| Example                       | Result      |\n| ----------------------------- | ----------- |\n| Contains(\"test\", \"es\")        | true        |\n| Count(\"test\", \"t\")            | 2           |\n| HasPrefix(\"test\", \"te\")       | true        |\n| HasSuffix(\"test\", \"st\")       | true        |\n| Index(\"test\", \"e\")            | 1           |\n| Join([]string{\"a\", \"b\"}, \"-\") | a-b         |\n| Repeat(\"a\", 5)                | aaaaa       |\n| Replace(\"foo\", \"o\", \"0\", -1)  | f00         |\n| Replace(\"foo\", \"o\", \"0\", 1)   | f0o         |\n| Split(\"a-b-c-d-e\", \"-\")       | [a b c d e] |\n| ToLower(\"TEST\")               | test        |\n| ToUpper(\"test\")               | TEST        |\n"
            },
            {
                "title": "Go Flow control",
                "content": "\n### Conditional\n\n```go\n\na := 10\n\nif a > 20 {\n    fmt.Println(\">\")\n} else if a < 20 {\n    fmt.Println(\"<\")\n} else {\n    fmt.Println(\"=\")\n}\n```\n\n### Statements in if\n\n```go\nx := \"hello go!\"\n\nif count := len(x); count > 0 {\n    fmt.Println(\"Yes\")\n}\n\n```\n\n---\n\n```go\n\nif _, err := doThing(); err != nil {\n    fmt.Println(\"Uh oh\")\n}\n```\n\n### Switch\n\n```go \nx := 42.0\nswitch x {\ncase 0:\ncase 1, 2:\n    fmt.Println(\"Multiple matches\")\ncase 42:   // Don't \"fall through\".\n    fmt.Println(\"reached\")\ncase 43:\n    fmt.Println(\"Unreached\")\ndefault:\n    fmt.Println(\"Optional\")\n}\n```\n\nSee: [Switch](https://github.com/golang/go/wiki/Switch)\n\n### For loop\n\n```go\nfor i := 0; i <= 10; i++ {\n  fmt.Println(\"i: \", i)\n}\n```\n\n### For-Range loop\n\n```go \nnums := []int{2, 3, 4}\nsum := 0\nfor _, num := range nums {\n    sum += num\n}\nfmt.Println(\"sum:\", sum)\n```\n\n### While loop\n\n```go\ni := 1\nfor i <= 3 {\n    fmt.Println(i)\n    i++\n}\n```\n\n### Continue keyword\n\n```go\nfor i := 0; i <= 5; i++ {\n    if i % 2 == 0 {\n        continue\n    }\n    fmt.Println(i)\n}\n```\n\n### Break keyword\n\n```go\nfor {\n    fmt.Println(\"loop\")\n    break\n}\n```\n"
            },
            {
                "title": "Go Structs & Maps",
                "content": "\n### Defining \n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype Vertex struct {\n\tX int\n\tY int\n}\n\nfunc main() {\n\tv := Vertex{1, 2}\n\tv.X = 4\n\tfmt.Println(v.X, v.Y) // => 4 2\n}\n```\n\nSee: [Structs](https://tour.go.dev/moretypes/2)\n\n### Literals\n\n```go\nv := Vertex{X: 1, Y: 2}\n// Field names can be omitted\nv := Vertex{1, 2}\n// Y is implicit\nv := Vertex{X: 1}\n```\n\nYou can also put field names.\n\n### Maps \n\n```go\nm := make(map[string]int)\nm[\"k1\"] = 7\nm[\"k2\"] = 13\nfmt.Println(m) // => map[k1:7 k2:13]\n\nv1 := m[\"k1\"]\nfmt.Println(v1)     // => 7\nfmt.Println(len(m)) // => 2\n\ndelete(m, \"k2\")\nfmt.Println(m) // => map[k1:7]\n\n_, prs := m[\"k2\"]\nfmt.Println(prs) // => false\n\nn := map[string]int{\"foo\": 1, \"bar\": 2}\nfmt.Println(n) // => map[bar:2 foo:1]\n```\n\n### Pointers to structs\n\n```go\nv := &Vertex{1, 2}\nv.X = 2\n```\n\nDoing `v.X` is the same as doing `(*v).X`, when `v` is a pointer.\n"
            },
            {
                "title": "Go Functions",
                "content": "\n### Multiple arguments\n\n```go\nfunc plus(a int, b int) int {\n    return a + b\n}\nfunc plusPlus(a, b, c int) int {\n    return a + b + c\n}\nfmt.Println(plus(1, 2))\nfmt.Println(plusPlus(1, 2, 3))\n```\n\n### Multiple return\n\n```go\nfunc vals() (int, int) {\n    return 3, 7\n}\n\na, b := vals()\nfmt.Println(a)    // => 3\nfmt.Println(b)    // => 7\n```\n\n### Function literals\n\n```go\nr1, r2 := func() (string, string) {\n    x := []string{\"hello\", \"cheatsheets.zip\"}\n    return x[0], x[1]\n}()\n\n// => hello cheatsheets.zip\nfmt.Println(r1, r2)\n```\n\n### Naked returns\n\n```go\nfunc split(sum int) (x, y int) {\n  x = sum * 4 / 9\n  y = sum - x\n  return\n}\n\nx, y := split(17)\nfmt.Println(x)   // => 7\nfmt.Println(y)   // => 10\n```\n\nNote that using naked returns hurts readability.\n\n### Variadic functions\n\n```go\nfunc sum(nums ...int) {\n    fmt.Print(nums, \" \")\n    total := 0\n    for _, num := range nums {\n        total += num\n    }\n    fmt.Println(total)\n}\nsum(1, 2)     //=> [1 2] 3\nsum(1, 2, 3)  // => [1 2 3] 6\n\nnums := []int{1, 2, 3, 4}\nsum(nums...)  // => [1 2 3 4] 10\n```\n\n### init function\n\n```go\nimport --> const --> var --> init()\n```\n\n---\n\n```go\nvar num = setNumber()\n\nfunc setNumber() int {\n    return 42\n}\nfunc init() {\n    num = 0\n}\nfunc main() {\n    fmt.Println(num) // => 0\n}\n```\n\n### Functions as values\n\n```go\nfunc main() {\n    // assign a function to a name\n    add := func(a, b int) int {\n        return a + b\n    }\n    // use the name to call the function\n    fmt.Println(add(3, 4)) // => 7\n}\n```\n\n### Closures 1\n\n```go\nfunc scope() func() int{\n    outer_var := 2\n    foo := func() int {return outer_var}\n    return foo\n}\n\n// Outpus: 2\nfmt.Println(scope()())\n```\n\n### Closures 2\n\n```go\nfunc outer() (func() int, int) {\n    outer_var := 2\n    inner := func() int {\n        outer_var += 99\n        return outer_var\n    }\n    inner()\n    return inner, outer_var\n}\ninner, val := outer()\nfmt.Println(inner()) // => 200\nfmt.Println(val)     // => 101\n```\n"
            },
            {
                "title": "Go Packages",
                "content": "\n### Importing \n\n```go\nimport \"fmt\"\nimport \"math/rand\"\n```\n\n#### Same as\n\n```go\nimport (\n  \"fmt\"        // gives fmt.Println\n  \"math/rand\"  // gives rand.Intn\n)\n```\n\nSee: [Importing](https://tour.go.dev/basics/1)\n\n### Aliases \n\n```go\nimport r \"math/rand\"\n```\n\n---\n\n```go\nimport (\n    \"fmt\"\n    r \"math/rand\"\n)\n```\n\n---\n\n```go\nr.Intn()\n```\n\n### Packages\n\n```go\npackage main\n\n// An internal package may be imported only by another package\n// that is inside the tree rooted at the parent of the internal directory\npackage internal\n```\n\nSee: [Internal packages](https://go.dev/doc/go1.4#internalpackages)\n\n### Exporting names\n\n```go\n// Begin with a capital letter\nfunc Hello () {\n  \u00b7\u00b7\u00b7\n}\n```\n\nSee: [Exported names](https://tour.go.dev/basics/3)\n"
            },
            {
                "title": "Go Concurrency",
                "content": "\n### Goroutines \n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc f(from string) {\n\tfor i := 0; i < 3; i++ {\n\t\tfmt.Println(from, \":\", i)\n\t}\n}\n\nfunc main() {\n\tf(\"direct\")\n\tgo f(\"goroutine\")\n\n\tgo func(msg string) {\n\t\tfmt.Println(msg)\n\t}(\"going\")\n\n\ttime.Sleep(time.Second)\n\tfmt.Println(\"done\")\n}\n```\n\nSee: [Goroutines](https://tour.go.dev/concurrency/1), [Channels](https://tour.go.dev/concurrency/2)\n\n### WaitGroup \n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\nfunc w(id int, wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\tfmt.Printf(\"%d starting\\n\", id)\n\n\ttime.Sleep(time.Second)\n\tfmt.Printf(\"%d done\\n\", id)\n}\n\nfunc main() {\n\tvar wg sync.WaitGroup\n\tfor i := 1; i <= 5; i++ {\n\t\twg.Add(1)\n\t\tgo w(i, &wg)\n\t}\n\twg.Wait()\n}\n```\n\nSee: [WaitGroup](https://go.dev/pkg/sync/#WaitGroup)\n\n### Closing channels\n\n```go\nch <- 1\nch <- 2\nch <- 3\nclose(ch) // Closes a channel\n```\n\n---\n\n```go\n// Iterate the channel until closed\nfor i := range ch {\n  \u00b7\u00b7\u00b7\n}\n```\n\n---\n\n```go\n// Closed if `ok == false`\nv, ok := <- ch\n```\n\nSee: [Range and close](https://tour.go.dev/concurrency/4)\n\n### Buffered channels\n\n```go\nch := make(chan int, 2)\nch <- 1\nch <- 2\nch <- 3\n// fatal error:\n// all goroutines are asleep - deadlock\n```\n\nSee: [Buffered channels](https://tour.go.dev/concurrency/3)\n"
            },
            {
                "title": "Go Error control",
                "content": "\n### Deferring functions\n\n```go\nfunc main() {\n  defer func() {\n    fmt.Println(\"Done\")\n  }()\n  fmt.Println(\"Working...\")\n}\n```\n\n### Lambda defer\n\n```go\nfunc main() {\n  var d = int64(0)\n  defer func(d *int64) {\n    fmt.Printf(\"& %v Unix Sec\\n\", *d)\n  }(&d)\n  fmt.Print(\"Done \")\n  d = time.Now().Unix()\n}\n```\n\nThe defer func uses current value of d, unless we use a pointer to get final value at end of main.\n\n### Defer\n\n```go\nfunc main() {\n  defer fmt.Println(\"Done\")\n  fmt.Println(\"Working...\")\n}\n```\n\nSee: [Defer, panic and recover](https://blog.go.dev/defer-panic-and-recover)\n"
            },
            {
                "title": "Go Methods",
                "content": "\n### Receivers\n\n```go\ntype Vertex struct {\n  X, Y float64\n}\n```\n\n```go\nfunc (v Vertex) Abs() float64 {\n  return math.Sqrt(v.X * v.X + v.Y * v.Y)\n}\n```\n\n```go\nv := Vertex{1, 2}\nv.Abs()\n```\n\nSee: [Methods](https://tour.go.dev/methods/1)\n\n### Mutation\n\n```go\nfunc (v *Vertex) Scale(f float64) {\n  v.X = v.X * f\n  v.Y = v.Y * f\n}\n```\n\n```go\nv := Vertex{6, 12}\nv.Scale(0.5)\n// `v` is updated\n```\n\nSee: [Pointer receivers](https://tour.go.dev/methods/4)\n"
            },
            {
                "title": "Go Interfaces",
                "content": "\n### A basic interface\n\n```go\ntype Shape interface {\n  Area() float64\n  Perimeter() float64\n}\n```\n\n### Struct\n\n```go\ntype Rectangle struct {\n  Length, Width float64\n}\n```\n\nStruct `Rectangle` implicitly implements interface `Shape` by implementing all of its methods.\n\n### Methods\n\n```go\nfunc (r Rectangle) Area() float64 {\n  return r.Length * r.Width\n}\n\nfunc (r Rectangle) Perimeter() float64 {\n  return 2 * (r.Length + r.Width)\n}\n```\n\nThe methods defined in `Shape` are implemented in `Rectangle`.\n\n### Interface example\n\n```go \nfunc main() {\n  var r Shape = Rectangle{Length: 3, Width: 4}\n  fmt.Printf(\"Type of r: %T, Area: %v, Perimeter: %v.\", r, r.Area(), r.Perimeter())\n}\n\n```\n"
            },
            {
                "title": "Go generics",
                "content": "\n### example 1\n\n```go\n// comparable represents types that can be compared.\ntype comparable interface {\n\tint | float64 | string\n}\n\n// Max returns the maximum of two comparable values.\nfunc Max[T comparable](a, b T) T {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc main() {\n\t// Find the maximum of two integers.\n\tmaxInt := Max(10, 20)\n\tfmt.Println(\"Max integer:\", maxInt)\n\n\t// Find the maximum of two floats.\n\tmaxFloat := Max(3.14, 2.71)\n\tfmt.Println(\"Max float:\", maxFloat)\n\n\t// Find the maximum of two strings.\n\tmaxString := Max(\"apple\", \"banana\")\n\tfmt.Println(\"Max string:\", maxString)\n}\n\n```\n\n### example 2\n\n```go\n\n// Pair[T, U] represents a generic pair of values.\ntype Pair[T, U any] struct {\n\tFirst  T\n\tSecond U\n}\n\nfunc main() {\n\tpair := Pair[int, string]{First: 42, Second: \"hello\"}\n\n\tfmt.Println(\"First:\", pair.First)\n\tfmt.Println(\"Second:\", pair.Second)\n\n\t// Print the types of the values in the pair.\n\tfmt.Println(\"Type of First:\", reflect.TypeOf(pair.First))\n\tfmt.Println(\"Type of Second:\", reflect.TypeOf(pair.Second))\n}\n\n```\n"
            },
            {
                "title": "Miscellaneous",
                "content": "\n### Keywords\n\n- `break`\n- `default`\n- `func`\n- `interface`\n- `select`\n- `case`\n- `defer`\n- `go`\n- `map`\n- `struct`\n- `chan`\n- `else`\n- `goto`\n- `package`\n- `switch`\n- `const`\n- `fallthrough`\n- `if`\n- `range`\n- `type`\n- `continue`\n- `for`\n- `import`\n- `return`\n- `var`\n- `iota`\n\n\n\n### Operators and punctuation\n\n|                 |                 |                  |                  |                   |      |       |     |     |\n| --------------- | --------------- | ---------------- | ---------------- | ----------------- | ---- | ----- | --- | --- |\n| `+`             | `&`             | `+=`             | `&=`             | `&&`              | `==` | `!=`  | `(` | `)` |\n| `-`             | <code>\\|</code> | `-=`             | <code>\\|=</code> | <code>\\|\\|</code> | `<`  | `<=`  | `[` | `]` |\n| <code>\\*</code> | `^`             | <code>\\*=</code> | `^=`             | `<-`              | `>`  | `>=`  | `{` | `}` |\n| `/`             | `<<`            | `/=`             | `<<=`            | `++`              | `=`  | `:=`  | `,` | `;` |\n| `%`             | `>>`            | `%=`             | `>>=`            | `--`              | `!`  | `...` | `.` | `:` |\n|                 | `&^`            | `&^=`            |                  |                   |      |       |     |     |\n"
            },
            {
                "title": "Also see",
                "content": "\n- [Devhints](https://devhints.io/go) _(devhints.io)_\n- [A tour of Go](https://tour.go.dev/welcome/1) _(tour.go.dev)_\n- [Go wiki](https://github.com/golang/go/wiki/) _(github.com)_\n- [Effective Go](https://go.dev/doc/effective_go) _(go.dev)_\n- [Go by Example](https://gobyexample.com/) _(gobyexample.com)_\n- [Awesome Go](https://awesome-go.com/) _(awesome-go.com)_\n- [JustForFunc Youtube](https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw) _(youtube.com)_\n- [Style Guide](https://github.com/golang/go/wiki/CodeReviewComments) _(github.com)_"
            }
        ]
    },
    {
        "name": "git",
        "title": "Git",
        "tags": [
            "github",
            "gitlab",
            "version",
            "VCS"
        ],
        "categories": [
            "Linux Command"
        ],
        "background": "#d7593e",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/git.svg",
        "intro": "This cheat sheet summarizes commonly used Git command line instructions for quick reference.",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Create a Repository\n\nCreate a new local repository\n\n```shell script\n$ git init [project name]\n```\n\nClone a repository\n\n```shell script\n$ git clone git_url\n```\n\nClone a repository into a specified directory\n\n```shell script\n$ git clone git_url my_directory\n```\n\n### Make a change \n\nShow modified files in working directory, staged for your next commit\n\n```shell script\n$ git status\n```\n\nStages the file, ready for commit\n\n```shell script\n$ git add [file]\n```\n\nStage all changed files, ready for commit\n\n```shell script\n$ git add .\n```\n\nCommit all staged files to version history\n\n```shell script\n$ git commit -m \"commit message\"\n```\n\nCommit all your tracked files to version history\n\n```shell script\n$ git commit -am \"commit message\"\n```\n\nDiscard changes in working directory which is not staged\n\n```shell script\n$ git restore [file]\n```\n\nUnstage a staged file or file which is staged\n\n```shell script\n$ git restore --staged [file]\n```\n\nUnstage a file, keeping the file changes\n\n```shell script\n$ git reset [file]\n```\n\nRevert everything to the last commit\n\n```shell script\n$ git reset --hard\n```\n\nDiff of what is changed but not staged\n\n```shell script\n$ git diff\n```\n\nDiff of what is staged but not yet committed\n\n```shell script\n$ git diff --staged\n```\n\nApply any commits of current branch ahead of specified one\n\n```shell script\n$ git rebase [branch]\n```\n\n### Configuration\n\nSet the name that will be attached to your commits and tags\n\n```shell script\n$ git config --global user.name \"name\"\n```\n\nSet an email address that will be attached to your commits and tags\n\n```shell script\n$ git config --global user.email \"email\"\n```\n\nEnable some colorization of Git output\n\n```shell script\n$ git config --global color.ui auto\n```\n\nEdit the global configuration file in a text editor\n\n```shell script\n$ git config --global --edit\n```\n\n### Working with Branches\n\nList all local branches\n\n```shell script\n$ git branch\n```\n\nList all branches, local and remote\n\n```shell script\n$ git branch -av\n```\n\nSwitch to my_branch, and update working directory\n\n```shell script\n$ git checkout my_branch\n```\n\nCreate a new branch called new_branch\n\n```shell script\n$ git checkout -b new_branch\n```\n\nDelete the branch called my_branch\n\n```shell script\n$ git branch -d my_branch\n```\n\nMerge branchA into branchB\n\n```shell script\n$ git checkout branchB\n$ git merge branchA\n```\n\nTag the current commit\n\n```shell script\n$ git tag my_tag\n```\n\n### Observe your Repository\n\nShow the commit history for the currently active branch\n\n```shell script\n$ git log\n```\n\nShow the commits on branchA that are not on branchB\n\n```shell script\n$ git log branchB..branchA\n```\n\nShow the commits that changed file, even across renames\n\n```shell script\n$ git log --follow [file]\n```\n\nShow the diff of what is in branchA that is not in branchB\n\n```shell script\n$ git diff branchB...branchA\n```\n\nShow any object in Git in human-readable format\n\n```shell script\n$ git show [SHA]\n```\n\n### Synchronize\n\nFetch down all the branches from that Git remote\n\n```shell script\n$ git fetch [alias]\n```\n\nMerge a remote branch into your current branch to bring it up to date\n\n```shell script\n$ git merge [alias]/[branch]\n# No fast-forward\n$ git merge --no-ff [alias]/[branch]\n# Only fast-forward\n$ git merge --ff-only [alias]/[branch]\n```\n\nTransmit local branch commits to the remote repository branch\n\n```shell script\n$ git push [alias] [branch]\n```\n\nFetch and merge any commits from the tracking remote branch\n\n```shell script\n$ git pull\n```\n\nMerge just one specific commit from another branch to your current branch\n\n```shell script\n$ git cherry-pick [commit_id]\n```\n\n### Remote\n\nAdd a git URL as an alias\n\n```shell script\n$ git remote add [alias] [url]\n```\n\nShow the names of the remote repositories you've set up\n\n```shell script\n$ git remote\n```\n\nShow the names and URLs of the remote repositories\n\n```shell script\n$ git remote -v\n```\n\nRemove a remote repository\n\n```shell script\n$ git remote rm [remote repo name]\n```\n\nChange the URL of the git repo\n\n```shell script\n$ git remote set-url origin [git_url]\n```\n\n### Temporary Commits\n\nSave modified and staged changes\n\n```shell script\n$ git stash\n```\n\nList stack-order of stashed file changes\n\n```shell script\n$ git stash list\n```\n\nWrite working from top of stash stack\n\n```shell script\n$ git stash pop\n```\n\nDiscard the changes from top of stash stack\n\n```shell script\n$ git stash drop\n```\n\n### Tracking path Changes\n\nDelete the file from project and stage the removal for commit\n\n```shell script\n$ git rm [file]\n```\n\nChange an existing file path and stage the move\n\n```shell script\n$ git mv [existing-path] [new-path]\n```\n\nShow all commit logs with indication of any paths that moved\n\n```shell script\n$ git log --stat -M\n```\n\n### Ignoring Files\n\n```\n/logs/*\n\n# \"!\" means don't ignore\n!logs/.gitkeep\n\n/# Ignore Mac system files\n.DS_store\n\n# Ignore node_modules folder\nnode_modules\n\n# Ignore SASS config files\n.sass-cache\n```\n\nA `.gitignore` file specifies intentionally untracked files that Git should ignore\n"
            },
            {
                "title": "Git Tricks",
                "content": "\n### Rename branch\n\n- #### **Renamed** to `new_name`\n  ```shell script\n  $ git branch -m <new_name>\n  ```\n- #### **Push** and reset\n  ```shell script\n  $ git push origin -u <new_name>\n  ```\n- #### **Delete** remote branch\n  ```shell script\n  $ git push origin --delete <old>\n  ```\n  \n\n### Log\n\nSearch change by content\n\n```shell script\n$ git log -S'<a term in the source>'\n```\n\nShow changes over time for specific file\n\n```shell script\n$ git log -p <file_name>\n```\n\nPrint out a cool visualization of your log\n\n```shell script \n$ git log --pretty=oneline --graph --decorate --all\n```\n\n### Branch \n\nList all branches and their upstreams\n\n```shell script\n$ git branch -vv\n```\n\nQuickly switch to the previous branch\n\n```shell script\n$ git checkout -\n```\n\nGet only remote branches\n\n```shell script\n$ git branch -r\n```\n\nCheckout a single file from another branch\n\n```shell script\n$ git checkout <branch> -- <file>\n```\n\n### Rewriting history\n\nRewrite last commit message\n\n```shell script\n$ git commit --amend -m \"new message\"\n```\n\nAmend the latest commit without changing the commit message.\n\n```shell script\n$ git commit --amend --no-edit\n```\n\nSee also: [Rewriting history](https://www.atlassian.com/git/tutorials/rewriting-history)\n\n### Git Aliases\n\n```cmd\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.st status\n```\n\nSee also: [More Aliases](https://gist.github.com/johnpolacek/69604a1f6861129ef088)\n"
            },
            {
                "title": "Advanced Git",
                "content": "\n### Submodules\n\nCreate a new submodule within your repository:\n\n```shell script\n$ git submodule add <repository_url> <path>\n```\n\nClone a repository and initialize its submodules:\n\n```shell script\n$ git clone --recursive <repository_url>\n```\n\nUpdate all the submodules in your repository to the latest commit of their respective branches:\n\n```shell script\n$ git submodule update\n```\n\nPull the latest changes from the remote repositories of the submodules and update them in your main repository:\n\n```shell script\n$ git submodule update --remote\n```\n\nRemove a submodule from your repository:\n\n```shell script\n$ git submodule deinit <path>\n$ git rm <path>\n$ git commit -m \"Removed submodule\"\n```\n\n### Cherry-picking\n\nCherry-picking allows you to apply a specific commit from one branch to another branch.\n\n```shell script\n$ git cherry-pick <commit_hash>\n```\n\n### Reflog\n\nDisplay the reflog, showing the history of HEAD and branch movements:\n\n```shell script\n$ git reflog\n```\n\nFind the hash of the lost commit or branch using the reflog and then checkout to that hash to restore it:\n\n```shell script\n$ git checkout <commit_or_branch_hash>\n```"
            }
        ]
    },
    {
        "name": "ruby",
        "title": "Ruby",
        "tags": [
            "script",
            "interpret"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#FF5733",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/ruby.svg",
        "intro": "The [Ruby](https://www.ruby-lang.org/) cheat sheet is a one-page reference sheet for the Ruby programming language.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Install\n\n```bash\n# Debian, Ubuntu\n$ sudo apt-get install ruby-full\n# Windows\n$ winget install RubyInstallerTeam.Ruby\n$ brew install ruby # macOS\n$ docker run -it --rm ruby:latest # Docker\n```\n\n### What is Gemfile and Gemfile.lock \n\n- [Gemfile](https://bundler.io/v2.3/man/gemfile.5.html) Is the Bundler (also gem) configuration file that contains the\n  project's gem list (dependencies)\n\n```ruby\n# Specify gem in the Gemfile in the project root directory\nruby '3.1.2'\n\nsource 'https://rubygems.org'\ngem 'nokogiri'\ngem 'rack', '~>3.0.10'\ngem 'rspec', :require => 'spec'\n```\n\nInstall all gems in Gemfile\n\n```bash\n$ bundle install\n```\n\nSolve the problem of Gemfile.lock inconsistency between mac for development and linux for production\n\n```bash\nbundle lock --add-platform x86_64-linux\n```\n\n### Install a specific version of a specific ruby gem\n\n```bash\n$ gem install bundler -v 2.4.20\n$ gem install minitest -v 5.22.3\n```\n\n### Update gems using Bundler\n\n```bash\n# Updating a single gem using Bundler\n$ bundle update nokogiri\n# Use Bundler to update each gem in the Gemfile\n$ bundle update\n```\n\n### Comment \n\n```ruby\n# This is a single line comments.\n=begin\nMulti-line\nComment\n=end\nputs \"Hello world!\"  # Inline comments for code\n```\n\n### reserved words \n\n| Reserved words | Description                                                                                                |\n| :------------- | :--------------------------------------------------------------------------------------------------------- |\n| `__ENCODING__` | The script encoding of the current file                                                                    |\n| `__LINE__`     | The line number of this keyword in the current file                                                        |\n| `__FILE__`     | The path of the current file                                                                               |\n| `BEGIN`        | Code enclosed in { } is run before the program is run                                                      |\n| `END`          | Code enclosed in { } is run at the end of the program                                                      |\n| `alias`        | Create an alias for an existing method, operator, or global variable                                       |\n| `and`          | Logical AND operator                                                                                       |\n| `begin`        | Begin a block of code                                                                                      |\n| `break`        | Terminate a loop                                                                                           |\n| `case`         | Compare an expression with matching `when` clauses, terminated with <br/> `end`                            |\n| `class`        | Define a class                                                                                             |\n| `def`          | define a function/method                                                                                   |\n| `defined?`     | Check if a variable or function exist                                                                      |\n| `do`           | Start a block of code, terminated with the <br/> `end` keyword                                             |\n| `else`         | Execute the following code if previous conditions are not met                                              |\n| `elsif`        | Alternative condition for if expressions                                                                   |\n| `end`          | End blocks of code starting with keywords like `begin`, `class`,`def`,`do`,`if`, etc.                      |\n| `ensure`       | Always execute at the end of a block                                                                       |\n| `false`        | Logical boolean value false                                                                                |\n| `for`          | Start a `for` loop                                                                                         |\n| `if`           | Execute the code block `if` the condition is `true`                                                        |\n| `in`           | Used with `for` loop                                                                                       |\n| `module`       | Define a module                                                                                            |\n| `next`         | jump to the point before the evaluation of the loop condition                                              |\n| `nil`          | Stand for null, invalid, or always false                                                                   |\n| `not`          | Logical NOT operator                                                                                       |\n| `or`           | Logical OR operator                                                                                        |\n| `redo`         | Jump back to the loop condition evaluation                                                                 |\n| `rescue`       | Evaluate expressions after an exception is raised                                                          |\n| `retry`        | Repeat method calls when called outside `rescue`, jump to the top of the block when called inside `rescue` |\n| `return`       | Return a value from a method or block                                                                      |\n| `self`         | Refer to the current object                                                                                |\n| `super`        | Call the same-named method in the superclass                                                               |\n| `then`         | Used as a separator with`if`,`unless`,`when`,`case`,`rescue`                                               |\n| `true`         | Logical boolean value true                                                                                 |\n| `undef`        | Undefine methods/functions within the current class                                                        |\n| `until`        | Execute the code block until the condition is false                                                        |\n| `when`         | Begin a clause under a `case` statement                                                                    |\n| `while`        | Execute the code block while the condition is true                                                         |\n| `yield`        | Execute the code block passed to a method                                                                  |\n\n### Operator \n\n#### Logical Operators\n\n- `and`\n- `or`\n- `not`\n- `&&`\n- `||`\n- `!`\n\n#### Bit operators\n\n- `&`\n- `|`\n- `^`\n- `~`\n- `<<`\n- `>>`\n\n#### Arithmetic operators\n\n- `+`\n- `-`\n- `*`\n- `/`\n- `%`\n- `**`\n\n#### Comparison operator\n\n- `==`\n- `!=`\n- `>`\n- `<`\n- `>=`\n- `<=`\n- `<=>`\n- `===`\n- `eql?`\n- `equal?`\n\n#### Operator examples\n\n```bash\n# Addition\n1 + 1   #=> 2\n# Subtraction\n2 - 1   #=> 1\n# Multiplication\n2 * 2   #=> 4\n# Division\n10 / 5  #=> 2\n17 / 5    #=> 3, not 3.4\n17 / 5.0  #=> 3.4\n# Exponentiation\n2 ** 2  #=> 4\n3 ** 4  #=> 81\n# Modulus (remainder of division)\n8 % 2   #=> 0  (8 / 2 = 4; no remainder)\n10 % 4  #=> 2  (10 / 4 = 2 remainder 2)\na = 10\nb = 20\na == b #=> false\na != b #=> true\na > b #=> false\na < b #=> true\na >= b #=> false\na <= b #=> true\n\n# Comparison operators\na <=> b #=> -1\nc = 20\nc <=> b #=> 0\nc <=> a  #=> 1\n# Equality used in when clauses for case statements\n(1...10) === 5 #=> true\n# True if the receiver and the argument have the same type and equal values\n1.eql?(1.0) #=> false\nc = a + b  #=> 30\nc += a #=> 40\nc -= a #=> 30\nc *= a #=> 300\nc /= a #=> 30\nc %= a #=> 3\nc **= a #=> 59049\n\n# Ruby parallel assignment\na = 10\nb = 20\nc = 30\na, b, c = 10, 20, 30\n# Ruby bitwise operators\na = 60\nb = 13\n# & Binary AND operator copies a bit to the result if it exists in both operands.\na & b #=> 12\n# | Binary OR operator copies a bit if it exists in either operand.\na | b #=> 61\n# ^ Binary XOR operator copies a bit if it is set in one operand but not both.\na ^ b #=> 49\n# ~ Binary Ones Complement is unary and has the effect of 'flipping' bits.\n~a\n# << Binary Left Shift Operator. The left operand's value is moved\n# left by the number of bits specified by the right operand.\na << 2\n# >> Binary Right Shift Operator. The left operand's value is moved\n# right by the number of bits specified by the right operand.\na >> 2\n\n# Ruby logical operators\na and b #=> true.\na or b #=> true.\na && b #=> true.\n(a || b) #=> true.\n!(a && b) #=> false.\nnot(a && b) #=> false.\n# Ruby ternary operator\n# ? :\n# If condition is true ? Then value X : Otherwise value Y\na == 10 ? puts 'Right' : puts 'Wrong'\n# Ruby range operators\n# .. Creates a range from the start point to the end point (inclusive)\n1..10 #=> Creates a range from 1 to 10 (inclusive of 1 and 10)\n# ... Creates an exclusive range from the start point to the end point\n1...10 #=> Creates an exclusive range from 1 to 10\n```\n\n### Operator precedence table\n\nFrom highest to lowest, this is the precedence table for ruby. High precedence operations happen before low precedence\noperations.\n\n- !, ~, unary +\n- \\*\\*\n- unary -\n- \\*, /, %\n- +, -\n- <<, >>\n- &\n- |, ^\n- > , >=, <, <=\n- <=>, ==, ===, !=, =~, !~\n- &&\n- ||\n- .., ...\n- ?, :\n- modifier-rescue\n- =, +=, -=, etc.\n- defined?\n- not\n- or, and\n- modifier-if, modifier-unless, modifier-while, modifier-until\n- { } blocks\n\n### Variables and scope \n\n| -              | -                 | -                             | -                                                                                                |\n| -------------- | ----------------- | ----------------------------- | :----------------------------------------------------------------------------------------------- |\n| Name           | Scope             | Example                       | Explanation                                                                                      |\n| `[a-z]` or `_` | Local             | `count = 10` or `_count = 10` | Local variables must be initialized                                                              |\n| `@`            | Instance variable | `@id = []`                    | Instance variables have a \"nil\" value before initialization                                      |\n| `@@`           | Class variable    | `@@name = []`                 | Class variables must be initialized                                                              |\n| `$`            | Global variable   | `$version = \"0.8.9\"`          | Global variables have a \"nil\" value before initialization                                        |\n| `[A-Z]`        | Constant          | `PI = 3.14`                   | Constant variables must be initialized, you can change constants, but you will receive a warning |\n\nThere are five different types of variables. The first character determines the range To read in deap about variables\ncheck [User Guide](https://ruby-doc.org/docs/ruby-doc-bundle/UsersGuide/rg/) cap 19,20,21,22,23\n[Pre-Defined Variables and Constants](https://ruby-doc.org/docs/ruby-doc-bundle/Manual/man-1.4/variable.html)\n\n### Check the scope of a variable\n\n```ruby\ndefined? count\n\"local-variable\"\ndefined? @id\n\"instance-variable\"\ndefined? @@name\n\"class variable\"\ndefined? $version\n\"global-variable\"\ndefined? PI\n\"constant\"\n```\n\n### Data Types \n\n| -         | -                            | -                                                  | -                                                                                                               |\n| :-------- | :--------------------------- | :------------------------------------------------- | :-------------------------------------------------------------------------------------------------------------- |\n| Type      | Example                      | Class                                              | Documentation                                                                                                   |\n| `Integer` | a = 17                       | a.class > Integer <br>a.class.superclass > Numeric | [#](<(https://ruby-doc.org/3.3.1/Integer.html)>)                                                                |\n| `Float`   | a = 87.23                    | a.class > Float <br>a.class.superclass > Numeric   | [#](https://ruby-doc.org/3.3.1/Float.html)                                                                      |\n| `String`  | a = \"Hello universe\"         | a.class > String                                   | [#](https://ruby-doc.org/3.3.1/String.html)                                                                     |\n| `Array`   | a = [12, 34]                 | a.class > Array                                    | [#](https://ruby-doc.org/3.3.1/Array.html)                                                                      |\n| `Hash`    | a = {type: \"tea\", count: 10} | a.class > Hash                                     | [#](https://ruby-doc.org/3.3.1/Hash.html)                                                                       |\n| `Boolean` | a = false<br>a = true        | a.class > FalseClass <br>a.class > TrueClass       | [TrueClass](https://ruby-doc.org/3.3.1/TrueClass.html) [FalseClass](https://ruby-doc.org/3.3.1/FalseClass.html) |\n| `Symbol`  | a = :status                  | a.class > Symbol                                   | [#](https://ruby-doc.org/3.3.1/Symbol.html)                                                                     |\n| `Range`   | a = 1..3                     | a.class > Range                                    | [#](https://ruby-doc.org/3.3.1/Range.html)                                                                      |\n| `Nil`     | a = nil                      | a.class > NilClass                                 | [#](https://ruby-doc.org/3.3.1/NilClass.html)                                                                   |\n\n[further reading](https://www.digitalocean.com/community/tutorials/understanding-data-types-in-ruby)\n\n### Check data type\n\n```ruby\n# Both are synonyms\na = 37\na.kind_of? Integer\n# true\na.is_a? Integer\n# true\n```\n\n### Symbol\n\n```ruby\nweek_days = {sunday: 11, monday: 222}\n```\n\n### Integer useful methods\n\n```ruby\n2.even?\n# true\n3.even?\n# false\n```\n\n### Range\n\n`..` Used to create inclusive ranges\n\n```ruby\nrange = 1..10\nrange.to_a\n# output => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n\n`...` Used to create exclusive ranges\n\n```ruby\nrange = 1...10\nrange.to_a\n# output => [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\nsome useful methods\n\n| Method name | Output                                |\n| :---------- | :------------------------------------ |\n| `cover?`    | `(1..5).cover?(5)` => `true`          |\n| `end`       | `('a'..'z').end` => `\"z\"`             |\n| `first`     | `(1..5).first` => `1`                 |\n| `first(3)`  | `('A'..'Z').first(2)` => `[\"A\", \"B\"]` |\n| `eql?`      | `((0..2).eql?(0..5)` => `false`       |\n\n### Using `step` in Range\n\n```ruby\n(1..20).step(2) { |number| puts \"#{number}\"}\n# output\n# 1\n# 3\n# 5\n# 7\n# 9\n# 11\n# 13\n# 15\n# 17\n# 19\n```\n"
            },
            {
                "title": "Ruby Flow control",
                "content": "\n### if\n\n```ruby\nnum = 2\nputs 'two' if num == 2\n```\n\nIf the condition is true, execute the code\n\n### if elsif else\n\n```ruby\ntemp = 19\nif temp >= 25\n  puts \"hot\"\nelsif temp < 25 && temp >= 18\n  puts \"normal\"\nelse\n  puts \"cold\"\nend\n# output => normal\n```\n\n### unless\n\n```ruby\n# Unless contrary to if , evaluates when the statement is false\nname = \"rob\"\n# if name != \"bob\"\nunless name == \"bob\"\n  puts \"hello stranger\"\nelse\n  puts \"hello bob\"\nend\n# output => hello stranger\nnum = 6\nputs 'not two' unless num == 2\n# output => not two\n```\n\n### case \n\n```ruby\n# case returns the value of the last expression executed\ncase input\n# Check for an integer, 19\nwhen 19\n  puts \"It's 19\"\n  # \u68c0\u67e5\u4e00\u4e2a\u786e\u5207\u7684\u5b57\u7b26\u4e32\uff0c\u201cZaman\u201d\nwhen \"Zaman\"\n  puts \"Hi Zaman\"\nwhen 7..11\n  puts \"It's between 7 and 11\"\n  # Check multiple values, \"coffee\"\nwhen \"tea\", \"coffee\"\n  puts \"Happy days\"\nend\n```\n\n### case( short syntax )\n\n```ruby\ncase input\n  when 19 then puts \"It's 19\"\nend\n```\n\n### case( Optional failure )\n\n```ruby\ncase input\n  when 19 then puts \"It's 19\"\nelse\n  puts \"It's not 19\"\nend\n```\n\n### case( Get return value )\n\n```ruby\nmarks = 86\nresult = case marks\n        when 0..49 then \"Fail\"\n        when 50..64 then \"Pass\"\n        when 65..74 then \"Credit\"\n        when 75..84 then \"Distinction\"\n        when 85..100 then \"High Distinction\"\n        else \"Invalid marks\"\n        end\n\nputs result\n# High Distinction\n```\n"
            },
            {
                "title": "String",
                "content": "\n### String interpolation\n\n```ruby\nname = \"World\"\nputs \"Hello #{name}\"\nputs \"The total is #{1+1}\"\n# \"the total is 2\"\n```\n\nString interpolation allows you to combine strings together\n\n### Extract substring\n\n```ruby\nstring = \"abc123\"\nstring[0,3]\n# \"abc\"\nstring[3,3]\n# \"123\"\nstring[0..-2]\n# \"abc12\"\n#remove or replace the substring\nstring[0..2] = \"\"\nputs string\n# \"123\"\n```\n\nA substring is a small part of a string, which is useful if you only want that specific part, like the beginning,\nmiddle, or end\n\n### Convert a string to lowercase or uppercase\n\n```ruby\n\"HELLO World\".downcase  # \"hello world\"\n\"hello worlD\".upcase    # \"HELLO WORLD\"\n\"hEllo wOrlD\".capitalize # \"Hello world\"\n\"hEllo WOrlD\".swapcase  # \"HeLLO woRLd\"\n```\n\n### useful methods \n\n| Function Name                  | Output                                                                                                | Note                                                                                                                                                                                |\n| :----------------------------- | :---------------------------------------------------------------------------------------------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| length or size                 | `\"HELLO World\".length` => `11` <br> `\"HELLO World\".size` => `11`                                      | Returns the length of the string                                                                                                                                                    |\n| reverse                        | `\"hello worlD\".reverse` => `\"Dlrow olleh\"`                                                            | Returns the reversed string                                                                                                                                                         |\n| include? other_str             | `\"hEllo wOrlD\".include? \"w\"` => `true`                                                                | Returns true if the string or character exists, otherwise returns false                                                                                                             |\n| gsub(pattern, replacement)     | `\"hEllo wOrlD\".gsub(\" \", \"_\")` => `\"hEllo_wOrlD\"`                                                     | gsub or global substitute replaces one or more strings with the provided string                                                                                                     |\n| gsub(pattern, hash)            | `\"organization\".gsub(\"z\", 'z' => 's')` => `\"organisation\"`                                            | gsub or global substitute replaces one or more strings with the provided hash                                                                                                       |\n| gsub(pattern) {\\|match\\|block} | `\"Price of the phone is 1000 AUD\".gsub(/\\d+/) {\\| s\\| '$'+s }`<br>`\"Price of the phone is $1000 AUD\"` | gsub or global substitute replaces one or more strings with the provided block                                                                                                      |\n| strip                          | `\" hEllo WOrlD \".strip` <br> `\"hEllo WOrlD\"`                                                          | It will remove (trim) any leading and trailing characters: null (\u201c\\x00\u201d), horizontal tab (\u201c\\t\u201d), newline (\\n), vertical tab (\u201c\\v\u201d), form feed (f), carriage return(\\r), space (\" \") |\n| prepend                        | `a = \"world\" <br> a.prepend(\"hello \")` <br> `\"hello world\"`                                           | Adds the string before another string                                                                                                                                               |\n| insert                         | `a = \"hello\" <br> a.insert(a.length, \" world\")` <br> `\"hello world\"`                                  | Inserts the string at a specific position                                                                                                                                           |\n| start_with?                    | `string = \"ruby programming\"` <br> `string.start_with? \"ruby\"` <br> `true`                            | Checks if the string starts with a specific prefix                                                                                                                                  |\n| end_with?                      | `string = \"ruby programming\"` <br> `string.end_with? \"ruby\"` <br> `false`                             | Checks if the string ends with a specific prefix                                                                                                                                    |\n| delete_suffix                  | `string = \"sausage is expensive\"` <br> `string.delete_suffix(\" is expensive\")` <br> `\"sausage\"`       | Deletes the suffix from the string                                                                                                                                                  |\n| delete_prefix                  | `string = \"sausage is expensive\"` <br> `string.delete_prefix(\"sausage\")` <br> `\" is expensive\"`       | Deletes the prefix from the string                                                                                                                                                  |\n| split                          | `string = \"a b c d\" <br> string.split` <br> `[\"a\", \"b\", \"c\", \"d\"]`                                    | Converts the string into an array of characters                                                                                                                                     |\n| join                           | `arr = ['a', 'b', 'c'] <br> arr.join` => `\"abc\"`                                                      | Converts an array into a string                                                                                                                                                     |\n| to_i                           | `a = \"49\" <br> a.to_i` => `49`                                                                        | Converts the string into an integer                                                                                                                                                 |\n| chop                           | `\"abcd?\".chop(\"?\")` => `\"abcd\"`                                                                       | Deletes the last character from the string                                                                                                                                          |\n| count                          | `str = \"aaab\" <br> str.count(\"a\")` <br> `3`                                                           | Counts the characters in the string                                                                                                                                                 |\n| to_f                           | `a = \"49\"` <br> `a.to_f` <br> `49.0`                                                                  | Converts the string into a floating point number                                                                                                                                    |\n| to_sym                         | `a = \"key\"` <br> `a.to_sym` <br> `:key`                                                               | Converts the string into a symbol                                                                                                                                                   |\n| match                          | `\"abcd?\".match(/ab/)` => `#<MatchData \"ab\">`                                                          | Converts the pattern into a regular expression and calls its match method on the string                                                                                             |\n| empty?                         | `\"hello\".empty?` => `false`                                                                           | Returns true if the length of the string is zero                                                                                                                                    |\n| squeeze                        | `\"Booook\".squeeze` => `\"Bok\"`                                                                         | Returns a copy of the string where runs of the same character are replaced by a single character                                                                                    |\n| \\*                             | `puts \"Ruby \" * 4` => `Ruby Ruby Ruby Ruby`                                                           | Returns the concatenation of multiple copies of self                                                                                                                                |\n| +                              | `\"sammy \" + \"shark\"` => `\"sammyshark\"`                                                                | Returns the concatenation of self and the given other string                                                                                                                        |\n| eql?                           | `s = 'foo'` => `true` <br> `s.eql?('foo')` => `true`                                                  | Returns true if the objects have the same length and content; false otherwise                                                                                                       |\n"
            },
            {
                "title": "Methods",
                "content": "\n### Declare a method \n\n```ruby\ndef method_name(parameter1, parameter2)\n    puts \"#{parameter1} #{parameter2}\"\n    parameter1 + parameter2\nend\n```\n\n---\n\n```ruby\nres = method_name(20, 10)\n# output => 30\ndef method_name(parameter1, parameter2)\n    puts \"#{parameter1} #{parameter2}\"\n    return parameter1 + parameter2\nend\n# output => 30\n```\n\n### Call method\n\n```ruby\nres = method_name(parameter1, parameter2)\n# Methods can be called without parentheses\nres = method_name parameter1, parameter2\n```\n\n### Class method \n\nClass methods are class-level methods. There are multiple ways to define class methods\n\n```ruby\nclass Mobile\n    def self.ring\n        \"ring ring ring...\"\n    end\nend\n\nMobile.ring\n```\n\n---\n\n```ruby\nclass Mobile\n    def Mobile.ring\n        \"ring ring ring...\"\n    end\nend\nMobile.ring\n```\n\n---\n\n```ruby\nclass Mobile\n    class << self\n    def ring\n        \"ring ring ring...\"\n       end\n    end\nend\nMobile.ring\n```\n\nClass methods are instance methods of class objects. When a new class is created, an object of type \"Class\" is\ninitialized and assigned to a global constant (in this case Mobile)\n\n```ruby\nMobile = Class.new do\n    def self.ring\n        \"ring ring ring...\"\n    end\nend\nMobile.ring\n```\n\n```ruby\nMobile = Class.new\nclass << Mobile\n    def ring\n        \"ring ring ring...\"\n    end\nend\nMobile.ring\n```\n\n### Use another parameter as default value\n\n```ruby\ndef method_name(num1, num2 = num1)\n    return num1 + num2\nend\nres = method_name(10)\n# output => 20\n```\n\n### Define default values for method parameters\n\n```ruby\ndef method_name(parameter1, parameter2, type = \"ADD\")\n    puts \"#{parameter1} #{parameter2}\"\n    return parameter1 + parameter2 if type == \"ADD\"\n    return parameter1 - parameter2 if type == \"SUB\"\nend\nres = method_name(20, 10)\n# output => 30\n```\n\n### Pass variable length arguments to method parameters\n\n```ruby\ndef method_name(type, *values)\n    return values.reduce(:+) if type == \"ADD\"\n    return values.reduce(:-) if type == \"SUB\"\nend\nnumbers = [2, 2, 2, 3, 3, 3]\nres = method_name(\"ADD\", *numbers)\n# output => 15\nres = method_name(\"SUB\", *numbers)\n# output => -11\n# Or you can provide a value like this\nres = method_name(\"ADD\", 2, 2, 2, 3, 3, 3)\n# output => 15\n```\n\n### Modify object\n\n```ruby\na = [\"Drama\", \"Mystery\", \"Crime\",\n\"Sci-fi\", \"Disaster\", \"Thriller\"]\na.sort\nputs a\n# We did not modify the object\n# Drama\n# Mystery\n# Crime\n# Sci-fi\n# Disaster\n# Thriller\na.sort!\nputs a\n# Modify object\n# Crime\n# Disaster\n# Drama\n# Mystery\n# Sci-fi\n# Thriller\n```\n\nWhen you want to modify the object, use `!` after the method\n\n### Boolean method\n\nIn ruby, methods ending with a question mark (?) are called boolean methods, which return `true` or `false`\n\n```ruby\n\"some text\".nil?\n# false\nnil.nil?\n# true\n```\n\nYou can have your own boolean method\n\n```ruby\ndef is_vowel?(char)\n    ['a','e','i','o','u'].include? char\nend\nis_vowel? 'a'\n# true\nis_vowel? 'b'\n# false\n```\n"
            },
            {
                "title": "Blocks",
                "content": "\n### Block example\n\n```ruby\n# return value\ndef give_me_data\n    data = yield\n    puts \"data = #{data}\"\nend\ngive_me_data { \"Big data\" }\n# output => data = Big data\n```\n\nThe code between `do` and `end` (for multiple lines) or curly braces `{` and `}` (for a single line) is called a block,\nand they can define multiple parameters between two pipes `( |arg1, arg2|)`\n\n### Single line block\n\n```ruby\nsalary = [399, 234, 566, 533, 233]\nsalary.each { |s| puts s }\n# puts s = block body\n# |s| = block arguments\n```\n\n### Multi-line block\n\n```ruby\nsalary.each do |s|\n    a = 10\n    res = a * s\n    puts res\nend\n# Block\n# a = 10\n# res = a * s\n# puts res\n# block parameters\n# |s|\n```\n\nBlocks can be passed as method parameters or associated with method calls. block returns the last evaluated statement\n\n### Implicitly passing a block\n\n```ruby\ndef give_me_data\n    puts \"I am inside give_me_data method\"\n    yield\n    puts \"I am back in give_me_data method\"\nend\n\ngive_me_data { puts \"Big data\" }\n\n# output\n# I am inside give_me_data method\n# Big data\n# I am back in give_me_data method\n```\n\n### Called multiple times\n\n```ruby\ndef give_me_data\n    yield\n    yield\n    yield\nend\n\ngive_me_data { puts \"Big data\" }\n\n# output\n# Big data\n# Big data\n# Big data\n```\n\n### Called with block parameters\n\n```ruby\ndef give_me_data\n    yield 10\n    yield 100\n    yield 30\nend\n\ngive_me_data { |data| puts \"Big data #{data} TB\" }\n\n# output\n# Big data 10 TB\n# Big data 100 TB\n# Big data 30 TB\n```\n\n### Called with multiple block parameters\n\n```ruby\ndef give_me_data\n    yield \"Big data\", 10, \"TB\"\n    yield \"Big data\", 100, \"GB\"\n    yield \"Big data\", 30, \"MB\"\nend\n\ngive_me_data { |text, data, unit| puts \"#{text} #{data} #{unit}\" }\n\n# output\n# Big data 10 TB\n# Big data 100 GB\n# Big data 30 MB\n```\n\n### Block will attempt to return from the current context\n\n```ruby\ngive_me_data\n    puts \"I'm inside the give_me_data method\"\nend\n\ndef test\n  puts \"I'm inside the test method\"\n  give_me_data { return 10 } # Code returns from here\n  puts \"I am back in test method\"\nend\n\nreturn_value = test\n\n# output\n# I'm inside the test method\n# I'm inside the give_me_data method\n# 10\n```\n\n### Pass the block explicitly by using the & parameter\n\n```ruby\ndef give_me_data(&block)\n    block.call\n    block.call\nend\n\ngive_me_data { puts \"Big data\" }\n\n# output\n# Big data\n# Big data\n```\n\n### Check if block is given\n\n```ruby\ndef give_me_data\n    yield\nend\n\ngive_me_data\n\n# output\n# LocalJumpError: no block given (yield)\n```\n\n### Ways to handle exceptions and make blocks optional\n\n```ruby\ndef give_me_data\n    return \"no block\" unless block_given?\n    yield\nend\n\ngive_me_data { puts \"Big data\" }\ngive_me_data\n\n# output\n# Big data\n```\n"
            },
            {
                "title": "Procs",
                "content": "\n### Procs\n\n```ruby\np = Proc.new { puts \"Hello World\" }\n\ndef give_me_data(proc)\n    proc.call\nend\n\ngive_me_data p\n\n# output\n# Hello World\n```\n\nproc is like a block that can be stored in a variable\n\n### any parameter \n\n```ruby\np = Proc.new { |count| \"Hello World \" * count }\n\ndef give_me_data(proc)\n    proc.call 5, 2\nend\n\ngive_me_data p\n\n# output\n# \"Hello World Hello World Hello World Hello World Hello World \"\n```\n\n### proc will attempt to return from the current context\n\n```ruby\np = Proc.new { return 10 }\np.call\n# output\nLocalJumpError: unexpected return\n```\n\n### Cannot return from top-level context\n\n```ruby\ndef give_me_data\n    puts \"I'm inside the give_me_data method\"\n    p = Proc.new { return 10 }\n    p.call # Code returns from here\n    puts \"I am back in give_me_data method\"\nend\n\nreturn_value = give_me_data\nputs return_value\n\n# output\n# I'm inside the give_me_data method\n# 10\n```\n"
            },
            {
                "title": "Lambdas",
                "content": "\n### Declare a lambda\n\n```ruby\nl = lambda { puts \"Hello World\" }\n# shorthand\nl = -> { puts \"Hello World\" }\n# transfer lambda\nl.call\n# output => Hello World\n```\n\nThere are multiple ways to call a lambda\n\n```ruby\nl.()\nl[]\n```\n\n### strict arguments\n\n```ruby\nl = -> (count) { \"Hello World \" * count }\nl.call 5\n# output\n# \"Hello World Hello World Hello World Hello World Hello World \"\nl.call 5, 2\n# output\nwrong number of arguments (given 2, expected 1)\n```\n\n### declare a lambda in block \n\n```ruby\ndef give_me_data\n    puts \"I am inside give_me_data method\"\n    l = -> { return 10 }\n    l.call\n    puts \"I am back in give_me_data method\"\nend\n\nreturn_value = give_me_data\nputs return_value\n\n# output\n# I am inside give_me_data method\n# I am back in give_me_data method\n# nil # because puts return nil\n```\n\n### lambdas are returned from the lambda itself, just like regular methods\n\n```ruby\nl = -> { return 10 }\nl.call\n\n# output => 10\n```\n"
            },
            {
                "title": "Array",
                "content": "\n### Initialize an empty array\n\n```ruby\narray = Array.new   #=> []\n# or\narray = []\n```\n\n### Array containing objects of different types\n\n```ruby\narray = [1, \"two\", 3.0]\n#=> [1, \"two\", 3.0]\n```\n\n### Fill array with initial size and default objects \n\n```ruby\nnumbers = Array.new(3)\n#=> [nil, nil, nil]\nnumbers = Array.new(3, 7)\n#=> [7, 7, 7]\nnumbers = Array.new(3, true)\n#=> [true, true, true]\nnumbers = []\nnumbers.fill(7, 0..2)   #=> [7, 7, 7]\n```\n\n### array of different hashes \n\n```ruby\narray_with_hashes = Array.new(2) { {} } #=> [{}, {}]\narray_with_hashes[0][:name] = \"Bob\"\narray_with_hashes[0][:id] = 10          #=> [{:name=>\"Bob\", :id=>10}, {}]\n```\n\n### Two-dimensional array\n\n```ruby\ntemperature_data = [\n              [\"A908\", 38],\n              [\"A909\", 37],\n              [\"A910\", 38],\n          ]\ntemperature_data[0]    #=> [\"A908\", 38]\ntemperature_data[0][0] #=> \"A908\"\ntemperature_data[0][1] #=> 38\n```\n\n### array index\n\n```ruby\nstr_array = [\n  \"This\", \"is\", \"a\", \"small\", \"array\"\n]\nstr_array[0]            #=> \"This\"\nstr_array[1]            #=> \"is\"\nstr_array[4]            #=> \"array\"\n```\n\n### negative index\n\n```ruby\nstr_array = [\n  \"This\", \"is\", \"a\", \"small\", \"array\"\n]\n# Index -1 represents the last element\nstr_array[-1]        #=> \"array\"\n# Index -2 represents the second to last element\nstr_array[-2]        #=> \"small\"\nstr_array[-6]        #=> nil\n```\n\n### array method at\n\n```ruby\nstr_array = [\n  \"This\", \"is\", \"a\", \"small\", \"array\"\n]\n\nputs str_array.at(0)      #=> \"This\"\n```\n\n### Range acquisition\n\n```ruby\narr = [1, 2, 3, 4, 5, 6]\narr[100]                  #=> nil\narr[-3]                   #=> 4\narr[2, 3]                 #=> [3, 4, 5]\narr[1..4]                 #=> [2, 3, 4, 5]\narr[1..-3]                #=> [2, 3, 4]\n```\n\n### Array method fetch\n\n```ruby\narr = ['a', 'b', 'c', 'd', 'e', 'f']\narr.fetch(100)\n#=> IndexError: Index outside array bounds 100\uff1a-6...6\narr.fetch(100, \"oops\")    #=> \"oops\"\n```\n\nOut of bounds, give default value\n\n### Get array elements\n\n```ruby\narr = [1, 2, 3, 4, 5, 6]\n\narr.first     # first value => 1\narr.last      # last value => 6\n# take Returns the first n elements\narr.take(3)   #=> [1, 2, 3]\n# drop after n elements have been deleted\narr.drop(3)   #=> [4, 5, 6]\n```\n\n### Add value to end of array push\n\n```ruby\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.push(11)\n#=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nnumbers.push(12, 13, 14)\n#=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n```\n\n### Delete the value at the end of the array pop\n\n```ruby\nnum_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnum_array.pop             #=> 10\nnum_array\n#=> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### Add value to beginning of array unshift\n\n```ruby\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.unshift(0)\n#=> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.unshift(-3, -2, -1)\n#=> [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n\n### Retrieve and simultaneously delete the first element shift\n\n```ruby\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.shift #=> 1\nnumbers\n#=> [2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n\n### Remove element at specific index delete_at\n\n```ruby\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.delete_at(2) #=> 4\nnumbers\n#=> [2, 3, 5, 6, 7, 8, 9, 10]\n```\n\n### Remove a specific element anywhere in an array\n\n```ruby\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.delete(2) #=> 2\nnumbers           #=> [3, 5, 6, 7, 8, 9, 10]\n```\n\n### Insert value at given index insert \n\n```ruby\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.insert(0, 0)\n#=> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.insert(0, -3, -2, -1)\n#=> [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nnumbers.insert(-1, 12, 13, 14)\n#=> [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]\nnumbers.insert(-4, 11)\n#=> [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n```\n\n### A block to fill the array with values\n\n```ruby\nnumbers = Array.new(10) { |n| n = n * 2 }\n#=> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n```\n\n### Filling arrays becomes easier\n\n```ruby\nnumbers = Array(100..110)\n#=> [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]\n\n# Or we can convert the range to an array\n(100..110).to_a\n#=> [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]\n```\n\n### Remove nil value from array\n\n```ruby\narr = ['foo', 0, nil, 'bar', 7, nil]\narr.compact  #=> ['foo', 0, 'bar', 7]\narr      #=> ['foo', 0, nil, 'bar', 7, nil]\narr.compact! #=> ['foo', 0, 'bar', 7]\narr      #=> ['foo', 0, 'bar', 7]\n```\n\n### Remove duplicates uniq\n\n```ruby\narr = [2, 5, 6, 556, 6, 6, 8, 9, 0, 123, 556]\narr.uniq #=> [2, 5, 6, 556, 8, 9, 0, 123]\narr # => [2, 5, 6, 556, 6, 6, 8, 9, 0, 123, 556]\narr.uniq! #=> [2, 5, 6, 556, 8, 9, 0, 123]\narr #=> [2, 5, 6, 556, 8, 9, 0, 123]\n```\n\n### Check if a value exists in an array\uff08`include\uff1f`\uff09\n\n```ruby\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nplanets.include? \"Mars\"\n# output => true\nplanets.include? \"Pluto\"\n# output => false\n```\n\n### Get array size\n\n```ruby\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nplanets.size\n# output => 8\nplanets.length\n# output => 8\n```\n\nYou can use size or length, both are synonyms\n\n### clear array\n\n```ruby\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.clear\n# output => []\n```\n\n### Get the first element of the array\n\n```ruby\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers[0]\n# or\nnumbers.first\n# output => 1\n```\n\n### Get the last element of the array\n\n```ruby\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers[-1]\n# or\nnumbers.last\n# output => 10\n```\n\n### Merge two arrays\n\n```ruby\na = [\"tom\", \"mot\", \"otm\"]\nb = [2, 3, 5]\na.zip(b)\n# output\n# [[\"tom\", 2], [\"mot\", 3], [\"otm\", 5]]\n```\n\n### Sort array \n\n```ruby\nprimes = [7, 2, 3, 5]\nsorted_primes = primes.sort\nputs \"#{sorted_primes}\"\n# output => [2, 3, 5, 7]\n```\n\nor in-place sort\n\n```ruby\nprimes = [7, 2, 3, 5]\nprimes.sort!\nputs \"#{primes}\"\n# output => [2, 3, 5, 7]\n```\n\n```ruby\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nplanets.sort\n# output\n# [\"Earth\", \"Jupiter\", \"Mars\", \"Mercury\", \"Neptune\", \"Saturn\", \"Uranus\", \"Venus\"]\nplanets.sort_by { |p| p }\n# output\n# [\"Earth\", \"Jupiter\", \"Mars\", \"Mercury\", \"Neptune\", \"Saturn\", \"Uranus\", \"Venus\"]\nplanets.sort_by { |p| p.length }\n# output\n# [\"Mars\", \"Earth\", \"Venus\", \"Saturn\", \"Uranus\", \"Neptune\", \"Jupiter\", \"Mercury\"]\n```\n\n### Get maximum value from array\n\n```ruby\nprimes = [7, 2, 3, 5]\nprimes.max_by { |p| p }\n# output => 7\n```\n\n### Get array elements using range \n\n```ruby\n# numbers[start..end], both index are inclusive\nputs numbers[0..3]\n# 1\n# 2\n# 3\n# 4\n# numbers[start..end], end index is exclusive\nputs numbers[0...3]\n# 1\n# 2\n# 3\n# or numbers[start..length]\nputs numbers[0, 1]\n# 1\n```\n\n### Get the first n elements of the array\n\n```ruby\nprimes = [7, 2, 3, 5]\nprimes.take(3)\n# [7, 2, 3]\n```\n\n### access element\n\n```ruby\nprimes = [7, 2, 3, 5]\nprimes.fetch(3)\n# 5\n# Fetch will throw an error if the element does not exist\nprimes.fetch(10)\n# (index 10 outside of array bounds: -4...4)\n# or get an default value\nprimes.fetch(10, -1)\n# -1\n```\n\n### Delete first n elements\n\n```ruby\nprimes = [7, 2, 3, 5]\nprimes.drop(3)\n# [5]\n```\n\n### Delete the first element\n\n```ruby\nprimes = [7, 2, 3, 5]\nprimes.shift\n# [2, 3, 5]\n```\n\n### Remove last element\n\n```ruby\nprimes = [7, 2, 3, 5]\nprimes.pop\n# [7, 2, 3]\n```\n\n### Delete element with index\n\n```ruby\nprimes = [7, 2, 3, 5]\nprimes.delete_at(-1)\n# [7, 2, 3]\n```\n\n### Remove all occurrences of elements\n\n```ruby\nprimes = [7, 2, 3, 5, 5]\nprimes.delete(5)\n# [7, 2, 3]\n```\n\n### each \n\n```ruby\n# When you have single line blocks\nsalary = [399, 234, 566, 533, 233]\nsalary.each { |s| puts s }\n# output\n# 399\n# 234\n# 566\n# 533\n# 233\n```\n\nWhen you have a multi-line block, you can replace the curly braces `{}` with `do` and `end`\n\n```ruby\nsalary.each do |s|\n  a = 10\n  res = a * s\n  puts res\nend\n# output\n# 3990\n# 2340\n# 5660\n# 5330\n# 2330\n```\n\nOr you can do the same thing using braces {} and semicolon as separator instead of newline\n\n```ruby\nsalary.each { |s| a = 10 ; res = a * s ; puts res }\n```\n\n### each_with_index\n\n```ruby\nsalary = [399, 234, 566, 533, 233]\nsalary.each_with_index { |value, index| puts \"#{index} #{value}\" }\n# output\n# 0 399\n# 1 234\n# 2 566\n# 3 533\n# 4 233\n```\n\n### each_index\n\n```ruby\nsalary = [399, 234, 566, 533, 233]\nsalary.each_index { |i| puts i}\n# output\n# 0\n# 1\n# 2\n# 3\n# 4\n```\n\n### map\n\n```ruby\nsalary = [399, 234, 566, 533, 233]\nsalary.map { |s|  s * 10  }\n# return\n# [3990, 2340, 5660, 5330, 2330]\n# On the other hand, each returns the original value\nsalary = [399, 234, 566, 533, 233]\nsalary.each { |s|  s * 10  }\n# return\n# [399, 234, 566, 533, 233]\n```\n\n### collect\n\n```ruby\nsalary = [399, 234, 566, 533, 233]\nsalary.collect { |s| s > 400 }\n# output\n# [false, false, true, true, false]\n```\n\n### for\n\n```ruby\nfor value in [2, 3, 5, 7]\n    puts value\nend\n```\n\n### each_with_object \n\n```ruby\ncolors = [\n  {color: \"red\", count: 3}, {color: \"red\", count: 5}, {color: \"black\", count: 4}\n]\ncolors.each_with_object(Hash.new(0)) { |color, hash| hash[\"color_\"+color[:color]] = color[:color].upcase; hash[\"count_\"+color[:color]] += color[:count] }\n# output\n{\"color_red\"=>\"RED\", \"count_red\"=>8, \"color_black\"=>\"BLACK\", \"count_black\"=>4}\n\n[1, 2, 3].each_with_object(0) { |number, sum| sum += number}\n# output\n# 0\n# Because 0 is immutable, and since the initial object is 0, the method returns 0\n```\n\n### while\n\n```ruby\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nindex = 0\nwhile index < planets.size\n    puts \"#{planets[index]}\"\n    index += 1\nend\n```\n\n---\n\n```ruby\na = 1\nstar = '*'\nwhile a <= 10\n    puts star\n    star += '*'\n    a += 1\nend\n```\n\n### do while\n\n```ruby\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nindex = 0\nloop do\n    puts \"#{planets[index]}\"\n    index += 1\n    break if planets[index] == \"Mars\" or index > planets.size\nend\n```\n\n### until\n\n```ruby\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nindex = planets.size - 1\nuntil index < 0\n    puts \"#{planets[index]}\"\n    index -= 1\nend\n```\n\n```ruby\na = 1\nstar = '*'\nuntil star.length > 10\n    puts star\n    star += '*'\n    a += 1\nend\n```\n\n### times\n\n```ruby\n10.times { puts \"#{rand(1..100)}\"}\n# output\n# will print 10 random numbers\n```\n\nJust because you can doesn't mean you should iterate over an array like this\n\n```ruby\ndata_sample = [2, 3, 5, 7]\ndata_sample.size.times { |index| puts \"#{data_sample[index]}\" }\n# output\n# 2\n# 3\n# 5\n# 7\n```\n\n### upto\n\n```ruby\ndata_sample = [2, 3, 5, 7]\n0.upto((data_sample.size - 1) / 2) { |index| puts \"#{data_sample[index]}\" }\n# output\n# 2\n# 3\n```\n\n### downto\n\n```ruby\ndata_sample = [2, 3, 5, 7]\n(data_sample.size - 1).downto(data_sample.size / 2) { |index| puts \"#{data_sample[index]}\" }\n# output\n# 7\n# 5\n```\n\n### step \n\n```ruby\n1.step(20, 2) { |number| puts \"#{number}\"}\n# output\n# 1\n# 3\n# 5\n# 7\n# 9\n# 11\n# 13\n# 15\n# 17\n# 19\n```\n\n---\n\n```ruby\n19.step(1, -2) { |number| puts \"#{number}\"}\n# output\n# 19\n# 17\n# 15\n# 13\n# 11\n# 9\n# 7\n# 5\n# 3\n# 1\n```\n\n### inject \n\n```ruby\nnumbers = [2, 2, 2, 2, 2]\nnumbers.inject{ |res, n| res + n }\n# The output is the sum of all numbers\n# If no initial value is set for res, the first element of the array is used as the initial value of res.\n#10\n# Now set the value of res to 11\nnumbers = [2, 2, 2, 2, 2]\nnumbers.inject(11) { |res, n| res + n }\n# so 11 + 2, 13 + 2, 15 + 2, 17 + 2 and 19 + 2\n# 21\n# using symbol\nnumbers = [2, 2, 2, 2, 2]\nnumbers.inject(:+)\n# output\n# 10\n```\n\nUse initial values and symbols\n\n```ruby\nnumbers = [2, 2, 2, 2, 2]\nnumbers.inject(11, :+)\n# output\n# 21\n```\n\n### reduce\n\n```ruby\nnumbers = [2, 2, 2, 2, 2]\nnumbers.reduce(11, :+)\n# output\n# 21\n```\n\n### detect\n\n```ruby\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nplanets.detect { |name| name.start_with?(\"E\") and name.end_with?(\"h\") }\n# output\n# Earth\nsalary = [399, 234, 566, 533, 233]\nsalary.detect { |s| s > 1000 }\n# output\n# nil\n```\n\n### find\n\n```ruby\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nplanets.find { |name| name.start_with?(\"E\") and name.end_with?(\"h\") }\n# output\n# Earth\n```\n\n### select\n\n```ruby\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.select { |n| n % 2 == 0 }\n# Now you have an even array\n# [2, 4, 6, 8, 10]\n# If there are no values that satisfy your logic, return an empty array\n[1, 1, 1].select { |n| n % 2 == 0 }\n# no even numbers\n# []\n```\n\n### reject\n\n```ruby\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.reject { |n| n % 2 == 0 }\n# Reject if the number is even, so now we have an odd array\n# [1, 3, 5, 7, 9]\n```\n\n### keep_if\n\n```ruby\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.keep_if { |n| n % 2 == 0 }\n# numbers Array contains only even numbers\n# [2, 4, 6, 8, 10]\n```\n\n### delete_if\n\n```ruby\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.delete_if { |n| n % 2 == 0 }\n# numbers Array contains only odd numbers\n# [1, 3, 5, 7, 9]\n```\n\n### drop_while\n\n```ruby\nnumbers = [1, 2, 3, 1, 2, 3, 0]\nnumbers.drop_while { |n| n < 3 }\n# is 3 less than 3, returns false, so delete 1, 2\n# [3, 1, 2, 3, 0]\n```\n\n### reverse_each\n\n```ruby\nwords = %w[first second third fourth fifth sixth]\nstr = \"\"\nwords.reverse_each {|word| str += \"#{word} \"}\np str #=> \"sixth fifth fourth third second first \"\n```\n"
            },
            {
                "title": "boolean enumerable method",
                "content": "\n### boolean enumerable method \n\n| Name       | When to use                                                              |\n| :--------- | :----------------------------------------------------------------------- |\n| `all?`     | When you want to check if all elements meet your condition               |\n| `any?`     | When you want to check if at least one item meets your condition         |\n| `one?`     | When you want to check if one element meets your requirement             |\n| `none?`    | When you want to check if no item meets your condition, the opposite of? |\n| `empty?`   | When you want to check if an object is empty                             |\n| `include?` | When you want to check if an element exists in the object                |\n\n### all?\n\n```ruby\n[2, 4, 6, 8, 10].all? { |num| num % 2 == 0 }\n# true\n[1, 4, 6, 8, 10].all? { |num| num % 2 == 0 }\n# false\n```\n\n### any?\n\n```ruby\n[1, 3, 5, 7, 10].any? { |num| num % 2 == 0 }\n# true\n[1, 3, 5, 7, 19].any? { |num| num % 2 == 0 }\n# false\n```\n\n### one?\n\n```ruby\n[1, 3, 2, 5, 7].one? { |num| num % 2 == 0 }\n# true\n[1, 3, 2, 5, 4].one? { |num| num % 2 == 0 }\n# false\n```\n\n### none?\n\n```ruby\n[1, 3, 5, 7, 9].none? { |num| num % 2 == 0 }\n# true\n[2, 3, 5, 7, 9].none? { |num| num % 2 == 0 }\n# false\n```\n\n### empty?\n\n```ruby\n[].empty?\n# true\n[1, 3, 5, 7, 9].empty?\n# false\n```\n"
            },
            {
                "title": "Combination method",
                "content": "\n### Combination method \n\n- `&` Returns a new array containing each element found in array and array other_array; duplicates are omitted; use eql?\n  to compare items\n- `intersection` Returns a new array containing each element found in self and all given arrays other_arrays; duplicates\n  are omitted; use eql? to compare items\n- `+` Returns an array containing all elements of self followed by all elements of the given array\n- `-` Returns an array containing all elements of self not found in the given array\n- `union` Returns an array containing all elements of self and all elements of the given array, with duplicates removed\n- `difference` Returns an array containing all elements of self not found in any given array\n- `product` self Returns or produces all combinations of elements from self and the given array\n\n### &\n\n```ruby\n[0, 1, 2, 3] & [1, 2] # => [1, 2]\n[0, 1, 0, 1] & [0, 1] # => [0, 1]\n```\n\n### intersection\n\n```ruby\n[0, 1, 2, 3].intersection([0, 1, 2], [0, 1, 3])\n# => [0, 1]\n[0, 0, 1, 1, 2, 3].intersection([0, 1, 2], [0, 1, 3])\n# => [0, 1]\n```\n\n### +\n\n```ruby\na = [0, 1] + [2, 3]\na # => [0, 1, 2, 3]\n```\n\n### -\n\n```ruby\n[0, 1, 1, 2, 1, 1, 3, 1, 1] - [1]\n# => [0, 2, 3]\n[0, 1, 2, 3] - [3, 0]\n# => [1, 2]\n[0, 1, 2] - [4]\n# => [0, 1, 2]\n```\n\n### union\n\n```ruby\n[0, 1, 2, 3].union([4, 5], [6, 7])\n# => [0, 1, 2, 3, 4, 5, 6, 7]\n[0, 1, 1].union([2, 1], [3, 1])\n# => [0, 1, 2, 3]\n[0, 1, 2, 3].union([3, 2], [1, 0])\n# => [0, 1, 2, 3]\n```\n\n### difference\n\n```ruby\n[0, 1, 1, 2, 1, 1, 3, 1, 1].difference([1])\n# => [0, 2, 3]\n[0, 1, 2, 3].difference([3, 0], [1, 3])\n# => [2]\n[0, 1, 2].difference([4])\n# => [0, 1, 2]\n```\n\n### product\n\n```ruby\na = [0, 1, 2]\na1 = [3, 4]\np = a.product(a1)\np.size # => 6 # a.size * a1.size\np # => [[0, 3], [0, 4], [1, 3], [1, 4], [2, 3], [2, 4]]\n```\n"
            },
            {
                "title": "Loops",
                "content": "\n### while loop\n\n```ruby\n# variable count\ncount = 4\n# using while loop\n# here conditional is count i.e. 4\nwhile count >= 1\n  # statements to be executed\n  puts \"Ruby Cheatsheet\"\n  count = count - 1\n  # while loop ends here\nend\n```\n\noutput\n\n```\nRuby Cheatsheet\nRuby Cheatsheet\nRuby Cheatsheet\nRuby Cheatsheet\n```\n\n### for loop\n\n```ruby\n# loop using range as expression\ntext = \"Ruby Cheatsheet\"\n# using for loop with the range\nfor count in 1..5 do\n  puts text\nend\n```\n\noutput\n\n```\nRuby Cheatsheet\nRuby Cheatsheet\nRuby Cheatsheet\nRuby Cheatsheet\nRuby Cheatsheet\n```\n\n### do..while loop\n\n```ruby\n# starting of do..while loop\nloop do\n  puts \"Ruby Cheatsheet\"\n  val = '7'\n  # using boolean expressions\n  if val == '7'\n    break\n  end\n  # ending of ruby do..while loop\nend\n```\n\noutput\n\n```\nRuby Cheatsheet\n```\n\n### until loop\n\n```ruby\nvar = 7\n# here do is optional\nuntil var == 11 do\n  # code to be executed\n  puts var * 10\n  var = var + 1\n  # here loop ends\nend\n```\n\noutput\n\n```\n70\n80\n90\n100\n```\n\n### Break out of loop\n\n```ruby\nsalary = [399, 234, 566, 533, 233]\nsalary.each do |s|\n  break if s == 566\n  puts s\nend\n# output\n# 399\n# 234\n```\n\nBy using the `break` keyword\n\n### skip within loop\n\n```ruby\nsalary = [399, 234, 566, 533, 233]\nsalary.each do |s|\n  next if s == 533\n  puts s\nend\n# output\n# 399\n# 234\n# 566\n# 233\n```\n\nBy using next keyword\n\n### Repeat current iteration\n\n```ruby\ndata = [456, 3000]\nretry_count = 0\nstatus = \"network failure\"\nsum = 0\ndata.each do |d|\n    if retry_count == 3\n        status = \"connection established\"\n        retry_count = 0\n        redo\n    elsif status == \"network failure\" and retry_count < 5\n        puts \"network failure #{retry_count}\"\n        retry_count += 1\n        redo\n    elsif status == \"connection established\"\n        puts d\n        sum += d\n    end\nend\n# output of sum\n# 3456\n```\n\n### Start the cycle again\n\n```ruby\nnumbers = [2, 2, 44, 44]\nsum = 0\nbegin\n    numbers.each do |s|\n        if rand(1..10) == 5\n            puts \"hi 5, let's do it again!\"\n            sum = 0\n            raise \"hi 5\"\n        end\n        puts s\n        sum += s\n    end\nrescue\n    retry\nend\n```\n"
            },
            {
                "title": "Classes",
                "content": "\n### Classes Example \n\n```ruby\nclass Person\n    # when you create a new object, it looks for a method named initialize and executes it, like a constructor in java\n    # def initialize(name, number)\n    #    @name = name\n    #    @number = number\n    # end\n    # instance variable\n    # @name\n    # class variable\n    # @@count\n    # attr_accessor acts as a getter and setter for the following instance attributes\n    attr_accessor :name, :number\n    # class variable must be initialized\n    @@count = 0\n    def self.count\n        @@count\n    end\n    def self.count=(count)\n        @@count = count\n    end\n    def initialize\n        @@count += 1\n    end\nend\n# create an instance of the Person class\np1 = Person.new\n# set attributes of the Person class\np1.name = \"Yukihiro Matsumoto\"\np1.number = 9999999999\n# get attributes of the Person class\nputs \"#{p1.name}\"\nputs \"#{p1.number}\"\nputs \"#{Person.count}\"\n# Yukihiro Matsumoto\n# 9999999999\n# 1\np2 = Person.new\np2.name = \"Yukihiro Matsumoto\"\np2.number = 9999999999\n# get attributes of the Person class\nputs \"#{p2.name}\"\nputs \"#{p2.number}\"\nputs \"#{Person.count}\"\n# Yukihiro Matsumoto\n# 9999999999\n# 2\n# set class variable\nPerson.count = 3\nputs \"#{Person.count}\"\n# 3\n```\n\n### Inherit a class\n\n```ruby\nclass Person\n    attr_accessor :name, :number\nend\n# Inherit methods and properties from parent class using < symbol\nclass Student < Person\n    attr_accessor :id\nend\ns = Student.new\ns.name = \"James Bond\"\ns.number = 700\ns.id = 678\nputs \"#{p.name}\"\nJames Bond\nputs \"#{p.number}\"\n700\nputs \"#{p.id}\"\n678\n```\n\n### Check instance type\n\n```ruby\nclass Vehicle; end\nclass Car < Vehicle; end\nclass Audi < Car; end\ncar = Car.new\ncar.instance_of? Vehicle\nfalse\ncar.instance_of? Car\ntrue\ncar.instance_of? Audi\nfalse\na = 7\na.instance_of? Integer\ntrue\na.instance_of? Numeric\nfalse\n```\n\nReturns true if the object is an instance of the given class and not a subclass or superclass\n\n### Print all method names of a class\n\n```ruby\nputs (String.methods).sort\n# Exclude methods inherited from Object class\nputs (String.methods - Object.public_instance_methods).sort\n```\n\n### Check if a class has a specific method\n\n```ruby\nString.respond_to?(:prepend)\ntrue\nString.respond_to?(:append)\nfalse\n```\n"
            },
            {
                "title": "See Also",
                "content": "\n- [Ruby](https://www.ruby-lang.org/en/) _(ruby-lang.org)_\n- [Ruby Cheatsheet](https://github.com/lifeparticle/Ruby-Cheatsheet) _(github.com)_"
            }
        ]
    },
    {
        "name": "c",
        "title": "C",
        "tags": [],
        "categories": [
            "Programming"
        ],
        "background": "#2a338a",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/c.svg",
        "intro": "C quick reference cheat sheet that provides basic syntax and methods.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### hello.c \n\n```c\n#include <stdio.h>\n\nint main(void) {\n  printf(\"Hello World!\\n\");\n\n  return 0;\n}\n```\n\nCompile `hello.c` file with `gcc`\n\n```bash\n$ gcc -Wall -g hello.c -o hello\n```\n\nRun the compiled binary `hello`\n\n```bash\n$ ./hello\n```\n\nOutput => Hello World!\n\n### Variables \n\n```c\nint myNum = 15;\n\nint myNum2; // do not assign, then assign\nmyNum2 = 15;\n\nint myNum3 = 15; // myNum3 is 15\nmyNum3 = 10;     // myNum3 is now 10\n\nfloat myFloat = 5.99; // floating point number\nchar myLetter = 'D';  // character\n\nint x = 5;\nint y = 6;\nint sum = x + y; // add variables to sum\n\n// declare multiple variables\nint x = 5, y = 6, z = 50;\n```\n\n### Constants\n\n```c\nconst int minutesPerHour = 60;\nconst float PI = 3.14;\n```\n\nBest Practices\n\n```c\nconst int BIRTHYEAR = 1980;\n```\n\n### Comment\n\n```c\n// this is a comment\nprintf(\"Hello World!\\n\"); // Can comment anywhere in file\n\n/*Multi-line comment, print Hello World!\nto the screen, it's awesome */\n```\n\n### Print text\n\n```c\nprintf(\"I am learning C.\\n\");\nint testInteger = 5;\nprintf(\"Number = %d\\n\", testInteger);\n\nfloat f = 5.99; // floating point number\nprintf(\"Value = %f\\n\", f);\n\nshort a = 0b1010110; // binary number\nint b = 02713; // octal number\nlong c = 0X1DAB83; // hexadecimal number\n\n// output in octal form\nprintf(\"a=%ho, b=%o, c=%lo\\n\", a, b, c);\n// output => a=126, b=2713, c=7325603\n\n// Output in decimal form\nprintf(\"a=%hd, b=%d, c=%ld\\n\", a, b, c);\n// output => a=86, b=1483, c=1944451\n\n// output in hexadecimal form (letter lowercase)\nprintf(\"a=%hx, b=%x, c=%lx\\n\", a, b, c);\n// output => a=56, b=5cb, c=1dab83\n\n// Output in hexadecimal (capital letters)\nprintf(\"a=%hX, b=%X, c=%lX\\n\", a, b, c);\n// output => a=56, b=5CB, c=1DAB83\n```\n\n### Control the number of spaces\n\n```c\nint a1 = 20, a2 = 345, a3 = 700;\nint b1 = 56720, b2 = 9999, b3 = 20098;\nint c1 = 233, c2 = 205, c3 = 1;\nint d1 = 34, d2 = 0, d3 = 23;\n\nprintf(\"%-9d %-9d %-9d\\n\", a1, a2, a3);\nprintf(\"%-9d %-9d %-9d\\n\", b1, b2, b3);\nprintf(\"%-9d %-9d %-9d\\n\", c1, c2, c3);\nprintf(\"%-9d %-9d %-9d\\n\", d1, d2, d3);\n```\n\noutput result\n\n```bash\n20        345       700\n56720     9999      20098\n233       205       1\n34        0         23\n```\n\nIn `%-9d`, `d` means to output in `10` base, `9` means to occupy at least `9` characters width, and the width is not\nenough to fill with spaces, `-` means left alignment\n\n### Strings\n\n```c\nchar greetings[] = \"Hello World!\";\nprintf(\"%s\", greetings);\n```\n\nAccess string\n\n```c\nchar greetings[] = \"Hello World!\";\nprintf(\"%c\", greetings[0]);\n```\n\nModify string\n\n```c\nchar greetings[] = \"Hello World!\";\ngreetings[0] = 'J';\n\nprintf(\"%s\", greetings);\n// prints \"Jello World!\"\n```\n\nAnother way to create a string\n\n```c\nchar greetings[] = {'H','e','l','l','\\0'};\n\nprintf(\"%s\", greetings);\n// print \"Hell!\"\n```\n\nCreating String using character pointer (String Literals)\n\n```c\nchar *greetings = \"Hello\";\nprintf(\"%s\", greetings);\n// print \"Hello!\"\n```\n\n**NOTE**: String literals might be stored in read-only section of memory. Modifying a string literal invokes undefined\nbehavior. You can't modify it!\n\n`C` **does not** have a String type, use `char` type and create an `array` of characters\n\n### Condition \n\n```c\nint time = 20;\nif (time < 18) {\n  printf(\"Goodbye!\\n\");\n} else {\n  printf(\"Good evening!\\n\");\n}\n// Output -> \"Good evening!\"\nint time = 22;\nif (time < 10) {\n  printf(\"Good morning!\\n\");\n} else if (time < 20) {\n  printf(\"Goodbye!\\n\");\n} else {\n  printf(\"Good evening!\\n\");\n}\n// Output -> \"Good evening!\"\n```\n\n### Ternary operator \n\n```c\nint age = 20;\n(age > 19) ? printf(\"Adult\\n\") : printf(\"Teenager\\n\");\n```\n\n### Switch\n\n```c\nint day = 4;\n\nswitch (day) {\n  case 3: printf(\"Wednesday\\n\"); break;\n  case 4: printf(\"Thursday\\n\"); break;\n  default:\n    printf(\"Weekend!\\n\");\n}\n// output -> \"Thursday\" (day 4)\n```\n\n### While Loop\n\n```c\nint i = 0;\n\nwhile (i < 5) {\n  printf(\"%d\\n\", i);\n  i++;\n}\n```\n\n**NOTE**: Don't forget to increment the variable used in the condition, otherwise the loop will never end and become an\n\"infinite loop\"!\n\n### Do/While Loop\n\n```c\nint i = 0;\n\ndo {\n  printf(\"%d\\n\", i);\n  i++;\n} while (i < 5);\n```\n\n### For Loop\n\n```c\nfor (int i = 0; i < 5; i++) {\n  printf(\"%d\\n\", i);\n}\n```\n\n### Break out of the loop Break/Continue \n\n```c\nfor (int i = 0; i < 10; i++) {\n  if (i == 4) {\n    break;\n  }\n  printf(\"%d\\n\", i);\n}\n```\n\nBreak out of the loop when `i` is equal to `4`\n\n```c\nfor (int i = 0; i < 10; i++) {\n  if (i == 4) {\n    continue;\n  }\n  printf(\"%d\\n\", i);\n}\n```\n\nExample to skip the value of `4`\n\n### While Break Example\n\n```c\nint i = 0;\n\nwhile (i < 10) {\n  if (i == 4) {\n    break;\n  }\n  printf(\"%d\\n\", i);\n\n  i++;\n}\n```\n\n### While continue example\n\n```c\nint i = 0;\n\nwhile (i < 10) {\n  i++;\n\n  if (i == 4) {\n    continue;\n  }\n  printf(\"%d\\n\", i);\n}\n```\n\n### Arrays \n\n```c\nint myNumbers[] = {25, 50, 75, 100};\n\nprintf(\"%d\", myNumbers[0]);\n// output 25\n```\n\nChange array elements\n\n```c\nint myNumbers[] = {25, 50, 75, 100};\nmyNumbers[0] = 33;\n\nprintf(\"%d\", myNumbers[0]);\n```\n\nLoop through the array\n\n```c\nint myNumbers[] = {25, 50, 75, 100};\nint i;\n\nfor (i = 0; i < 4; i++) {\n  printf(\"%d\\n\", myNumbers[i]);\n}\n```\n\nSet array size\n\n```c\n// Declare an array of four integers:\nint myNumbers[4];\n\n// add element\nmyNumbers[0] = 25;\nmyNumbers[1] = 50;\nmyNumbers[2] = 75;\nmyNumbers[3] = 100;\n```\n\n### Enumeration Enum \n\n```c\nenum week { Mon = 1, Tues, Wed, Thurs, Fri, Sat, Sun };\n```\n\nDefine enum variable\n\n```c\nenum week a, b, c;\nenum week { Mon = 1, Tues, Wed, Thurs, Fri, Sat, Sun } a, b, c;\n```\n\nWith an enumeration variable, you can assign the value in the list to it\n\n```c\nenum week { Mon = 1, Tues, Wed, Thurs, Fri, Sat, Sun };\nenum week a = Mon, b = Wed, c = Sat;\n// or\nenum week{ Mon = 1, Tues, Wed, Thurs, Fri, Sat, Sun } a = Mon, b = Wed, c = Sat;\n```\n\n### Enumerate sample applications\n\n```c\nenum week {Mon = 1, Tues, Wed, Thurs} day;\n\nscanf(\"%d\", &day);\n\nswitch(day) {\n  case Mon: puts(\"Monday\"); break;\n  case Tues: puts(\"Tuesday\"); break;\n  case Wed: puts(\"Wednesday\"); break;\n  case Thurs: puts(\"Thursday\"); break;\n  default: puts(\"Error!\");\n}\n```\n\n### User input\n\n```c\n// Create an integer variable to store the number we got from the user\nint myNum;\n\n// Ask the user to enter a number\nprintf(\"Enter a number: \");\n\n// Get and save the number entered by the user\nscanf(\"%d\", &myNum);\n\n// Output the number entered by the user\nprintf(\"The number you entered: %d\\n\", myNum);\n```\n\n### User input string\n\n```c\n// create a string\nchar firstName[30];\n// Ask the user to enter some text\nprintf(\"Enter your name: \");\n// get and save the text\nscanf(\"%s\", &firstName);\n// output text\nprintf(\"Hello %s.\\n\", firstName);\n```\n\n### memory address\n\nWhen a variable is created, it is assigned a memory address\n\n```c\nint myAge = 43;\n\nprintf(\"%p\", &myAge);\n// Output: 0x7ffe5367e044\n```\n\nTo access it, use the reference operator (`&`)\n\n### create pointer\n\n```c\nint myAge = 43; // an int variable\nprintf(\"%d\\n\", myAge); // output the value of myAge(43)\n\n// Output the memory address of myAge (0x7ffe5367e044)\nprintf(\"%p\\n\", &myAge);\n```\n\n### pointer variable \n\n```c\nint myAge = 43; // an int variable\nint*ptr = &myAge; // pointer variable named ptr, used to store the address of myAge\n\nprintf(\"%d\\n\", myAge); // print the value of myAge (43)\n\nprintf(\"%p\\n\", &myAge); // output the memory address of myAge (0x7ffe5367e044)\nprintf(\"%p\\n\", ptr); // use the pointer (0x7ffe5367e044) to output the memory address of myAge\n```\n\n### Dereference\n\n```c\nint myAge = 43; // variable declaration\nint*ptr = &myAge; // pointer declaration\n\n// Reference: output myAge with a pointer\n// memory address (0x7ffe5367e044)\nprintf(\"%p\\n\", ptr);\n// dereference: output the value of myAge with a pointer (43)\nprintf(\"%d\\n\", *ptr);\n```\n"
            },
            {
                "title": "Operators",
                "content": "\n### Arithmetic Operators\n\n```c\nint myNum = 100 + 50;\nint sum1 = 100 + 50; // 150 (100 + 50)\nint sum2 = sum1 + 250; // 400 (150 + 250)\nint sum3 = sum2 + sum2; // 800 (400 + 400)\n```\n\n---\n\n| Operator | Name      | Example |\n| -------- | --------- | ------- |\n| `+`      | Add       | `x + y` |\n| `-`      | Subtract  | `x - y` |\n| `*`      | Multiply  | `x * y` |\n| `/`      | Divide    | `x / y` |\n| `%`      | Modulo    | `x % y` |\n| `++`     | Increment | `++x`   |\n| `--`     | Decrement | `--x`   |\n\n### Assignment operator\n\n| Example              | As                        |\n| -------------------- | ------------------------- |\n| x `=` 5              | x `=` 5                   |\n| x `+=` 3             | x `=` x `+` 3             |\n| x `-=` 3             | x `=` x `-` 3             |\n| x `*=` 3             | x `=` x `*` 3             |\n| x `/=` 3             | x `=` x `/` 3             |\n| x `%=` 3             | x `=` x `%` 3             |\n| x `&=` 3             | x `=` x `&` 3             |\n| x <code>\\|=</code> 3 | x `=` x <code>\\|</code> 3 |\n| x `^=` 3             | x `=` x `^` 3             |\n| x `>>=` 3            | x `=` x `>>` 3            |\n| x `<<=` 3            | x `=` x `<<` 3            |\n\n### Comparison Operators\n\n```c\nint x = 5;\nint y = 3;\n\nprintf(\"%d\", x > y);\n// returns 1 (true) because 5 is greater than 3\n```\n\n---\n\n| Symbol | Name                     | Example  |\n| ------ | ------------------------ | -------- |\n| `==`   | equals                   | x `==` y |\n| `!=`   | not equal to             | x `!=` y |\n| `>`    | greater than             | x `>` y  |\n| `<`    | less than                | x `<` y  |\n| `>=`   | greater than or equal to | x `>=` y |\n| `<=`   | less than or equal to    | x `<=` y |\n\nComparison operators are used to compare two values\n\n### Logical Operators \n\n| Symbol            | Name          | Description                                   | Example                       |\n| ----------------- | ------------- | --------------------------------------------- | ----------------------------- |\n| `&&`              | `and` logical | returns true if both statements are true      | `x < 5 && x < 10`             |\n| <code>\\|\\|</code> | `or` logical  | returns true if one of the statements is true | <code>x < 5 \\|\\| x < 4</code> |\n| `!`               | `not` logical | Invert result, return false if true           | `!(x < 5 && x < 10)`          |\n\n\n\n### Operator Examples \n\n```c\nunsigned int a = 60; /*60 = 0011 1100 */\nunsigned int b = 13; /*13 = 0000 1101 */\nint c = 0;\n\nc = a & b; /*12 = 0000 1100 */\nprintf(\"Line 1 -the value of c is %d\\n\", c);\n\nc = a | b; /*61 = 0011 1101 */\nprintf(\"Line 2 -the value of c is %d\\n\", c);\nc = a ^ b; /*49 = 0011 0001 */\nprintf(\"Line 3 -the value of c is %d\\n\", c);\nc = ~a; /*-61 = 1100 0011 */\nprintf(\"Line 4 -The value of c is %d\\n\", c);\nc = a << 2; /*240 = 1111 0000 */\nprintf(\"Line 5 -the value of c is %d\\n\", c);\nc = a >> 2; /*15 = 0000 1111 */\nprintf(\"Line 6 -The value of c is %d\\n\", c);\n```\n\n### Bitwise operators \n\n| Operator        | Description                                                     | Instance                                              |\n| :-------------- | :-------------------------------------------------------------- | :---------------------------------------------------- |\n| `&`             | Bitwise AND operation, \"AND\" operation by binary digits         | `(A & B)` will get `12` which is 0000 1100            |\n| <code>\\|</code> | Bitwise OR operator, \"or\" operation by binary digit             | <code>(A \\| B)</code> will get`61` which is 0011 1101 |\n| `^`             | XOR operator, perform \"XOR\" operation by binary digits          | `(A ^ B)` will get `49` which is 0011 0001            |\n| `~`             | Inversion operator, perform \"inversion\" operation by binary bit | `(~A)` will get `-61` which is 1100 0011              |\n| `<<`            | binary left shift operator                                      | `A << 2` will get `240` which is 1111 0000            |\n| `>>`            | binary right shift operator                                     | `A >> 2` will get `15` which is 0000 1111             |\n\n\n"
            },
            {
                "title": "Data Types",
                "content": "\n### Basic data types \n\n| Data Type            | Size             | Range                              | Description                         |\n| -------------------- | ---------------- | ---------------------------------- | :---------------------------------- |\n| `char`               | 1 byte           | `\u2212128` ~ `127`                     | single character/alphanumeric/ASCII |\n| `signed char`        | 1 byte           | `\u2212128` ~ `127`                     |                                     |\n| `unsigned char`      | 1 byte           | `0` ~ `255`                        |                                     |\n| `int`                | `2` to `4` bytes | `\u221232,768` ~ `32,767`               | store integers                      |\n| `signed int`         | 2 bytes          | `\u221232,768` ~ `32,767`               |                                     |\n| `unsigned int`       | 2 bytes          | `0` ~ `65,535`                     |                                     |\n| `short int`          | 2 bytes          | `\u221232,768` ~ `32,767`               |                                     |\n| `signed short int`   | 2 bytes          | `\u221232,768` ~ `32,767`               |                                     |\n| `unsigned short int` | 2 bytes          | `0` ~ `65,535`                     |                                     |\n| `long int`           | 4 bytes          | `-2,147,483,648` ~ `2,147,483,647` |                                     |\n| `signed long int`    | 4 bytes          | `-2,147,483,648` ~ `2,147,483,647` |                                     |\n| `unsigned long int`  | 4 bytes          | `0` ~ `4,294,967,295`              |                                     |\n| `float`              | 4 bytes          | `3.4E-38` ~ `3.4E+38`              |                                     |\n| `double`             | 8 bytes          | `1.7E-308` ~ `1.7E+308`            |                                     |\n| `long double`        | 10 bytes         | `3.4E-4932` ~ `1.1E+4932`          |                                     |\n\n\n\n### Data types\n\n```c\n// create variables\nint myNum = 5; // integer\nfloat myFloatNum = 5.99; // floating point number\nchar myLetter = 'D'; // string\n// High precision floating point data or numbers\ndouble myDouble = 3.2325467;\n// print output variables\nprintf(\"%d\\n\", myNum);\nprintf(\"%f\\n\", myFloatNum);\nprintf(\"%c\\n\", myLetter);\nprintf(\"%lf\\n\", myDouble);\n```\n\n---\n\n| Data Type | Description                          |\n| :-------- | :----------------------------------- |\n| `char`    | character type                       |\n| `short`   | short integer                        |\n| `int`     | integer type                         |\n| `long`    | long integer                         |\n| `float`   | single-precision floating-point type |\n| `double`  | double-precision floating-point type |\n| `void`    | no type                              |\n\n### Basic format specifiers\n\n| Format Specifier | Data Type                                             |\n| ---------------- | :---------------------------------------------------- |\n| `%d` or `%i`     | `int` integer                                         |\n| `%f`             | `float` single-precision decimal type                 |\n| `%lf`            | `double` high precision floating point data or number |\n| `%c`             | `char` character                                      |\n| `%s`             | for `strings` strings                                 |\n\n\n\n### Separate base format specifiers\n\n| Format      | Short         | Int         | Long          |\n| ----------- | ------------- | ----------- | :------------ |\n| Octal       | `%ho`         | `%o`        | `%lo`         |\n| Decimal     | `%hd`         | `%d`        | `%ld`         |\n| Hexadecimal | `%hx` / `%hX` | `%x` / `%X` | `%lx` / `%lX` |\n\n\n\n### Data format example\n\n```c\nint myNum = 5;\nfloat myFloatNum = 5.99; // floating point number\nchar myLetter = 'D';     // string\n// print output variables\nprintf(\"%d\\n\", myNum);\nprintf(\"%f\\n\", myFloatNum);\nprintf(\"%c\\n\", myLetter);\n```\n"
            },
            {
                "title": "C Preprocessor",
                "content": "\n### Preprocessor Directives \n\n| Directive  | Description                                                          |\n| ---------- | :------------------------------------------------------------------- |\n| `#define`  | define a macro                                                       |\n| `#include` | include a source code file                                           |\n| `#undef`   | undefined macro                                                      |\n| `#ifdef`   | Returns true if the macro is defined                                 |\n| `#ifndef`  | Returns true if the macro is not defined                             |\n| `#if`      | Compile the following code if the given condition is true            |\n| `#else`    | Alternative to `#if`                                                 |\n| `#elif`    | If the `#if` condition is false, the current condition is `true`     |\n| `#endif`   | End a `#if...#else` conditional compilation block                    |\n| `#error`   | Print an error message when standard error is encountered            |\n| `#pragma`  | Issue special commands to the compiler using the standardized method |\n\n\n\n```c\n// replace all MAX_ARRAY_LENGTH with 20\n#define MAX_ARRAY_LENGTH 20\n// Get stdio.h from the system library\n#include <stdio.h>\n// Get myheader.h in the local directory\n#include \"myheader.h\"\n#undef FILE_SIZE\n#define FILE_SIZE 42 // undefine and define to 42\n```\n\n### Predefined macros \n\n| Macro      | Description                                                           |\n| ---------- | :-------------------------------------------------------------------- |\n| `__DATE__` | The current date, a character constant in the format \"MMM DD YYYY\"    |\n| `__TIME__` | The current time, a character constant in the format \"HH:MM:SS\"       |\n| `__FILE__` | This will contain the current filename, a string constant             |\n| `__LINE__` | This will contain the current line number, a decimal constant         |\n| `__STDC__` | Defined as `1` when the compiler compiles against the `ANSI` standard |\n\n\n\n`ANSI C` defines a number of macros that you can use, but you cannot directly modify these predefined macros\n\n#### Predefined macro example\n\n```c\n#include <stdio.h>\n\nint main(void) {\n  printf(\"File: %s\\n\", __FILE__);\n  printf(\"Date: %s\\n\", __DATE__);\n  printf(\"Time: %s\\n\", __TIME__);\n  printf(\"Line: %d\\n\", __LINE__);\n  printf(\"ANSI: %d\\n\", __STDC__);\n}\n```\n\n### Macro continuation operator (\\\\)\n\nA macro is usually written on a single line.\n\n```c\n#define message_for(a, b) \\\n    printf(#a \" and \" #b \": We love you!\\n\")\n```\n\nIf the macro is too long to fit on a single line, use the macro continuation operator `\\`\n\n### String Constantization Operator (#)\n\n```c\n#include <stdio.h>\n\n#define message_for(a, b) \\\n  printf(#a \" and \" #b \": We love you!\\n\")\n\nint main(void) {\n  message_for(Carole, Debra);\n\n  return 0;\n}\n```\n\nWhen the above code is compiled and executed, it produces the following result:\n\n```\nCarole and Debra: We love you!\n```\n\nWhen you need to convert a macro parameter to a string constant, use the string constant operator `#`\n\n### tag paste operator (##)\n\n```c\n#include <stdio.h>\n\n#define tokenpaster(n) printf (\"Token \" #n \" = %d\\n\", token##n)\n\nint main(void) {\n  int token34 = 40;\n  tokenpaster(34);\n\n  return 0;\n}\n```\n\n### defined() operator\n\n```c\n#include <stdio.h>\n\n#if !defined (MESSAGE)\n   #define MESSAGE \"You wish!\"\n#endif\n\nint main(void) {\n  printf(\"Here is the message: %s\\n\", MESSAGE);\n\n  return 0;\n}\n```\n\n### Parameterized macros\n\n```c\nint square(int x) {\n  return x * x;\n}\n```\n\nThe macro rewrites the above code as follows:\n\n```c\n#define square(x) ( (x) * (x) )\n```\n\nNo spaces are allowed between the macro name and the opening parenthesis\n\n```c\n#include <stdio.h>\n#define MAX(x,y) ( (x) > (y) ? (x) : (y) )\n\nint main(void) {\n  printf(\"Max between 20 and 10 is %d\\n\", MAX(10, 20));\n\n  return 0;\n}\n```\n"
            },
            {
                "title": "C Function",
                "content": "\n### Function declaration and definition \n\n```c\nint main(void) {\n  printf(\"Hello World!\\n\");\n\n  return 0;\n}\n```\n\nThe function consists of two parts\n\n```c\nvoid myFunction() { // declaration declaration\n  // function body (code to be executed) (definition)\n}\n```\n\n---\n\n- `Declaration` declares the function name, return type and parameters _(if any)_\n- `Definition` function body _(code to execute)_\n\n---\n\n```c\n// function declaration\nvoid myFunction();\n// main method\nint main() {\n  myFunction(); // --> call the function\n\n  return 0;\n}\n\nvoid myFunction() {// Function definition\n  printf(\"Good evening!\\n\");\n}\n```\n\n### Call function\n\n```c\n// create function\nvoid myFunction() {\n  printf(\"Good evening!\\n\");\n}\n\nint main() {\n  myFunction(); // call the function\n  myFunction(); // can be called multiple times\n\n  return 0;\n}\n// Output -> \"Good evening!\"\n// Output -> \"Good evening!\"\n```\n\n### Function parameters\n\n```c\nvoid myFunction(char name[]) {\n  printf(\"Hello %s\\n\", name);\n}\n\nint main() {\n  myFunction(\"Liam\");\n  myFunction(\"Jenny\");\n\n  return 0;\n}\n// Hello Liam\n// Hello Jenny\n```\n\n### Multiple parameters\n\n```c\nvoid myFunction(char name[], int age) {\n  printf(\"Hi %s, you are %d years old.\\n\",name,age);\n}\nint main() {\n  myFunction(\"Liam\", 3);\n  myFunction(\"Jenny\", 14);\n\n  return 0;\n}\n// Hi Liam you are 3 years old.\n// Hi Jenny you are 14 years old.\n```\n\n### Return value \n\n```c\nint myFunction(int x) {\n  return 5 + x;\n}\n\nint main() {\n  printf(\"Result: %d\\n\", myFunction(3));\n  return 0;\n}\n// output 8 (5 + 3)\n```\n\nTwo parameters\n\n```c\nint myFunction(int x, int y) {\n  return x + y;\n}\n\nint main() {\n  printf(\"Result: %d\\n\", myFunction(5, 3));\n  // store the result in a variable\n  int result = myFunction(5, 3);\n  printf(\"Result = %d\\n\", result);\n\n  return 0;\n}\n// result: 8 (5 + 3)\n// result = 8 (5 + 3)\n```\n\n### Recursive example\n\n```c\nint sum(int k);\n\nint main() {\n  int result = sum(10);\n  printf(\"%d\\n\", result);\n\n  return 0;\n}\n\nint sum(int k) {\n  if (k > 0) {\n    return k + sum(k -1);\n  } else {\n    return 0;\n  }\n}\n```\n\n### Mathematical functions\n\n```c\n#include <math.h>\n\nvoid main(void) {\n  printf(\"%f\\n\", sqrt(16)); // square root\n  printf(\"%f\\n\", ceil(1.4)); // round up (round)\n  printf(\"%f\\n\", floor(1.4)); // round down (round)\n  printf(\"%f\\n\", pow(4, 3)); // x(4) to the power of y(3)\n}\n```\n\n---\n\n- `abs(x)` absolute value\n- `acos(x)` arc cosine value\n- `asin(x)` arc sine\n- `atan(x)` arc tangent\n- `cbrt(x)` cube root\n- `cos(x)` cosine\n- the value of `exp(x)` Ex\n- `sin(x)` the sine of x\n- tangent of `tan(x)` angle\n"
            },
            {
                "title": "C Structures",
                "content": "\n### Create structure\n\n```c\nstruct MyStructure { // structure declaration\n  int myNum; // member (int variable)\n  char myLetter; // member (char variable)\n}; // end the structure with a semicolon\n```\n\nCreate a struct variable called `s1`\n\n```c{7}\nstruct myStructure {\n  int myNum;\n  char myLetter;\n};\n\nint main() {\n  struct myStructure s1;\n\n  return 0;\n}\n```\n\n### Strings in the structure\n\n```c{9}\nstruct myStructure {\n  int myNum;\n  char myLetter;\n  char myString[30]; // String\n};\n\nint main() {\n  struct myStructure s1;\n  strcpy(s1. myString, \"Some text\");\n  // print value\n  printf(\"My string: %s\\n\", s1.myString);\n\n  return 0;\n}\n```\n\nAssigning values to strings using the `strcpy` function\n\n### Accessing structure members \n\n```c{11,12,16}\n// create a structure called myStructure\nstruct myStructure {\n  int myNum;\n  char myLetter;\n};\n\nint main() {\n  // Create a structure variable called myStructure called s1\n  struct myStructure s1;\n  // Assign values \u200b\u200bto the members of s1\n  s1.myNum = 13;\n  s1.myLetter = 'B';\n\n  // Create a structure variable of myStructure called s2\n  // and assign it a value\n  struct myStructure s2 = {13, 'B'};\n  // print value\n  printf(\"My number: %d\\n\", s1.myNum);\n  printf(\"My letter: %c\\n\", s1.myLetter);\n\n  return 0;\n}\n```\n\nCreate different structure variables\n\n```c\nstruct myStructure s1;\nstruct myStructure s2;\n// Assign values \u200b\u200bto different structure variables\ns1.myNum = 13;\ns1.myLetter = 'B';\n\ns2.myNum = 20;\ns2.myLetter = 'C';\n```\n\n### Copy structure\n\n```c{6}\nstruct myStructure s1 = {\n  13, 'B', \"Some text\"\n};\n\nstruct myStructure s2;\ns2 = s1;\n```\n\nIn the example, the value of `s1` is copied to `s2`\n\n### Modify value\n\n```c{6,7}\n// Create a struct variable and assign it a value\nstruct myStructure s1 = {\n  13, 'B'\n};\n// modify the value\ns1.myNum = 30;\ns1.myLetter = 'C';\n// print value\nprintf(\"%d %c\",\n    s1.myNum,\n    s1.myLetter);\n```\n"
            },
            {
                "title": "File Processing",
                "content": "\n### File processing function\n\n| Function    | Description                                       |\n| ----------- | :------------------------------------------------ |\n| `fopen()`   | `open` a new or existing file                     |\n| `fprintf()` | write data to `file`                              |\n| `fscanf()`  | `read` data from a file                           |\n| `fputc()`   | write a character to `file`                       |\n| `fgetc()`   | `read` a character from a file                    |\n| `fclose()`  | `close` the file                                  |\n| `fseek()`   | set the file pointer to `the given position`      |\n| `fputw()`   | Write an integer `to` a file                      |\n| `fgetw()`   | `read` an integer from a file                     |\n| `ftell()`   | returns the current `position`                    |\n| `rewind()`  | set the file pointer to the beginning of the file |\n\n\n\nThere are many functions in the C library to `open`/`read`/`write`/`search` and `close` files\n\n### Open mode parameter\n\n| Mode  | Description                                                                                                 |\n| ----- | :---------------------------------------------------------------------------------------------------------- |\n| `r`   | Open a text file in `read` mode, allowing the file to be read                                               |\n| `w`   | Open a text file in `write` mode, allowing writing to the file                                              |\n| `a`   | Open a text file in `append` mode<br /><small>If the file does not exist, a new one will be created</small> |\n| `r+`  | Open a text file in `read-write` mode, allowing reading and writing of the file                             |\n| `w+`  | Open a text file in `read-write` mode, allowing reading and writing of the file                             |\n| `a+`  | Open a text file in `read-write` mode, allowing reading and writing of the file                             |\n| `rb`  | Open a binary file in `read` mode                                                                           |\n| `wb`  | Open binary file in `write` mode                                                                            |\n| `ab`  | Open a binary file in `append` mode                                                                         |\n| `rb+` | open binary file in `read-write` mode                                                                       |\n| `wb+` | Open binary file in `read-write` mode                                                                       |\n| `ab+` | open binary file in `read-write` mode                                                                       |\n\n\n\n### Open the file: fopen()\n\n```c{6}\n#include <stdio.h>\n\nvoid main() {\n  FILE *fp;\n  char ch;\n\n  fp = fopen(\"file_handle.c\", \"r\");\n\n  while (1) {\n    ch = fgetc(fp);\n    if (ch == EOF)\n      break;\n    printf(\"%c\", ch);\n  }\n  fclose(fp);\n}\n```\n\nAfter performing all operations on the file, the file must be closed with `fclose()`\n\n### Write to file: fprintf()\n\n```c{7}\n#include <stdio.h>\n\nvoid main() {\n  FILE *fp;\n  fp = fopen(\"file.txt\", \"w\"); // open the file\n\n  // write data to file\n  fprintf(fp, \"Hello file for fprintf..\\n\");\n  fclose(fp); // close the file\n}\n```\n\n### Read the file: fscanf()\n\n```c{6}\n#include <stdio.h>\n\nvoid main() {\n  FILE *fp;\n\n  char buff[255]; // Create a char array to store file data\n  fp = fopen(\"file.txt\", \"r\");\n\n  while(fscanf(fp, \"%s\", buff) != EOF) {\n    printf(\"%s \", buff);\n  }\n  fclose(fp);\n}\n```\n\n### Write to file: fputc()\n\n```c{6}\n#include <stdio.h>\n\nvoid main() {\n  FILE *fp;\n  fp = fopen(\"file1.txt\", \"w\"); // open the file\n  fputc('a',fp); // write a single character to the file\n  fclose(fp); // close the file\n}\n```\n\n### Read the file: fgetc()\n\n```c{8}\n#include <stdio.h>\n#include <conio.h>\n\nvoid main() {\n  FILE *fp;\n  char c;\n\n  clrscr();\n\n  fp = fopen(\"myfile.txt\", \"r\");\n\n  while( (c = fgetc(fp) ) != EOF) {\n    printf(\"%c\", c);\n  }\n  fclose(fp);\n\n  getch();\n}\n```\n\n### Write to file: fputs()\n\n```c {8}\n#include<stdio.h>\n#include<conio.h>\n\nvoid main() {\n  FILE *fp;\n\n  clrscr();\n\n  fp = fopen(\"myfile2.txt\",\"w\");\n  fputs(\"hello c programming\",fp);\n  fclose(fp);\n\n  getch();\n}\n```\n\n### Read files: fgets()\n\n```c {10}\n#include<stdio.h>\n#include<conio.h>\n\nvoid main() {\n  FILE *fp;\n  char text[300];\n\n  clrscr();\n\n  fp = fopen(\"myfile2.txt\", \"r\");\n  printf(\"%s\", fgets(text, 200, fp));\n  fclose(fp);\n\n  getch();\n}\n```\n\n### fseek()\n\n```c{8}\n#include <stdio.h>\n\nvoid main(void) {\n  FILE *fp;\n\n  fp = fopen(\"myfile.txt\",\"w+\");\n  fputs(\"This is Book\", fp);\n\n  // Set file pointer to the given position\n  fseek(fp, 7, SEEK_SET);\n\n  fputs(\"Kenny Wong\", fp);\n  fclose(fp);\n}\n```\n\nSet the file pointer to the given position\n\n### rewind()\n\n```c{11}\n#include <stdio.h>\n#include <conio.h>\n\nvoid main() {\n  FILE *fp;\n  char c;\n\n  clrscr();\n\n  fp = fopen(\"file.txt\", \"r\");\n\n  while( (c = fgetc(fp) ) != EOF) {\n    printf(\"%c\", c);\n  }\n\n  rewind(fp); // move the file pointer to the beginning of the file\n\n  while( (c = fgetc(fp) ) != EOF) {\n    printf(\"%c\", c);\n  }\n  fclose(fp);\n\n  getch();\n}\n// output\n// Hello World! Hello World!\n```\n\n### ftell()\n\n```c{11}\n#include <stdio.h>\n#include <conio.h>\n\nvoid main () {\n   FILE *fp;\n   int length;\n\n   clrscr();\n\n   fp = fopen(\"file.txt\", \"r\");\n\n   fseek(fp, 0, SEEK_END);\n   length = ftell(fp); // return current position\n   fclose(fp);\n\n   printf(\"File size: %d bytes\", length);\n\n   getch();\n}\n// output\n// file size: 18 bytes\n```"
            }
        ]
    },
    {
        "name": "cpp",
        "title": "C++",
        "tags": [],
        "categories": [
            "Programming"
        ],
        "background": "#6d94c7",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/cpp.svg",
        "intro": "C++ quick reference cheat sheet that provides basic syntax and methods.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### hello.cpp\n\n```cpp\n#include <iostream>\n\nint main() {\n    std::cout << \"Hello CheatSheets\\n\";\n    return 0;\n}\n```\n\nCompiling and running\n\n```shell script\n$ g++ hello.cpp -o hello\n$ ./hello\nHello CheatSheets\n```\n\n### Variables\n\n```cpp\nint number = 5;       // Integer\nfloat f = 0.95;       // Floating number\ndouble PI = 3.14159;  // Floating number\nchar yes = 'Y';       // Character\nstd::string s = \"ME\"; // String (text)\nbool isRight = true;  // Boolean\n\n// Constants\nconst float RATE = 0.8;\n```\n\n---\n\n```cpp\nint age {25};         // Since C++11\nstd::cout << age;     // Print 25\n```\n\n### Primitive Data Types\n\n| Data Type | Size           | Range               |\n| --------- | -------------- | ------------------- |\n| `int`     | 4 bytes        | -2^31^ ^to^ 2^31^-1 |\n| `float`   | 4 bytes        | _N/A_               |\n| `double`  | 8 bytes        | _N/A_               |\n| `char`    | 1 byte         | -128 ^to^ 127       |\n| `bool`    | 1 byte         | true / false        |\n| `void`    | _N/A_          | _N/A_               |\n| `wchar_t` | 2 ^or^ 4 bytes | 1 wide character    |\n\n\n\n### User Input\n\n```cpp\nint num;\n\nstd::cout << \"Type a number: \";\nstd::cin >> num;\n\nstd::cout << \"You entered \" << num;\n```\n\n### Swap\n\n```cpp\nint a = 5, b = 10;\nstd::swap(a, b);\n\n// Outputs: a=10, b=5\nstd::cout << \"a=\" << a << \", b=\" << b;\n```\n\n### Comments\n\n```cpp\n// A single one line comment in C++\n\n/* This is a multiple line comment\n   in C++ */\n```\n\n### If statement\n\n```cpp\nif (a == 10) {\n    // do something\n}\n```\n\n\n\n### Loops\n\n```cpp\nfor (int i = 0; i < 10; i++) {\n    std::cout << i << \"\\n\";\n}\n```\n\n\n\n### Functions\n\n```cpp\n#include <iostream>\n\nvoid hello(); // Declaring\n\nint main() {  // main function\n    hello();    // Calling\n}\n\nvoid hello() { // Defining\n    std::cout << \"Hello CheatSheets!\\n\";\n}\n```\n\n\n\n### References\n\n```cpp\nint i = 1;\nint& ri = i; // ri is a reference to i\n\nri = 2; // i is now changed to 2\nstd::cout << \"i=\" << i;\n\ni = 3;   // i is now changed to 3\nstd::cout << \"ri=\" << ri;\n```\n\n`ri` and `i` refer to the same memory location.\n\n### Namespaces\n\n```cpp\n#include <iostream>\nnamespace ns1 {int val(){return 5;}}\nint main()\n{\n    std::cout << ns1::val();\n}\n```\n\n---\n\n```cpp\n#include <iostream>\nnamespace ns1 {int val(){return 5;}}\nusing namespace ns1;\nusing namespace std;\nint main()\n{\n    cout << val();\n}\n```\n\nNamespaces allow global identifiers under a name\n"
            },
            {
                "title": "C++ Arrays",
                "content": "\n### Declaration\n\n```cpp\nstd::array<int, 3> marks; // Definition\nmarks[0] = 92;\nmarks[1] = 97;\nmarks[2] = 98;\n\n// Define and initialize\nstd::array<int, 3> = {92, 97, 98};\n\n// With empty members\nstd::array<int, 3> marks = {92, 97};\nstd::cout << marks[2]; // Outputs: 0\n```\n\n### Manipulation\n\n```cpp\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n| 92  | 97  | 98  | 99  | 98  | 94  |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n   0     1     2     3     4     5\n```\n\n---\n\n```cpp\nstd::array<int, 6> marks = {92, 97, 98, 99, 98, 94};\n\n// Print first element\nstd::cout << marks[0];\n\n// Change 2nd element to 99\nmarks[1] = 99;\n\n// Take input from the user\nstd::cin >> marks[2];\n```\n\n### Displaying\n\n```cpp\nchar ref[5] = {'R', 'e', 'f'};\n\n// Range based for loop\nfor (const int &n : ref) {\n    std::cout << std::string(1, n);\n}\n\n// Traditional for loop\nfor (int i = 0; i < sizeof(ref); ++i) {\n    std::cout << ref[i];\n}\n```\n\n### Multidimensional\n\n```cpp\n     j0   j1   j2   j3   j4   j5\n   \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\ni0 | 1  | 2  | 3  | 4  | 5  | 6  |\n   \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524\ni1 | 6  | 5  | 4  | 3  | 2  | 1  |\n   \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n```\n\n---\n\n```cpp\nint x[2][6] = {\n    {1,2,3,4,5,6}, {6,5,4,3,2,1}\n};\nfor (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 6; ++j) {\n        std::cout << x[i][j] << \" \";\n    }\n}\n// Outputs: 1 2 3 4 5 6 6 5 4 3 2 1\n```\n"
            },
            {
                "title": "C++ Conditionals",
                "content": "\n### If Clause\n\n```cpp\nif (a == 10) {\n    // do something\n}\n```\n\n---\n\n```cpp\nint number = 16;\n\nif (number % 2 == 0)\n{\n    std::cout << \"even\";\n}\nelse\n{\n    std::cout << \"odd\";\n}\n\n// Outputs: even\n```\n\n### Else if Statement\n\n```cpp\nint score = 99;\nif (score == 100) {\n    std::cout << \"Superb\";\n}\nelse if (score >= 90) {\n    std::cout << \"Excellent\";\n}\nelse if (score >= 80) {\n    std::cout << \"Very Good\";\n}\nelse if (score >= 70) {\n    std::cout << \"Good\";\n}\nelse if (score >= 60)\n    std::cout << \"OK\";\nelse\n    std::cout << \"What?\";\n```\n\n### Operators \n\n#### Relational Operators\n\n|          |                              |\n| -------- | ---------------------------- |\n| `a == b` | a is equal to b              |\n| `a != b` | a is NOT equal to b          |\n| `a < b`  | a is less than b             |\n| `a > b`  | a is greater b               |\n| `a <= b` | a is less than or equal to b |\n| `a >= b` | a is greater or equal to b   |\n\n#### Assignment Operators\n\n| Example  | Equivalent to    |\n| -------- | ---------------- |\n| `a += b` | _Aka_ a = a + b  |\n| `a -= b` | _Aka_ a = a - b  |\n| `a *= b` | _Aka_ a = a \\* b |\n| `a /= b` | _Aka_ a = a / b  |\n| `a %= b` | _Aka_ a = a % b  |\n\n#### Logical Operators\n\n| Example                     | Meaning                |\n| --------------------------- | ---------------------- |\n| `exp1 && exp2`              | Both are true _(AND)_  |\n| <code>exp1 \\|\\| exp2</code> | Either is true _(OR)_  |\n| `!exp`                      | `exp` is false _(NOT)_ |\n\n#### Bitwise Operators\n\n| Operator            | Description             |\n| ------------------- | ----------------------- |\n| `a & b`             | Binary AND              |\n| <code>a \\| b</code> | Binary OR               |\n| `a ^ b`             | Binary XOR              |\n| `~ a`               | Binary One's Complement |\n| `a << b`            | Binary Shift Left       |\n| `a >> b`            | Binary Shift Right      |\n\n### Ternary Operator\n\n```\n           \u250c\u2500\u2500 True \u2500\u2500\u2510\nResult = Condition ? Exp1 : Exp2;\n           \u2514\u2500\u2500\u2500\u2500\u2500 False \u2500\u2500\u2500\u2500\u2500\u2518\n```\n\n---\n\n```cpp\nint x = 3, y = 5, max;\nmax = (x > y) ? x : y;\n\n// Outputs: 5\nstd::cout << max << std::endl;\n```\n\n---\n\n```cpp\nint x = 3, y = 5, max;\nif (x > y) {\n    max = x;\n} else {\n    max = y;\n}\n// Outputs: 5\nstd::cout << max << std::endl;\n```\n\n### Switch Statement\n\n```cpp\nint num = 2;\nswitch (num) {\n    case 0:\n        std::cout << \"Zero\";\n        break;\n    case 1:\n        std::cout << \"One\";\n        break;\n    case 2:\n        std::cout << \"Two\";\n        break;\n    case 3:\n        std::cout << \"Three\";\n        break;\n    default:\n        std::cout << \"What?\";\n        break;\n}\n```\n"
            },
            {
                "title": "C++ Loops",
                "content": "\n### While\n\n```cpp\nint i = 0;\nwhile (i < 6) {\n    std::cout << i++;\n}\n\n// Outputs: 012345\n```\n\n### Do-while\n\n```cpp\nint i = 1;\ndo {\n    std::cout << i++;\n} while (i <= 5);\n\n// Outputs: 12345\n```\n\n### Continue statements\n\n```cpp\nfor (int i = 0; i < 10; i++) {\n    if (i % 2 == 0) {\n        continue;\n    }\n    std::cout << i;\n} // Outputs: 13579\n```\n\n### Infinite loop\n\n```cpp\nwhile (true) { // true or 1\n    std::cout << \"infinite loop\";\n}\n```\n\n---\n\n```cpp\nfor (;;) {\n    std::cout << \"infinite loop\";\n}\n```\n\n---\n\n```cpp\nfor(int i = 1; i > 0; i++) {\n    std::cout << \"infinite loop\";\n}\n```\n\n### for_each (Since C++11)\n\n```cpp\n#include <iostream>\n\nint main()\n{\n    auto print = [](int num) { std::cout << num << std::endl; };\n\n    std::array<int, 4> arr = {1, 2, 3, 4};\n    std::for_each(arr.begin(), arr.end(), print);\n    return 0;\n}\n```\n\n### Range-based (Since C++11)\n\n```cpp\nfor (int n : {1, 2, 3, 4, 5}) {\n    std::cout << n << \" \";\n}\n// Outputs: 1 2 3 4 5\n```\n\n---\n\n```cpp\nstd::string hello = \"CheatSheets.zip\";\nfor (char c: hello)\n{\n    std::cout << c << \" \";\n}\n// Outputs: Q u i c k R e f . M E\n```\n\n### Break statements\n\n```cpp\nint password, times = 0;\nwhile (password != 1234) {\n    if (times++ >= 3) {\n        std::cout << \"Locked!\\n\";\n        break;\n    }\n    std::cout << \"Password: \";\n    std::cin >> password; // input\n}\n```\n\n### Several variations\n\n```cpp\nfor (int i = 0, j = 2; i < 3; i++, j--){\n    std::cout << \"i=\" << i << \",\";\n    std::cout << \"j=\" << j << \";\";\n}\n// Outputs: i=0,j=2;i=1,j=1;i=2,j=0;\n```\n"
            },
            {
                "title": "C++ Functions",
                "content": "\n### Arguments & Returns\n\n```cpp\n#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    std::cout << add(10, 20);\n}\n```\n\n`add` is a function taking 2 ints and returning int\n\n### Overloading\n\n```cpp\nvoid fun(string a, string b) {\n    std::cout << a + \" \" + b;\n}\nvoid fun(string a) {\n    std::cout << a;\n}\nvoid fun(int a) {\n    std::cout << a;\n}\n```\n\n### Built-in Functions\n\n```cpp\n#include <iostream>\n#include <cmath> // import library\n\nint main() {\n    // sqrt() is from cmath\n    std::cout << sqrt(9);\n}\n```\n"
            },
            {
                "title": "C++ Classes & Objects",
                "content": "\n### Defining a Class\n\n```cpp\nclass MyClass {\n  public:             // Access specifier\n    int myNum;        // Attribute (int variable)\n    string myString;  // Attribute (string variable)\n};\n\n```\n\n### Creating an Object\n\n```cpp\nMyClass myObj;  // Create an object of MyClass\n\nmyObj.myNum = 15;          // Set the value of myNum to 15\nmyObj.myString = \"Hello\";  // Set the value of myString to \"Hello\"\n\ncout << myObj.myNum << endl;         // Output 15\ncout << myObj.myString << endl;      // Output \"Hello\"\n\n```\n\n### Constructors\n\n```cpp\nclass MyClass {\n  public:\n    int myNum;\n    string myString;\n    MyClass() {  // Constructor\n      myNum = 0;\n      myString = \"\";\n    }\n};\n\nMyClass myObj;  // Create an object of MyClass\n\ncout << myObj.myNum << endl;         // Output 0\ncout << myObj.myString << endl;      // Output \"\"\n\n```\n\n### Destructors\n\n```cpp\nclass MyClass {\n  public:\n    int myNum;\n    string myString;\n    MyClass() {  // Constructor\n      myNum = 0;\n      myString = \"\";\n    }\n    ~MyClass() {  // Destructor\n      cout << \"Object destroyed.\" << endl;\n    }\n};\n\nMyClass myObj;  // Create an object of MyClass\n\n// Code here...\n\n// Object is destroyed automatically when the program exits the scope\n\n\n```\n\n### Class Methods\n\n```cpp\nclass MyClass {\n  public:\n    int myNum;\n    string myString;\n    void myMethod() {  // Method/function defined inside the class\n      cout << \"Hello World!\" << endl;\n    }\n};\n\nMyClass myObj;  // Create an object of MyClass\nmyObj.myMethod();  // Call the method\n```\n\n### Access Modifiers\n\n```cpp\nclass MyClass {\n  public:     // Public access specifier\n    int x;    // Public attribute\n  private:    // Private access specifier\n    int y;    // Private attribute\n  protected:  // Protected access specifier\n    int z;    // Protected attribute\n};\n\nMyClass myObj;\nmyObj.x = 25;  // Allowed (public)\nmyObj.y = 50;  // Not allowed (private)\nmyObj.z = 75;  // Not allowed (protected)\n\n```\n\n### Getters and Setters\n\n```cpp\nclass MyClass {\n  private:\n    int myNum;\n  public:\n    void setMyNum(int num) {  // Setter\n      myNum = num;\n    }\n    int getMyNum() {  // Getter\n      return myNum;\n    }\n};\n\nMyClass myObj;\nmyObj.setMyNum(15);  // Set the value of myNum to 15\ncout << myObj.getMyNum() << endl;  // Output 15\n\n```\n\n### Inheritance\n\n```cpp\nclass Vehicle {\n  public:\n    string brand = \"Ford\";\n    void honk() {\n      cout << \"Tuut, tuut!\" << endl;\n    }\n};\n\nclass Car : public Vehicle {\n  public:\n    string model = \"Mustang\";\n};\n\nCar myCar;\nmyCar.honk();  // Output \"Tuut, tuut!\"\ncout << myCar.brand + \" \" + myCar.model << endl;  // Output \"Ford Mustang\"\n```\n"
            },
            {
                "title": "C++ Preprocessor",
                "content": "\n### Preprocessor \n\n- [if](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [elif](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [else](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [endif](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [ifdef](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [ifndef](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [define](https://en.cppreference.com/w/cpp/preprocessor/replace)\n- [undef](https://en.cppreference.com/w/cpp/preprocessor/replace)\n- [include](https://en.cppreference.com/w/cpp/preprocessor/include)\n- [line](https://en.cppreference.com/w/cpp/preprocessor/line)\n- [error](https://en.cppreference.com/w/cpp/preprocessor/error)\n- [pragma](https://en.cppreference.com/w/cpp/preprocessor/impl)\n- [defined](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [\\_\\_has_include](https://en.cppreference.com/w/cpp/feature_test)\n- [\\_\\_has_cpp_attribute](https://en.cppreference.com/w/cpp/feature_test)\n- [export](https://en.cppreference.com/w/cpp/keyword/export)\n- [import](https://en.cppreference.com/mwiki/index.php?title=cpp/keyword/import&action=edit&redlink=1)\n- [module](https://en.cppreference.com/mwiki/index.php?title=cpp/keyword/module&action=edit&redlink=1)\n\n{.marker-none .cols-2}\n\n### Includes\n\n```cpp\n#include \"iostream\"\n#include <iostream>\n```\n\n### Defines\n\n```cpp\n#define FOO\n#define FOO \"hello\"\n\n#undef FOO\n```\n\n### If \n\n```cpp\n#ifdef DEBUG\n  console.log('hi');\n#elif defined VERBOSE\n  ...\n#else\n  ...\n#endif\n```\n\n### Error\n\n```cpp\n#if VERSION == 2.0\n  #error Unsupported\n  #warning Not really supported\n#endif\n```\n\n### Macro\n\n```cpp\n#define DEG(x) ((x) * 57.29)\n```\n\n### Token concat\n\n```cpp\n#define DST(name) name##_s name##_t\nDST(object);   #=> object_s object_t;\n```\n\n### Stringification\n\n```cpp\n#define STR(name) #name\nchar * a = STR(object);   #=> char * a = \"object\";\n```\n\n### file and line\n\n```cpp\n#define LOG(msg) console.log(__FILE__, __LINE__, msg)\n#=> console.log(\"file.txt\", 3, \"hey\")\n```\n"
            },
            {
                "title": "Miscellaneous",
                "content": "\n### Escape Sequences\n\n| Escape Sequences | Characters            |\n| ---------------- | --------------------- |\n| `\\b`             | Backspace             |\n| `\\f`             | Form feed             |\n| `\\n`             | Newline               |\n| `\\r`             | Return                |\n| `\\t`             | Horizontal tab        |\n| `\\v`             | Vertical tab          |\n| `\\\\`             | Backslash             |\n| `\\'`             | Single quotation mark |\n| `\\\"`             | Double quotation mark |\n| `\\?`             | Question mark         |\n| `\\0`             | Null Character        |\n\n### Keywords \n\n- [alignas](https://en.cppreference.com/w/cpp/keyword/alignas)\n- [alignof](https://en.cppreference.com/w/cpp/keyword/alignof)\n- [and](https://en.cppreference.com/w/cpp/keyword/and)\n- [and_eq](https://en.cppreference.com/w/cpp/keyword/and_eq)\n- [asm](https://en.cppreference.com/w/cpp/keyword/asm)\n- [atomic_cancel](https://en.cppreference.com/w/cpp/keyword/atomic_cancel)\n- [atomic_commit](https://en.cppreference.com/w/cpp/keyword/atomic_commit)\n- [atomic_noexcept](https://en.cppreference.com/w/cpp/keyword/atomic_noexcept)\n- [auto](https://en.cppreference.com/w/cpp/keyword/auto)\n- [bitand](https://en.cppreference.com/w/cpp/keyword/bitand)\n- [bitor](https://en.cppreference.com/w/cpp/keyword/bitor)\n- [bool](https://en.cppreference.com/w/cpp/keyword/bool)\n- [break](https://en.cppreference.com/w/cpp/keyword/break)\n- [case](https://en.cppreference.com/w/cpp/keyword/case)\n- [catch](https://en.cppreference.com/w/cpp/keyword/catch)\n- [char](https://en.cppreference.com/w/cpp/keyword/char)\n- [char8_t](https://en.cppreference.com/w/cpp/keyword/char8_t)\n- [char16_t](https://en.cppreference.com/w/cpp/keyword/char16_t)\n- [char32_t](https://en.cppreference.com/w/cpp/keyword/char32_t)\n- [class](https://en.cppreference.com/w/cpp/keyword/class)\n- [compl](https://en.cppreference.com/w/cpp/keyword/compl)\n- [concept](https://en.cppreference.com/w/cpp/keyword/concept)\n- [const](https://en.cppreference.com/w/cpp/keyword/const)\n- [consteval](https://en.cppreference.com/w/cpp/keyword/consteval)\n- [constexpr](https://en.cppreference.com/w/cpp/keyword/constexpr)\n- [constinit](https://en.cppreference.com/w/cpp/keyword/constinit)\n- [const_cast](https://en.cppreference.com/w/cpp/keyword/const_cast)\n- [continue](https://en.cppreference.com/w/cpp/keyword/continue)\n- [co_await](https://en.cppreference.com/w/cpp/keyword/co_await)\n- [co_return](https://en.cppreference.com/w/cpp/keyword/co_return)\n- [co_yield](https://en.cppreference.com/w/cpp/keyword/co_yield)\n- [decltype](https://en.cppreference.com/w/cpp/keyword/decltype)\n- [default](https://en.cppreference.com/w/cpp/keyword/default)\n- [delete](https://en.cppreference.com/w/cpp/keyword/delete)\n- [do](https://en.cppreference.com/w/cpp/keyword/do)\n- [double](https://en.cppreference.com/w/cpp/keyword/double)\n- [dynamic_cast](https://en.cppreference.com/w/cpp/keyword/dynamic_cast)\n- [else](https://en.cppreference.com/w/cpp/keyword/else)\n- [enum](https://en.cppreference.com/w/cpp/keyword/enum)\n- [explicit](https://en.cppreference.com/w/cpp/keyword/explicit)\n- [export](https://en.cppreference.com/w/cpp/keyword/export)\n- [extern](https://en.cppreference.com/w/cpp/keyword/extern)\n- [false](https://en.cppreference.com/w/cpp/keyword/false)\n- [float](https://en.cppreference.com/w/cpp/keyword/float)\n- [for](https://en.cppreference.com/w/cpp/keyword/for)\n- [friend](https://en.cppreference.com/w/cpp/keyword/friend)\n- [goto](https://en.cppreference.com/w/cpp/keyword/goto)\n- [if](https://en.cppreference.com/w/cpp/keyword/if)\n- [inline](https://en.cppreference.com/w/cpp/keyword/inline)\n- [int](https://en.cppreference.com/w/cpp/keyword/int)\n- [long](https://en.cppreference.com/w/cpp/keyword/long)\n- [mutable](https://en.cppreference.com/w/cpp/keyword/mutable)\n- [namespace](https://en.cppreference.com/w/cpp/keyword/namespace)\n- [new](https://en.cppreference.com/w/cpp/keyword/new)\n- [noexcept](https://en.cppreference.com/w/cpp/keyword/noexcept)\n- [not](https://en.cppreference.com/w/cpp/keyword/not)\n- [not_eq](https://en.cppreference.com/w/cpp/keyword/not_eq)\n- [nullptr](https://en.cppreference.com/w/cpp/keyword/nullptr)\n- [operator](https://en.cppreference.com/w/cpp/keyword/operator)\n- [or](https://en.cppreference.com/w/cpp/keyword/or)\n- [or_eq](https://en.cppreference.com/w/cpp/keyword/or_eq)\n- [private](https://en.cppreference.com/w/cpp/keyword/private)\n- [protected](https://en.cppreference.com/w/cpp/keyword/protected)\n- [public](https://en.cppreference.com/w/cpp/keyword/public)\n- [reflexpr](https://en.cppreference.com/w/cpp/keyword/reflexpr)\n- [register](https://en.cppreference.com/w/cpp/keyword/register)\n- [reinterpret_cast](https://en.cppreference.com/w/cpp/keyword/reinterpret_cast)\n- [requires](https://en.cppreference.com/w/cpp/keyword/requires)\n- [return](https://en.cppreference.com/w/cpp/language/return)\n- [short](https://en.cppreference.com/w/cpp/keyword/short)\n- [signed](https://en.cppreference.com/w/cpp/keyword/signed)\n- [sizeof](https://en.cppreference.com/w/cpp/keyword/sizeof)\n- [static](https://en.cppreference.com/w/cpp/keyword/static)\n- [static_assert](https://en.cppreference.com/w/cpp/keyword/static_assert)\n- [static_cast](https://en.cppreference.com/w/cpp/keyword/static_cast)\n- [struct](https://en.cppreference.com/w/cpp/keyword/struct)\n- [switch](https://en.cppreference.com/w/cpp/keyword/switch)\n- [synchronized](https://en.cppreference.com/w/cpp/keyword/synchronized)\n- [template](https://en.cppreference.com/w/cpp/keyword/template)\n- [this](https://en.cppreference.com/w/cpp/keyword/this)\n- [thread_local](https://en.cppreference.com/w/cpp/keyword/thread_local)\n- [throw](https://en.cppreference.com/w/cpp/keyword/throw)\n- [true](https://en.cppreference.com/w/cpp/keyword/true)\n- [try](https://en.cppreference.com/w/cpp/keyword/try)\n- [typedef](https://en.cppreference.com/w/cpp/keyword/typedef)\n- [typeid](https://en.cppreference.com/w/cpp/keyword/typeid)\n- [typename](https://en.cppreference.com/w/cpp/keyword/typename)\n- [union](https://en.cppreference.com/w/cpp/keyword/union)\n- [unsigned](https://en.cppreference.com/w/cpp/keyword/unsigned)\n- [using](https://en.cppreference.com/w/cpp/keyword/using)\n- [virtual](https://en.cppreference.com/w/cpp/keyword/virtual)\n- [void](https://en.cppreference.com/w/cpp/keyword/void)\n- [volatile](https://en.cppreference.com/w/cpp/keyword/volatile)\n- [wchar_t](https://en.cppreference.com/w/cpp/keyword/wchar_t)\n- [while](https://en.cppreference.com/w/cpp/keyword/while)\n- [xor](https://en.cppreference.com/w/cpp/keyword/xor)\n- [xor_eq](https://en.cppreference.com/w/cpp/keyword/xor_eq)\n- [final](https://en.cppreference.com/w/cpp/language/final)\n- [override](https://en.cppreference.com/w/cpp/language/override)\n- [transaction_safe](https://en.cppreference.com/w/cpp/language/transactional_memory)\n- [transaction_safe_dynamic](https://en.cppreference.com/w/cpp/language/transactional_memory) {.marker-none .cols-5}\n\n### Preprocessor\n\n- [if](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [elif](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [else](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [endif](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [ifdef](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [ifndef](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [define](https://en.cppreference.com/w/cpp/preprocessor/replace)\n- [undef](https://en.cppreference.com/w/cpp/preprocessor/replace)\n- [include](https://en.cppreference.com/w/cpp/preprocessor/include)\n- [line](https://en.cppreference.com/w/cpp/preprocessor/line)\n- [error](https://en.cppreference.com/w/cpp/preprocessor/error)\n- [pragma](https://en.cppreference.com/w/cpp/preprocessor/impl)\n- [defined](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [\\_\\_has_include](https://en.cppreference.com/w/cpp/feature_test)\n- [\\_\\_has_cpp_attribute](https://en.cppreference.com/w/cpp/feature_test)\n- [export](https://en.cppreference.com/w/cpp/keyword/export)\n- [import](https://en.cppreference.com/mwiki/index.php?title=cpp/keyword/import&action=edit&redlink=1)\n- [module](https://en.cppreference.com/mwiki/index.php?title=cpp/keyword/module&action=edit&redlink=1) {.marker-none\n  .cols-2}\n"
            },
            {
                "title": "Also see",
                "content": "\n- [C++ Infographics & Cheat Sheets](https://hackingcpp.com/cpp/cheat_sheets.html) _(hackingcpp.com)_\n\n- [C++ reference](https://en.cppreference.com/w/) _(cppreference.com)_\n- [C++ Language Tutorials](http://www.cplusplus.com/doc/tutorial/) _(cplusplus.com)_"
            }
        ]
    },
    {
        "name": "cs",
        "title": "C#",
        "tags": [
            "object-oriented",
            "class"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#8c4c8a",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/cs.svg",
        "intro": "C# quick reference cheat sheet that provides basic syntax and methods.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Hello.cs\n\n```cs\nclass Hello {\n  // main method\n  static void Main(string[] args)\n  {\n    // Output: Hello, world!\n    Console.WriteLine(\"Hello, world!\");\n  }\n}\n```\n\nCreates a project directory for new console application\n\n```cs\n$ dotnet new console\n```\n\nLists all the applications templates\n\n```cs\n$ dotnet new list\n```\n\nCompiling and running (make sure you are in the project directory)\n\n```shell script\n$ dotnet run\nHello, world!\n```\n\n### Variables\n\n```cs\nint intNum = 9;\nlong longNum = 9999999;\nfloat floatNum = 9.99F;\ndouble doubleNum = 99.999;\ndecimal decimalNum = 99.9999M;\nchar letter = 'D';\nbool @bool = true;\nstring site = \"cheatsheets.zip\";\n\nvar num = 999;\nvar str = \"999\";\nvar bo = false;\n```\n\n### Primitive Data Types\n\n| Data Type | Size             | Range                     |\n| --------- | ---------------- | ------------------------- |\n| `int`     | 4 bytes          | -2^31^ ^to^ 2^31^-1       |\n| `long`    | 8 bytes          | -2^63^ ^to^ 2^63^-1       |\n| `float`   | 4 bytes          | 6 ^to^ 7 decimal digits   |\n| `double`  | 8 bytes          | 15 decimal digits         |\n| `decimal` | 16 bytes         | 28 ^to^ 29 decimal digits |\n| `char`    | 2 bytes          | 0 ^to^ 65535              |\n| `bool`    | 1 bit            | true / false              |\n| `string`  | 2 bytes per char | _N/A_                     |\n\n\n\n### Comments\n\n```cs\n// Single-line comment\n\n/* Multi-line\n   comment */\n\n// TODO: Adds comment to a task list in Visual Studio\n\n/// Single-line comment used for documentation\n\n/** Multi-line comment\n    used for documentation **/\n\n```\n\n### Strings\n\n```cs\nstring first = \"John\";\nstring last = \"Doe\";\n\n// string concatenation\nstring name = first + \" \" + last;\nConsole.WriteLine(name); // => John Doe\n```\n\n\n\n### User Input\n\n```cs\nConsole.WriteLine(\"Enter number:\");\nif(int.TryParse(Console.ReadLine(),out int input))\n{\n  // Input validated\n  Console.WriteLine($\"You entered {input}\");\n}\n```\n\n### Conditionals\n\n```cs\nint j = 10;\n\nif (j == 10) {\n  Console.WriteLine(\"I get printed\");\n} else if (j > 10) {\n  Console.WriteLine(\"I don't\");\n} else {\n  Console.WriteLine(\"I also don't\");\n}\n```\n\n### Arrays\n\n```cs\nchar[] chars = new char[10];\nchars[0] = 'a';\nchars[1] = 'b';\n\nstring[] letters = {\"A\", \"B\", \"C\"};\nint[] mylist = {100, 200};\nbool[] answers = {true, false};\n```\n\n### Loops\n\n```cs\nint[] numbers = {1, 2, 3, 4, 5};\n\nfor(int i = 0; i < numbers.Length; i++) {\n  Console.WriteLine(numbers[i]);\n}\n```\n\n---\n\n```cs\nforeach(int num in numbers) {\n  Console.WriteLine(num);\n}\n```\n"
            },
            {
                "title": "C# Strings",
                "content": "\n### String concatenation\n\n```cs\nstring first = \"John\";\nstring last = \"Doe\";\n\nstring name = first + \" \" + last;\nConsole.WriteLine(name); // => John Doe\n```\n\n### String interpolation\n\n```cs\nstring first = \"John\";\nstring last = \"Doe\";\n\nstring name = $\"{first} {last}\";\nConsole.WriteLine(name); // => John Doe\n```\n\n### String Members \n\n| Member     | Description                                                                                                                          |\n| ---------- | ------------------------------------------------------------------------------------------------------------------------------------ |\n| Length     | A property that returns the length of the string.                                                                                    |\n| Compare()  | A static method that compares two strings.                                                                                           |\n| Contains() | Determines if the string contains a specific substring.                                                                              |\n| Equals()   | Determines if the two strings have the same character data.                                                                          |\n| Format()   | Formats a string via the {0} notation and by using other primitives.                                                                 |\n| Trim()     | Removes all instances of specific characters from trailing and leading characters. Defaults to removing leading and trailing spaces. |\n| Split()    | Removes the provided character and creates an array out of the remaining characters on either side.                                  |\n\n\n\n### Verbatim strings\n\n```cs \nstring longString = @\"I can type any characters in here !#@$%^&*()__+ '' \\n \\t except double quotes and I will be taken literally. I even work with multiple lines.\";\n```\n\n### Member Example\n\n```cs\n// Using property of System.String\nstring lengthOfString = \"How long?\";\nlengthOfString.Length           // => 9\n\n// Using methods of System.String\nlengthOfString.Contains(\"How\"); // => true\n```\n"
            },
            {
                "title": "Misc",
                "content": "\n### General .NET Terms \n\n| Term                          | Definition                                                                                                                                                                                          |\n| ----------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Runtime                       | A collection of services that are required to execute a given compiled unit of code.                                                                                                                |\n| Common Language Runtime (CLR) | Primarily locates, loads, and managed .NET objects. The CLR also handles memory management, application hosting, coordination of threads, performing security checks, and other low-level details. |\n| Managed code                  | Code that compiles and runs on .NET runtime. C#/F#/VB are examples.                                                                                                                                 |\n| Unmanaged code                | Code that compiles straight to machine code and cannot be directly hosted by the .NET runtime. Contains no free memory management, garbage collection, etc. DLLs created from C/C++ are examples.   |\n\n"
            }
        ]
    },
    {
        "name": "php",
        "title": "PHP",
        "tags": [
            "web"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#7477a9",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/php.svg",
        "intro": "This [PHP](https://www.php.net/manual/en/) cheat sheet provides a reference for quickly looking up the correct syntax for the code you use most frequently.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### hello.php\n\n```php\n<?php // begin with a PHP open tag.\n\necho \"Hello World\\n\";\nprint(\"Hello cheatsheets.zip\");\n\n?>\n```\n\nPHP run command\n\n```shell script\n$ php hello.php\n```\n\n### Variables\n\n```php\n$boolean1 = true;\n$boolean2 = True;\n\n$int = 12;\n$float = 3.1415926;\nunset($float);  // Delete variable\n\n$str1 = \"How are you?\";\n$str2 = 'Fine, thanks';\n```\n\n\n\n### Strings\n\n```php\n$url = \"cheatsheets.zip\";\necho \"I'm learning PHP at $url\";\n\n// Concatenate strings\necho \"I'm learning PHP at \" . $url;\n\n$hello = \"Hello, \";\n$hello .= \"World!\";\necho $hello;   # => Hello, World!\n```\n\n\n\n### Arrays\n\n```php\n$num = [1, 3, 5, 7, 9];\n$num[5] = 11;\nunset($num[2]);    // Delete variable\nprint_r($num);     # => 1 3 7 9 11\necho count($num);  # => 5\n```\n\n\n\n### Operators\n\n```php\n$x = 1;\n$y = 2;\n\n$sum = $x + $y;\necho $sum;   # => 3\n```\n\n\n\n### Include \n\n#### vars.php\n\n```php\n<?php // begin with a PHP open tag.\n$fruit = 'apple';\necho \"I was imported\";\nreturn 'Anything you like.';\n?>\n```\n\n#### test.php\n\n```php\n<?php\ninclude 'vars.php';\necho $fruit . \"\\n\";   # => apple\n\n/* Same as include,\ncause an error if cannot be included*/\nrequire 'vars.php';\n\n// Also works\ninclude('vars.php');\nrequire('vars.php');\n\n// Include through HTTP\ninclude 'http://x.com/file.php';\n\n// Include and the return statement\n$result = include 'vars.php';\necho $result;  # => Anything you like.\n?>\n```\n\n### Functions\n\n```php\nfunction add($num1, $num2 = 1) {\n    return $num1 + $num2;\n}\necho add(10);    # => 11\necho add(10, 5); # => 15\n```\n\n\n\n### Comments\n\n```php\n# This is a one line shell-style comment\n\n// This is a one line c++ style comment\n\n/* This is a multi line comment\n   yet another line of comment */\n```\n\n### Constants\n\n```php\nconst MY_CONST = \"hello\";\n\necho MY_CONST;   # => hello\n\n# => MY_CONST is: hello\necho 'MY_CONST is: ' . MY_CONST;\n```\n\n### Classes\n\n```php\nclass Student {\n    public function __construct($name) {\n        $this->name = $name;\n    }\n}\n$alex = new Student(\"Alex\");\n```\n\n\n"
            },
            {
                "title": "PHP Types",
                "content": "\n### Boolean \n\n```php\n$boolean1 = true;\n$boolean2 = TRUE;\n$boolean3 = false;\n$boolean4 = FALSE;\n\n$boolean5 = (boolean) 1;   # => true\n$boolean6 = (boolean) 0;   # => false\n```\n\nBoolean are case-insensitive\n\n### Integer \n\n```php\n$int1 = 28;    # => 28\n$int2 = -32;   # => -32\n$int3 = 012;   # => 10 (octal)\n$int4 = 0x0F;  # => 15 (hex)\n$int5 = 0b101; # => 5  (binary)\n\n# => 2000100000 (decimal, PHP 7.4.0)\n$int6 = 2_000_100_000;\n```\n\nSee also: [Integers](https://www.php.net/manual/en/language.types.integer.php)\n\n### Strings\n\n```php\necho 'this is a simple string';\n```\n\n\n\n### Arrays\n\n```php\n$arr = array(\"hello\", \"world\", \"!\");\n```\n\n\n\n### Float (Double)\n\n```php\n$float1 = 1.234;\n$float2 = 1.2e7;\n$float3 = 7E-10;\n\n$float4 = 1_234.567;  // as of PHP 7.4.0\nvar_dump($float4);    // float(1234.567)\n\n$float5 = 1 + \"10.5\";   # => 11.5\n$float6 = 1 + \"-1.3e3\"; # => -1299\n```\n\n### Null\n\n```php\n$a = null;\n$b = 'Hello php!';\necho $a ?? 'a is unset'; # => a is unset\necho $b ?? 'b is unset'; # => Hello php\n\n$a = array();\n$a == null    # => true\n$a === null   # => false\nis_null($a)   # => false\n```\n\n### Iterables\n\n```php\nfunction bar(): iterable {\n    return [1, 2, 3];\n}\nfunction gen(): iterable {\n    yield 1;\n    yield 2;\n    yield 3;\n}\nforeach (bar() as $value) {\n    echo $value;   # => 123\n}\n```\n"
            },
            {
                "title": "PHP Strings",
                "content": "\n### String\n\n```php\n# => '$String'\n$sgl_quotes = '$String';\n\n# => 'This is a $String.'\n$dbl_quotes = \"This is a $sgl_quotes.\";\n\n# => a \t tab character.\n$escaped   = \"a \\t tab character.\";\n\n# => a slash and a t: \\t\n$unescaped = 'a slash and a t: \\t';\n```\n\n### Multi-line\n\n```php\n$str = \"foo\";\n\n// Uninterpolated multi-liners\n$nowdoc = <<<'END'\nMulti line string\n$str\nEND;\n\n// Will do string interpolation\n$heredoc = <<<END\nMulti line\n$str\nEND;\n```\n\n### Manipulation\n\n```php\n$s = \"Hello Phper\";\necho strlen($s);       # => 11\n\necho substr($s, 0, 3); # => Hel\necho substr($s, 1);    # => ello Phper\necho substr($s, -4, 3);# => hpe\n\necho strtoupper($s);   # => HELLO PHPER\necho strtolower($s);   # => hello phper\n\necho strpos($s, \"l\");      # => 2\nvar_dump(strpos($s, \"L\")); # => false\n```\n\nSee: [String Functions](https://www.php.net/manual/en/ref.strings.php)\n"
            },
            {
                "title": "PHP Arrays",
                "content": "\n### Defining \n\n```php\n$a1 = [\"hello\", \"world\", \"!\"]\n$a2 = array(\"hello\", \"world\", \"!\");\n$a3 = explode(\",\", \"apple,pear,peach\");\n```\n\n#### Mixed int and string keys\n\n```php\n$array = array(\n    \"foo\" => \"bar\",\n    \"bar\" => \"foo\",\n    100   => -100,\n    -100  => 100,\n);\nvar_dump($array);\n```\n\n#### Short array syntax\n\n```php\n$array = [\n    \"foo\" => \"bar\",\n    \"bar\" => \"foo\",\n];\n```\n\n### Multi array\n\n```php\n$multiArray = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\nprint_r($multiArray[0][0]) # => 1\nprint_r($multiArray[0][1]) # => 2\nprint_r($multiArray[0][2]) # => 3\n```\n\n### Multi type \n\n```php\n$array = array(\n    \"foo\" => \"bar\",\n    42    => 24,\n    \"multi\" => array(\n         \"dim\" => array(\n             \"a\" => \"foo\"\n         )\n    )\n);\n\n# => string(3) \"bar\"\nvar_dump($array[\"foo\"]);\n\n# => int(24)\nvar_dump($array[42]);\n\n# =>  string(3) \"foo\"\nvar_dump($array[\"multi\"][\"dim\"][\"a\"]);\n```\n\n### manipulation\n\n```php\n$arr = array(5 => 1, 12 => 2);\n$arr[] = 56;      // Append\n$arr[\"x\"] = 42;   // Add with key\nsort($arr);       // Sort\nunset($arr[5]);   // Remove\nunset($arr);      // Remove all\n```\n\nSee: [Array Functions](https://www.php.net/manual/en/ref.array.php)\n\n### Indexing iteration\n\n```php\n$array = array('a', 'b', 'c');\n$count = count($array);\n\nfor ($i = 0; $i < $count; $i++) {\n    echo \"i:{$i}, v:{$array[$i]}\\n\";\n}\n```\n\n### Value iteration\n\n```php\n$colors = array('red', 'blue', 'green');\n\nforeach ($colors as $color) {\n    echo \"Do you like $color?\\n\";\n}\n```\n\n### Key iteration\n\n```php\n$arr = [\"foo\" => \"bar\", \"bar\" => \"foo\"];\n\nforeach ( $arr as $key => $value )\n{\n  \techo \"key: \" . $key . \"\\n\";\n    echo \"val: {$arr[$key]}\\n\";\n}\n```\n\n### Concatenate arrays\n\n```php\n$a = [1, 2];\n$b = [3, 4];\n\n// PHP 7.4 later\n# => [1, 2, 3, 4]\n$result = [...$a, ...$b];\n```\n\n### Into functions\n\n```php\n$array = [1, 2];\n\nfunction foo(int $a, int $b) {\n\techo $a; # => 1\n  \techo $b; # => 2\n}\nfoo(...$array);\n```\n\n### Splat Operator\n\n```php\nfunction foo($first, ...$other) {\n\tvar_dump($first); # => a\n  \tvar_dump($other); # => ['b', 'c']\n}\nfoo('a', 'b', 'c' /*, ...*/ );\n// or\nfunction foo($first, string ...$other){}\n```\n"
            },
            {
                "title": "PHP Operators",
                "content": "\n### Arithmetic\n\n| -    | -              |\n| ---- | -------------- |\n| `+`  | Addition       |\n| `-`  | Subtraction    |\n| `*`  | Multiplication |\n| `/`  | Division       |\n| `%`  | Modulo         |\n| `**` | Exponentiation |\n\n### Assignment\n\n| -        | -                   |\n| -------- | ------------------- |\n| `a += b` | Same as `a = a + b` |\n| `a -= b` | Same as `a = a \u2013 b` |\n| `a *= b` | Same as `a = a * b` |\n| `a /= b` | Same as `a = a / b` |\n| `a %= b` | Same as `a = a % b` |\n\n### Comparison \n\n| -     | -                            |\n| ----- | ---------------------------- |\n| `==`  | Equal                        |\n| `===` | Identical                    |\n| `!=`  | Not equal                    |\n| `<>`  | Not equal                    |\n| `!==` | Not identical                |\n| `<`   | Less than                    |\n| `>`   | Greater than                 |\n| `<=`  | Less than or equal           |\n| `>=`  | Greater than or equal        |\n| `<=>` | Less than/equal/greater than |\n\n### Logical\n\n| -     | -            |\n| ----- | ------------ | --- | --- |\n| `and` | And          |\n| `or`  | Or           |\n| `xor` | Exclusive or |\n| `!`   | Not          |\n| `&&`  | And          |\n| `     |              | `   | Or  |\n\n### Arithmetic \n\n```php\n// Arithmetic\n$sum        = 1 + 1; // 2\n$difference = 2 - 1; // 1\n$product    = 2 * 2; // 4\n$quotient   = 2 / 1; // 2\n\n// Shorthand arithmetic\n$num = 0;\n$num += 1;       // Increment $num by 1\necho $num++;     // Prints 1 (increments after evaluation)\necho ++$num;     // Prints 3 (increments before evaluation)\n$num /= $float;  // Divide and assign the quotient to $num\n```\n\n### Bitwise\n\n| -    | -                  |\n| ---- | ------------------ | ----------------- |\n| `&`  | And                |\n| `    | `                  | Or (inclusive or) |\n| `^`  | Xor (exclusive or) |\n| `~`  | Not                |\n| `<<` | Shift left         |\n| `>>` | Shift right        |\n"
            },
            {
                "title": "PHP Conditionals",
                "content": "\n### If elseif else\n\n```php\n$a = 10;\n$b = 20;\n\nif ($a > $b) {\n    echo \"a is bigger than b\";\n} elseif ($a == $b) {\n    echo \"a is equal to b\";\n} else {\n    echo \"a is smaller than b\";\n}\n```\n\n### Switch\n\n```php\n$x = 0;\nswitch ($x) {\n    case '0':\n        print \"it's zero\";\n        break;\n    case 'two':\n    case 'three':\n        // do something\n        break;\n    default:\n        // do something\n}\n```\n\n### Ternary operator\n\n```php\n# => Does\nprint (false ? 'Not' : 'Does');\n\n$x = false;\n# => Does\nprint($x ?: 'Does');\n\n$a = null;\n$b = 'Does print';\n# => a is unset\necho $a ?? 'a is unset';\n# => print\necho $b ?? 'b is unset';\n```\n\n### Match\n\n```php\n$statusCode = 500;\n$message = match($statusCode) {\n  200, 300 => null,\n  400 => 'not found',\n  500 => 'server error',\n  default => 'known status code',\n};\necho $message; # => server error\n```\n\nSee: [Match](https://www.php.net/manual/en/control-structures.match.php)\n\n### Match expressions\n\n```php\n$age = 23;\n\n$result = match (true) {\n    $age >= 65 => 'senior',\n    $age >= 25 => 'adult',\n    $age >= 18 => 'young adult',\n    default => 'kid',\n};\n\necho $result; # => young adult\n```\n"
            },
            {
                "title": "PHP Loops",
                "content": "\n### while\n\n```php\n$i = 1;\n# => 12345\nwhile ($i <= 5) {\n    echo $i++;\n}\n```\n\n### do while\n\n```php\n$i = 1;\n# => 12345\ndo {\n    echo $i++;\n} while ($i <= 5);\n```\n\n### for i\n\n```php\n# => 12345\nfor ($i = 1; $i <= 5; $i++) {\n    echo $i;\n}\n```\n\n### break\n\n```php\n# => 123\nfor ($i = 1; $i <= 5; $i++) {\n    if ($i === 4) {\n        break;\n    }\n    echo $i;\n}\n```\n\n### continue\n\n```php\n# => 1235\nfor ($i = 1; $i <= 5; $i++) {\n    if ($i === 4) {\n        continue;\n    }\n    echo $i;\n}\n```\n\n### foreach\n\n```php\n$a = ['foo' => 1, 'bar' => 2];\n# => 12\nforeach ($a as $k) {\n    echo $k;\n}\n```\n\n\n"
            },
            {
                "title": "PHP Functions",
                "content": "\n### Returning values\n\n```php\nfunction square($x)\n{\n    return $x * $x;\n}\n\necho square(4);  # => 16\n```\n\n### Return types\n\n```php\n// Basic return type declaration\nfunction sum($a, $b): float {/*...*/}\nfunction get_item(): string {/*...*/}\n\nclass C {}\n// Returning an object\nfunction getC(): C { return new C; }\n```\n\n### Nullable return types\n\n```php\n// Available in PHP 7.1\nfunction nullOrString(int $v) : ?string\n{\n    return $v % 2 ? \"odd\" : null;\n}\necho nullOrString(3);       # => odd\nvar_dump(nullOrString(4));  # => NULL\n```\n\nSee: [Nullable types](https://www.php.net/manual/en/migration71.new-features.php)\n\n### Void functions\n\n```php\n// Available in PHP 7.1\nfunction voidFunction(): void\n{\n\techo 'Hello';\n\treturn;\n}\n\nvoidFunction();  # => Hello\n```\n\n### Variable functions\n\n```php\nfunction bar($arg = '')\n{\n    echo \"In bar(); arg: '$arg'.\\n\";\n}\n\n$func = 'bar';\n$func('test'); # => In bar(); arg: test\n```\n\n### Anonymous functions\n\n```php\n$greet = function($name)\n{\n    printf(\"Hello %s\\r\\n\", $name);\n};\n\n$greet('World'); # => Hello World\n$greet('PHP');   # => Hello PHP\n```\n\n### Recursive functions\n\n```php\nfunction recursion($x)\n{\n    if ($x < 5) {\n        echo \"$x\";\n        recursion($x + 1);\n    }\n}\nrecursion(1);  # => 1234\n```\n\n### Default parameters\n\n```php\nfunction coffee($type = \"cappuccino\")\n{\n    return \"Making a cup of $type.\\n\";\n}\n# => Making a cup of cappuccino.\necho coffee();\n# => Making a cup of .\necho coffee(null);\n# => Making a cup of espresso.\necho coffee(\"espresso\");\n```\n\n### Arrow Functions\n\n```php\n$y = 1;\n\n$fn1 = fn($x) => $x + $y;\n\n// equivalent to using $y by value:\n$fn2 = function ($x) use ($y) {\n    return $x + $y;\n};\necho $fn1(5);   # => 6\necho $fn2(5);   # => 6\n```\n"
            },
            {
                "title": "PHP Classes",
                "content": "\n### Constructor\n\n```php\nclass Student {\n    public function __construct($name) {\n        $this->name = $name;\n    }\n  \tpublic function print() {\n        echo \"Name: \" . $this->name;\n    }\n}\n$alex = new Student(\"Alex\");\n$alex->print();    # => Name: Alex\n```\n\n### Inheritance\n\n```php\nclass ExtendClass extends SimpleClass\n{\n    // Redefine the parent method\n    function displayVar()\n    {\n        echo \"Extending class\\n\";\n        parent::displayVar();\n    }\n}\n\n$extended = new ExtendClass();\n$extended->displayVar();\n```\n\n### Classes variables \n\n```php\nclass MyClass\n{\n    const MY_CONST       = 'value';\n    static $staticVar    = 'static';\n\n    // Visibility\n    public static $var1  = 'pubs';\n\n    // Class only\n    private static $var2 = 'pris';\n\n    // The class and subclasses\n    protected static $var3 = 'pros';\n\n    // The class and subclasses\n    protected $var6      = 'pro';\n\n    // The class only\n    private $var7        = 'pri';\n}\n```\n\nAccess statically\n\n```php\necho MyClass::MY_CONST;   # => value\necho MyClass::$staticVar; # => static\n```\n\n### Magic Methods\n\n```php\nclass MyClass\n{\n    // Object is treated as a String\n    public function __toString()\n    {\n        return $property;\n    }\n    // opposite to __construct()\n    public function __destruct()\n    {\n        print \"Destroying\";\n    }\n}\n```\n\n### Interface\n\n```php\ninterface Foo\n{\n    public function doSomething();\n}\ninterface Bar\n{\n    public function doSomethingElse();\n}\nclass Cls implements Foo, Bar\n{\n    public function doSomething() {}\n    public function doSomethingElse() {}\n}\n```\n"
            },
            {
                "title": "Miscellaneous",
                "content": "\n### Basic error handling\n\n```php\ntry {\n    // Do something\n} catch (Exception $e) {\n    // Handle exception\n} finally {\n    echo \"Always print!\";\n}\n```\n\n### Exception in PHP 8.0 \n\n```php \n$nullableValue = null;\n\ntry {\n\t$value = $nullableValue ?? throw new InvalidArgumentException();\n} catch (InvalidArgumentException) { // Variable is optional\n    // Handle my exception\n    echo \"print me!\";\n}\n```\n\n### Custom exception \n\n```php\nclass MyException extends Exception {\n    // do something\n}\n```\n\nUsage\n\n```php\ntry {\n    $condition = true;\n    if ($condition) {\n        throw new MyException('bala');\n    }\n} catch (MyException $e) {\n    // Handle my exception\n}\n```\n\n### Nullsafe Operator \n\n```php\n// As of PHP 8.0.0, this line:\n$result = $repo?->getUser(5)?->name;\n\n// Equivalent to the following code:\nif (is_null($repo)) {\n    $result = null;\n} else {\n    $user = $repository->getUser(5);\n    if (is_null($user)) {\n        $result = null;\n    } else {\n        $result = $user->name;\n    }\n}\n```\n\nSee also: [Nullsafe Operator](https://wiki.php.net/rfc/nullsafe_operator)\n\n### Regular expressions\n\n```php\n$str = \"Visit cheatsheets.zip\";\necho preg_match(\"/ch/i\", $str); # => 1\n```\n\nSee: [Regex in PHP](/regex#regex-in-php)\n\n### fopen() mode\n\n| -    | -                        |\n| ---- | ------------------------ |\n| `r`  | Read                     |\n| `r+` | Read and write, prepend  |\n| `w`  | Write, truncate          |\n| `w+` | Read and write, truncate |\n| `a`  | Write, append            |\n| `a+` | Read and write, append   |\n\n### Runtime defined Constants\n\n```php\ndefine(\"CURRENT_DATE\", date('Y-m-d'));\n\n// One possible representation\necho CURRENT_DATE;   # => 2021-01-05\n\n# => CURRENT_DATE is: 2021-01-05\necho 'CURRENT_DATE is: ' . CURRENT_DATE;\n```\n"
            },
            {
                "title": "Also see",
                "content": "\n- [PHP Docs](https://www.php.net/manual/en/index.php)\n- [Learn X in Y minutes](https://learnxinyminutes.com/docs/php/)"
            }
        ]
    },
    {
        "name": "laravel",
        "title": "Laravel",
        "tags": [
            "web",
            "framework",
            "php"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#e44230",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/laravel.svg",
        "intro": "[Laravel](https://laravel.com/docs/8.x/) is an expressive and progressive web application framework for PHP. \nThis cheat sheet provides a reference for common commands and features for Laravel 8.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Requirements \n\n- PHP version >= 7.3\n- BCMath PHP Extension\n- Ctype PHP Extension\n- Fileinfo PHP Extension\n- JSON PHP Extension\n- Mbstring PHP Extension\n- OpenSSL PHP Extension\n- PDO PHP Extension\n- Tokenizer PHP Extension\n- XML PHP Extension\n\nEnsure your web server directs all requests to your application's `public/index.php` file, \n\n### Windows\n\n- #### Install [Docker Desktop](https://www.docker.com/products/docker-desktop)\n- #### Install & enable [WSL2](https://docs.microsoft.com/en-us/windows/wsl/install)\n- #### Ensure that Docker Desktop is [configured to use WSL2](https://docs.docker.com/desktop/windows/wsl/)\n- #### In WSL2 terminal:\n      ```shell\n      $ curl -s https://laravel.build/example-app | bash\n      $ cd example-app\n      $ ./vendor/bin/sail up\n      ```\n  \n\nAccess application via `http://localhost`\n\n### Mac\n\n- #### Install [Docker Desktop](https://www.docker.com/products/docker-desktop)\n- #### In terminal:\n      ```shell\n      $ curl -s https://laravel.build/example-app | bash\n      $ cd example-app\n      $ ./vendor/bin/sail up\n      ```\n  \n\nAccess application via `http://localhost`\n\n### Linux\n\n```shell\n$ curl -s https://laravel.build/example-app | bash\n$ cd example-app\n$ ./vendor/bin/sail up\n```\n\nInstallation via [Composer](https://getcomposer.org)\n\n```bash\n$ composer create-project laravel/laravel example-app\n$ cd example-app\n$ php artisan serve\n```\n\nAccess application via `http://localhost`\n"
            },
            {
                "title": "Configuration",
                "content": "\n### .env \n\nRetrieve values from `.env` file\n\n```php\nenv('APP_DEBUG');\n\n// with default value\nenv('APP_DEBUG', false);\n```\n\nDetermine current environment\n\n```php\nuse Illuminate\\Support\\Facades\\App;\n\n$environment = App::environment();\n```\n\nAccessing configuration values using \"dot\" syntax\n\n```php\n// config/app.php --> ['timezone' => '']\n$value = config('app.timezone');\n\n// Retrieve a default value if the configuration value does not exist...\n$value = config('app.timezone', 'Asia/Seoul');\n```\n\nSet configuration values at runtime:\n\n```php\nconfig(['app.timezone' => 'America/Chicago']);\n```\n\n### Debug Mode\n\nTurn on (local dev):\n\n```php\n// .env file\nAPP_ENV=local\nAPP_DEBUG=true\n// ...\n```\n\nTurn off (production):\n\n```php\n// .env file\nAPP_ENV=production\nAPP_DEBUG=false\n// ...\n```\n\n### Maintenance Mode\n\nTemporarily disable application (503 status code)\n\n```bash\nphp artisan down\n```\n\n#### Disable maintenance mode\n\n```bash\nphp artisan up\n```\n\n#### Bypass Maintenance Mode\n\n```bash\nphp artisan down --secret=\"1630542a-246b-4b66-afa1-dd72a4c43515\"\n```\n\nVisit your application URL `https://example.com/1630542a-246b-4b66-afa1-dd72a4c43515` to set a cookie and bypass the\nmaintenance screen\n"
            },
            {
                "title": "Routing",
                "content": "\n### Router HTTP Methods \n\n```php\nRoute::get($uri, $callback);\nRoute::post($uri, $callback);\nRoute::put($uri, $callback);\nRoute::patch($uri, $callback);\nRoute::delete($uri, $callback);\nRoute::options($uri, $callback);\n```\n\nMultiple HTTP methods\n\n```php\nRoute::match(['get', 'post'], '/', function () {\n    //\n});\n\nRoute::any('/', function () {\n    //\n});\n```\n\n### Basic Definition \n\n```php\nuse Illuminate\\Support\\Facades\\Route;\n\n// closure\nRoute::get('/greeting', function () {\n    return 'Hello World';\n});\n\n// controller action\nRoute::get(\n    '/user/profile',\n    [UserProfileController::class, 'show']\n);\n```\n\n### Dependency Injection\n\n```php\nuse Illuminate\\Http\\Request;\n\nRoute::get('/users', function (Request $request) {\n    // ...\n});\n```\n\nType hint concrete dependencies for auto-injection\n\n### View Routes\n\n```php\n// Argument 1: URI, Argument 2: view name\nRoute::view('/welcome', 'welcome');\n\n// with data\nRoute::view('/welcome', 'welcome', ['name' => 'Taylor']);\n```\n\nRoute only needs to return a view.\n\n### Route Model Binding \n\n#### Implicit binding\n\nWith closure\n\n```php\nuse App\\Models\\User;\n\nRoute::get('/users/{user}', function (User $user) {\n    return $user->email;\n});\n\n// /user/1 --> User::where('id', '=', 1);\n```\n\nWith controller action\n\n```php\nuse App\\Http\\Controllers\\UserController;\nuse App\\Models\\User;\n\n// Route definition...\nRoute::get('/users/{user}', [UserController::class, 'show']);\n\n// Controller method definition...\npublic function show(User $user)\n{\n    return view('user.profile', ['user' => $user]);\n}\n```\n\nWith custom resolution column\n\n```php\nuse App\\Models\\Post;\n\nRoute::get('/posts/{post:slug}', function (Post $post) {\n    return $post;\n});\n\n// /posts/my-post --> Post::where('slug', '=', 'my-post');\n```\n\nAlways use a different column to resolve\n\n```php\n// in App\\Models\\Post\npublic function getRouteKeyName()\n{\n    return 'slug';\n}\n```\n\nMultiple models - second is child of first\n\n```php\nuse App\\Models\\Post;\nuse App\\Models\\User;\n\nRoute::get('/users/{user}/posts/{post:slug}', function (User $user, Post $post) {\n    return $post;\n});\n```\n\nConvenient way to automatically inject the model instances directly into your routes\n\n### Route Parameters \n\nCapture segments of the URI within your route\n\n#### Required parameters\n\n```php\nRoute::get('/user/{id}', function ($id) {\n    return 'User '.$id;\n});\n```\n\nWith dependency injection\n\n```php\nuse Illuminate\\Http\\Request;\n\nRoute::get('/user/{id}', function (Request $request, $id) {\n    return 'User '.$id;\n});\n```\n\n#### Optional Parameters\n\n```php\nRoute::get('/user/{name?}', function ($name = null) {\n    return $name;\n});\n\nRoute::get('/user/{name?}', function ($name = 'John') {\n    return $name;\n});\n```\n\n### Redirect Routes\n\nHTTP `302` status\n\n```php\nRoute::redirect('/here', '/there');\n```\n\nSet the status code\n\n```php\nRoute::redirect('/here', '/there', 301);\n```\n\nPermanent `301` redirect\n\n```php\nRoute::permanentRedirect('/here', '/there');\n```\n\n### Regular Expression Constraints \n\n```php\nRoute::get('/user/{name}', function ($name) {\n    //\n})->where('name', '[A-Za-z]+');\n\nRoute::get('/user/{id}', function ($id) {\n    //\n})->where('id', '[0-9]+');\n\nRoute::get('/user/{id}/{name}', function ($id, $name) {\n    //\n})->where(['id' => '[0-9]+', 'name' => '[a-z]+']);\n```\n\nSee also: [Regex Cheatsheet](/regex)\n\n### Named Routes\n\nRoute names should always be unique\n\n```php\nRoute::get('/user/profile', function () {\n    //\n})->name('profile');\n```\n\n\n\n### Fallback Routes\n\n```php\nRoute::fallback(function () {\n    //\n});\n```\n\nExecuted when no other routes match\n\n### Route Groups\n\n#### Middleware\n\n```php\nRoute::middleware(['first', 'second'])->group(function () {\n    Route::get('/', function () {\n        // Uses first & second middleware...\n    });\n\n    Route::get('/user/profile', function () {\n        // Uses first & second middleware...\n    });\n});\n```\n\n#### URI Prefixes\n\n```php\nRoute::prefix('admin')->group(function () {\n    Route::get('/users', function () {\n        // Matches The \"/admin/users\" URL\n    });\n});\n```\n\n#### Name Prefix\n\n```php\nRoute::name('admin.')->group(function () {\n    Route::get('/users', function () {\n        // Route assigned name \"admin.users\"...\n    })->name('users');\n});\n```\n\nShare attributes across routes\n\n### Accessing current route\n\n```php\nuse Illuminate\\Support\\Facades\\Route;\n\n// Illuminate\\Routing\\Route\n$route = Route::current();\n\n// string\n$name = Route::currentRouteName();\n\n// string\n$action = Route::currentRouteAction();\n```\n"
            },
            {
                "title": "Helpers",
                "content": "\n### routes \n\n#### Named route\n\n```php\n$url = route('profile');\n```\n\nWith parameters\n\n```php\n// Route::get('/user/{id}/profile', /*...*/ )->name('profile);\n\n$url = route('profile', ['id' => 1]);\n\n// /user/1/profile/\n```\n\nWith query string\n\n```php\n// Route::get('/user/{id}/profile', /*...*/ )->name('profile);\n\n$url = route('profile', ['id' => 1, 'photos'=>'yes']);\n\n// /user/1/profile?photos=yes\n```\n\n#### Redirects\n\n```php\n// Generating Redirects...\nreturn redirect()->route('profile');\n```\n\n#### Eloquent Models\n\n```php\necho route('post.show', ['post' => $post]);\n```\n\nThe route helper will automatically extract the model's route key. See [Routing](#routing-cols-4)\n\n### URL Generation\n\nGenerate arbitrary URLs for your application that will automatically use the scheme (HTTP or HTTPS) and host from the\ncurrent request\n\n```php\n$post = App\\Models\\Post::find(1);\n\necho url(\"/posts/{$post->id}\");\n\n// http://example.com/posts/1\n```\n\n#### Current URL\n\n```php\n// Get the current URL without the query string...\necho url()->current();\n\n// Get the current URL including the query string...\necho url()->full();\n\n// Get the full URL for the previous request...\necho url()->previous();\n```\n\n### Named Route URL\n\n```php\n$url = route('profile');\n```\n\nSee [Named Route](#named-route)\n\n### Error Handling\n\n```php\npublic function isValid($value)\n{\n    try {\n        // Validate the value...\n    } catch (Throwable $e) {\n        report($e);\n\n        return false;\n    }\n}\n```\n\nReport an exception but continue handling the current request\n\n### HTTP Exceptions\n\n```php\n// page not found\nabort(404);\n\n// Unauthorized\nabort(401);\n\n// Forbidden\nabort(403);\n\n// Server Error\nabort(500);\n```\n\nGenerate an HTTP exception response using status code\n"
            },
            {
                "title": "Controllers",
                "content": "\n### Basic\n\n```php\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\User;\n\nclass UserController extends Controller\n{\n    public function show($id)\n    {\n        return view('user.profile', [\n            'user' => User::findOrFail($id)\n        ]);\n    }\n}\n```\n\nDefine a route for this controller method:\n\n```php\nuse App\\Http\\Controllers\\UserController;\n\nRoute::get('/user/{id}', [UserController::class, 'show']);\n```\n"
            },
            {
                "title": "Requests",
                "content": "\n### CSRF Protection\n\nLaravel automatically generates a CSRF \"token\" for each active user session.  \nThis token is used to verify that the authenticated user is the person actually making the requests.\n\nGet current session's token:\n\n```php\nRoute::get('/token', function (Request $request) {\n    $token = $request->session()->token();\n\n    $token = csrf_token();\n\n    // ...\n});\n```\n\n`POST`, `PUT`, `PATCH`, or `DELETE` forms should include a hidden CSRF `_token` field in the form to validate the\nrequest.\n\n```html\n<form method=\"POST\" action=\"/profile\">\n  @csrf\n\n  <!-- Equivalent to... -->\n  <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\" />\n</form>\n```\n\nSee [Forms](#forms-cols-3)\n\n### Accessing Request\n\nGet an instance of the current request by type-hinting the controller action or route closure\n\n```php\n// controller action\nclass UserController extends Controller\n{\n    public function store(Request $request)\n    {\n        $name = $request->input('name');\n    }\n}\n\n// closure\nRoute::get('/', function (Request $request) {\n    //\n});\n```\n\n[See Routing](#routing)\n\n### Path\n\nThe request's path information\n\n```php\n$uri = $request->path();\n\n// https://example.com/foo/bar --> foo/bar\n```\n\n#### Match path to pattern\n\nVerify that the incoming request path matches a given pattern\n\n```php\n// * is wildcard\nif ($request->is('admin/*')) {\n    //\n}\n```\n\nDetermine if the incoming request matches a named route\n\n```php\nif ($request->routeIs('admin.*')) {\n    //\n}\n```\n\n### URL\n\nFull URL for the incoming request\n\n```php\n// URL without the query string\n$url = $request->url();\n\n// URL including query string\n$urlWithQueryString = $request->fullUrl();\n\n// append data to query string\n$request->fullUrlWithQuery(['type' => 'phone']);\n```\n\n### Request Method\n\n```php\n$method = $request->method();\n\n// verify that the HTTP verb matches a given string\nif ($request->isMethod('post')) {\n    //\n}\n```\n\n### Client IP\n\n```php\n$ipAddress = $request->ip();\n```\n\n### Headers\n\n```php\n$value = $request->header('X-Header-Name');\n\n$value = $request->header('X-Header-Name', 'default value');\n\n// determine if the request contains a given header\nif ($request->hasHeader('X-Header-Name')) {\n    //\n}\n\n// retrieve a bearer token from the Authorization header\n$token = $request->bearerToken();\n```\n\n### Content Type\n\nReturn an array containing all the content types accepted by the request\n\n```php\n$contentTypes = $request->getAcceptableContentTypes();\n```\n\nBoolean check for content types are accepted by the request\n\n```php\nif ($request->accepts(['text/html', 'application/json'])) {\n    // ...\n}\n```\n\n### Input \n\nRetrieve all the incoming request's input data as an array\n\n```php\n$input = $request->all();\n```\n\nRetrieve all the incoming request's input data as a collection\n\n```php\n$input = $request->collect();\n\n// retrieve subset as collection\n$request->collect('users')->each(function ($user) {\n    // ...\n});\n```\n\nSee [Helpers](#helpers-cols-3)\n\nRetrieve user input (also gets values from query string)\n\n```php\n$name = $request->input('name');\n\n// with default value if none present\n$name = $request->input('name', 'Sally');\n```\n\nAccess array inputs\n\n```php\n$name = $request->input('products.0.name');\n\n$names = $request->input('products.*.name');\n```\n\nRetrieve all the input values as an associative array:\n\n```php\n$input = $request->input();\n```\n\nOnly retrieve values from the query string:\n\n```php\n$name = $request->query('name');\n\n// with default value\n$name = $request->query('name', 'Helen');\n```\n\nRetrieve all the query string values as an associative array:\n\n```php\n$query = $request->query();\n```\n\n#### Boolean Input Values\n\nHelpful for checkbox inputs or other booleans. Return `true` for `1`, `\"1\"`, `true`, `\"true\"`, `\"on\"`, and `\"yes\"`.  \nAll other values will return `false`\n\n```php\n$archived = $request->boolean('archived');\n```\n\n### Dynamic Properties\n\nAccess inputs via properties.  \nIf not found as an input, the route parameters will be checked.\n\n```php\n$name = $request->name;\n```\n\n### Retrieve Partial Input\n\n```php\n$input = $request->only(['username', 'password']);\n\n$input = $request->only('username', 'password');\n\n$input = $request->except(['credit_card']);\n\n$input = $request->except('credit_card');\n```\n\n### Check Existence\n\nDetermine if value(s) present\n\n```php\nif ($request->has('name')) {\n    //\n}\n\n// check if ALL values are present\nif ($request->has(['name', 'email'])) {\n    //\n}\n\n// if any values are present\nif ($request->hasAny(['name', 'email'])) {\n    //\n}\n\n// if a file is present on request\nif ($request->hasFile('image')) {\n    //\n}\n```\n\n### Old Input\n\nRetrieve input from the previous request\n\n```php\n$username = $request->old('username');\n```\n\nOr use the `old()` helper\n\n```php\n<input type=\"text\" name=\"username\" value=\"{{ old('username') }}\">\n```\n\n  \n\n\n### Uploaded Files\n\nRetrieve uploaded file from request\n\n```php\n$file = $request->file('photo');\n\n$file = $request->photo;\n```\n\nGet file path or extension\n\n```php\n$path = $request->photo->path();\n\n$extension = $request->photo->extension();\n```\n\nStore uploaded file with a randomly generated filename\n\n```php\n// path where the file should be stored relative to\n// the filesystem's configured root directory\n$path = $request->photo->store('images');\n\n// optional 2nd param to specify the filesystem disk\n$path = $request->photo->store('images', 's3');\n```\n\nStore uploaded file and specify the name\n\n```php\n$path = $request->photo->storeAs('images', 'filename.jpg');\n\n$path = $request->photo->storeAs('images', 'filename.jpg', 's3');\n```\n\nSee More: [Laravel File Storage](https://laravel.com/docs/8.x/filesystem)\n"
            },
            {
                "title": "Views",
                "content": "\n### Intro\n\n- [Laravel Docs - Views](https://laravel.com/docs/8.x/views)\n\n```html\n<!-- View stored in resources/views/greeting.blade.php -->\n\n<html>\n  <body>\n    <h1>Hello, <?php echo $name; ?></h1>\n  </body>\n</html>\n```\n\nCreate a view by placing a file with the `.blade.php` extension in the `resources/views` directory.\n\n### Pass Data to Views\n\n#### As an array\n\n```php\nreturn view('greetings', ['name' => 'Victoria']);\n```\n\n#### Using with()\n\n```php\nreturn view('greeting')\n            ->with('name', 'Victoria')\n            ->with('occupation', 'Astronaut');\n```\n\nAccess each value using the data's keys\n\n```html\n<html>\n  <body>\n    <h1>Hello, {{ $name }}</h1>\n    <!-- Or -->\n    <h1>Hello, <?php echo $name; ?></h1>\n  </body>\n</html>\n```\n\n### view helper\n\nReturn a view from a route with the `view()` helper\n\n```php\nRoute::get('/', function () {\n    return view('greeting', ['name' => 'James']);\n});\n```\n\n and [Helpers](#helpers)\n\n### Subdirectories\n\n```php\n// resources/views/admin.profile.blade.php\nreturn view('admin.profile');\n```\n"
            },
            {
                "title": "Blade Templates",
                "content": "\n### Intro\n\n- [Laravel Docs - Blade Templates](https://laravel.com/docs/8.x/blade)\n\nBlade is the templating engine included in Laravel that also allows you to use plain PHP.\n\n### Views\n\nBlade views are returned using the `view()` helper\n\n```php\nRoute::get('/', function () {\n    return view('welcome', ['name' => 'Samantha']);\n});\n```\n\n\n\n### Comments\n\n```html\n{{-- This comment will not be present in the rendered HTML --}}\n```\n\n### Directives \n\n#### if Statements\n\n```php\n@if (count($records) === 1)\n    I have one record!\n@elseif (count($records) > 1)\n    I have multiple records!\n@else\n    I don't have any records!\n@endif\n```\n\n#### isset & empty\n\n```php\n@isset($records)\n    // $records is defined and is not null...\n@endisset\n\n@empty($records)\n    // $records is \"empty\"...\n@endempty\n```\n\n#### Authentication\n\n```php\n@auth\n    // The user is authenticated...\n@endauth\n\n@guest\n    // The user is not authenticated...\n@endguest\n```\n\n#### Loops\n\n\n```html\n@for ($i = 0; $i < 10; $i++)\n    The current value is {{ $i }}\n@endfor\n\n@foreach ($users as $user)\n    <p>This is user {{ $user->id }}</p>\n@endforeach\n\n@forelse ($users as $user)\n    <li>{{ $user->name }}</li>\n@empty\n    <p>No users</p>\n@endforelse\n\n@while (true)\n    <p>I'm looping forever.</p>\n@endwhile\n```\n\nLoop Iteration:\n\n```php\n@foreach ($users as $user)\n    @if ($loop->first)\n        This is the first iteration.\n    @endif\n\n    @if ($loop->last)\n        This is the last iteration.\n    @endif\n\n    <p>This is user {{ $user->id }}</p>\n@endforeach\n```\n\nSee more: [Laravel Loop Variable](https://laravel.com/docs/8.x/blade#the-loop-variable)\n\n### Displaying Data\n\nBlade's echo statements `{{ }}` are automatically sent through PHP's `htmlspecialchars` function to prevent XSS attacks.\n\nDisplay the contents of the name variable:\n\n```html\nHello, {{ $name }}.\n```\n\nDisplay results of a PHP function:\n\n```html\nThe current UNIX timestamp is {{ time() }}.\n```\n\nDisplay data without escaping with `htmlspecialchars`\n\n```html\nHello, {!! $name !!}.\n```\n\n### Including Subviews\n\nInclude a Blade view from within another view.  \nAll variables that are available to the parent view are also available to the included view\n\n```html\n<div>\n  <!-- resources/views/shared/errors/blade.php -->\n  @include('shared.errors')\n\n  <form>\n    <!-- Form Contents -->\n  </form>\n</div>\n```\n\n### Raw PHP\n\nExecute a block of plain PHP\n\n```php\n@php\n    $counter = 1;\n@endphp\n```\n\n### Stacks\n\nBlade allows you to push to named stacks which can be rendered in another view or layout.  \nUseful for javascript libraries required by child views\n\n```html\n<!-- Add to the stack -->\n@push('scripts')\n<script src=\"/example.js\"></script>\n@endpush\n```\n\nRender the stack\n\n```html\n<head>\n  <!-- Head Contents -->\n\n  @stack('scripts')\n</head>\n```\n\nPrepend to the beginning of a stack\n\n```php\n@push('scripts')\n    This will be second...\n@endpush\n\n// Later...\n\n@prepend('scripts')\n    This will be first...\n@endprepend\n```\n"
            },
            {
                "title": "Forms",
                "content": "\n### Intro\n\n- [Laravel Docs - Forms](https://laravel.com/docs/8.x/blade#forms)\n\n### CSRF Field\n\nInclude a hidden CSRF token field to validate the request\n\n\n```html\n<form method=\"POST\" action=\"/profile\">\n  @csrf\n\n  ...\n</form>\n```\n\n\n\n### Method Field\n\nSince HTML forms can't make `PUT`, `PATCH`, or `DELETE` requests, you will need to add a hidden `_method` field to spoof\nthese HTTP verbs:\n\n\n```html\n<form action=\"/post/my-post\" method=\"POST\">\n  @method('PUT')\n\n  ...\n</form>\n```\n\n### Validation Errors\n\n\n```html\n<!-- /resources/views/post/create.blade.php -->\n\n<label for=\"title\">Post Title</label>\n\n<input id=\"title\" type=\"text\" class=\"@error('title') is-invalid @enderror\" />\n\n@error('title')\n  <div class=\"alert alert-danger\">{{ $message }}</div>\n@enderror\n```\n\n\n\n### Repopulating Forms\n\nWhen redirecting due to a validation error, request input is flashed to the session.  \nRetrieve the input from the previous request with the `old` method\n\n```php\n$title = $request->old('title');\n```\n\nOr the `old()` helper\n\n```html\n<input type=\"text\" name=\"title\" value=\"{{ old('title') }}\" />\n```\n"
            },
            {
                "title": "Validation",
                "content": "\n### Intro\n\n- [Laravel Docs - Validation](https://laravel.com/docs/8.x/validation)\n\nIf validation fails, a redirect response to the previous URL will be generated.  \nIf the incoming request is an XHR request, a JSON response with the validation error messages will be returned.\n\n### Logic\n\n```php\n// in routes/web.php\nRoute::get('/post/create', [App\\Http\\Controllers\\PostController::class, 'create']);\nRoute::post('/post', [App\\Http\\Controllers\\PostController::class, 'store']);\n\n// in app/Http/Controllers/PostController...\npublic function store(Request $request)\n{\n    $validated = $request->validate([\n        // input name => validation rules\n        'title' => 'required|unique:posts|max:255',\n        'body' => 'required',\n    ]);\n\n    // The blog post is valid...\n}\n```\n\n### Rules \n\nCan also be passed as an array\n\n```php\n$validatedData = $request->validate([\n    'title' => ['required', 'unique:posts', 'max:255'],\n    'body' => ['required'],\n]);\n```\n\n#### after:date\n\nField must be a value after a given date.\n\n```php\n'start_date' => 'required|date|after:tomorrow'\n```\n\nInstead of a date string, you may specify another field to compare against the date\n\n```php\n'finish_date' => 'required|date|after:start_date'\n```\n\nSee [before:date](#beforedate)\n\n#### after_or_equal:date\n\nField must be a value after or equal to the given date.  \nSee [after:date](#afterdate)\n\n#### before:date\n\nField must be a value preceding the given date.  \nThe name of another field may be supplied as the value of `date`.  \nSee [after:date](#afterdate)\n\n#### alpha_num\n\nField must be entirely alpha-numeric characters\n\n#### boolean\n\nField must be able to be cast as a `boolean`.  \nAccepted input are `true`, `false`, `1`, `0`, `\"1\"`, and `\"0\"`\n\n#### confirmed\n\nField must have a matching field of `{field}_confirmation`.  \nFor example, if the field is password, a matching `password_confirmation` field must be present\n\n#### current_password\n\nField must match the authenticated user's password.\n\n#### date\n\nField must be a valid, non-relative date according to the `strtotime` PHP function.\n\n#### email\n\nField must be formatted as an email address.\n\n#### file\n\nField must be a successfully uploaded file.  \n\n\n#### max:value\n\nField must be less than or equal to a maximum value.  \nStrings, numerics, arrays, and files are evaluated like the [size](#sizevalue) rule.\n\n#### min:value\n\nField must have a minimum value.  \nStrings, numerics, arrays, and files are evaluated like the [size](#sizevalue) rule.\n\n#### mimetypes:text/plain,...\n\nFile must match one of the given MIME types:\n\n```php\n'video' => 'mimetypes:video/avi,video/mpeg,video/quicktime'\n```\n\nFile's contents will be read and the framework will attempt to guess the MIME type, regardless of the client's provided\nMIME type.\n\n#### mimes:foo,bar,...\n\nField must have a MIME type corresponding to one of the listed extensions.\n\n```php\n'photo' => 'mimes:jpg,bmp,png'\n```\n\nFile's contents will be read and the framework will attempt to guess the MIME type, regardless of the client's provided\nMIME type.\n\n[Full listing of MIME types & extensions](https://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types)\n\n#### nullable\n\nField may be null.\n\n#### numeric\n\nField must be numeric.\n\n#### password\n\nField must match the authenticated user's password.\n\n#### prohibited\n\nField must be empty or not present.\n\n#### prohibited_if:anotherfield,value,...\n\nField must be empty or not present if the _anotherfield_ field is equal to any value.\n\n#### prohibited_unless:anotherfield,value,...\n\nField must be empty or not present unless the _anotherfield_ field is equal to any value.\n\n#### required\n\nField must be present in the input data and not empty.  \nA field is considered \"empty\" if one of the following conditions are true:\n\n- The value is `null`.\n- The value is an empty string.\n- The value is an empty array or empty `Countable` object.\n- The value is an uploaded file with no path.\n\n#### required_with:foo,bar,...\n\nField must be present and not empty, only if any of the other specified fields are present and not empty\n\n#### size:value\n\nField must have a size matching the given value.\n\n- For strings: number of characters\n- For numeric data: integer value (must also have the `numeric` or `integer` rule).\n- For arrays: count of the array\n- For files: file size in kilobytes\n\n```php\n// Validate that a string is exactly 12 characters long...\n'title' => 'size:12';\n// Validate that a provided integer equals 10...\n'seats' => 'integer|size:10';\n// Validate that an array has exactly 5 elements...\n'tags' => 'array|size:5';\n// Validate that an uploaded file is exactly 512 kilobytes...\n'image' => 'file|size:512';\n```\n\n#### unique:table,column\n\nField must not exist within the given database table\n\n#### url\n\nField must be a valid URL\n\n[See all available rules](https://laravel.com/docs/8.x/validation#available-validation-rules)\n\n### Validate Passwords\n\nEnsure passwords have an adequate level of complexity\n\n```php\n$validatedData = $request->validate([\n    'password' => ['required', 'confirmed', Password::min(8)],\n]);\n```\n\n`Password` rule object allows you to easily customize the password complexity requirements\n\n```php\n// Require at least 8 characters...\nPassword::min(8)\n\n// Require at least one letter...\nPassword::min(8)->letters()\n\n// Require at least one uppercase and one lowercase letter...\nPassword::min(8)->mixedCase()\n\n// Require at least one number...\nPassword::min(8)->numbers()\n\n// Require at least one symbol...\nPassword::min(8)->symbols()\n```\n\nEnsure a password has not been compromised in a public password data breach leak\n\n```php\nPassword::min(8)->uncompromised()\n```\n\n> _Uses the [k-Anonymity](https://en.wikipedia.org/wiki/K-anonymity) model via the\n> [haveibeenpwned.com](https://haveibeenpwned.com) service without sacrificing the user's privacy or security_\n\nMethods can be chained\n\n```php\nPassword::min(8)\n    ->letters()\n    ->mixedCase()\n    ->numbers()\n    ->symbols()\n    ->uncompromised()\n```\n\n### Display Validation Errors\n\n```php\n<!-- /resources/views/post/create.blade.php -->\n\n<h1>Create Post</h1>\n\n@if ($errors->any())\n    <div class=\"alert alert-danger\">\n        <ul>\n            @foreach ($errors->all() as $error)\n                <li>{{ $error }}</li>\n            @endforeach\n        </ul>\n    </div>\n@endif\n\n<!-- Create Post Form -->\n```\n\n\n\n### Optional Fields\n\nYou will often need to mark your \"optional\" request fields as `nullable` if you do not want the validator to consider\n`null` values as invalid\n\n```php\n// publish_at field may be either null or a valid date representation\n$request->validate([\n    'title' => 'required|unique:posts|max:255',\n    'body' => 'required',\n    'publish_at' => 'nullable|date',\n]);\n```\n\n### Validated Input\n\nRetrieve the request data that underwent validation\n\n```php\n$validated = $request->validated();\n```\n\nOr with `safe()`, which returns an instance of `Illuminate\\Support\\ValidatedInput`\n\n```php\n$validated = $request->safe()->only(['name', 'email']);\n\n$validated = $request->safe()->except(['name', 'email']);\n\n$validated = $request->safe()->all();\n```\n\n#### Iterate\n\n```php\nforeach ($request->safe() as $key => $value) {\n    //\n}\n```\n\n#### Access as an array\n\n```php\n$validated = $request->safe();\n\n$email = $validated['email'];\n```\n"
            },
            {
                "title": "Session",
                "content": "\n### Intro\n\n- [Laravel Docs - Session](https://laravel.com/docs/8.x/session)\n\nLaravel ships with a variety of session backends that are accessed through a unified API. Memcached, Redis, and database\nsupport is included.\n\n#### Configuration\n\nSession configuration is in `config/session.php`.  \nBy default, Laravel is configured to use the file session driver\n\n### Check Isset / Exists\n\nReturns `true` if the item is present and is not `null`:\n\n```php\nif ($request->session()->has('users')) {\n    //\n}\n```\n\nReturns `true` if present, even if it's `null`:\n\n```php\nif ($request->session()->exists('users')) {\n    //\n}\n```\n\nReturns `true` if the item is `null` or is not present:\n\n```php\nif ($request->session()->missing('users')) {\n    //\n}\n```\n\n### Retrieving Data \n\n#### Via Request\n\n```php\n// ...\nclass UserController extends Controller\n{\n    public function show(Request $request, $id)\n    {\n        $value = $request->session()->get('key');\n\n        //\n    }\n}\n```\n\nPass a default value as the second argument to use if the key does not exist\n\n```php\n$value = $request->session()->get('key', 'default');\n\n// closure can be passed and executed as a default\n$value = $request->session()->get('key', function () {\n    return 'default';\n});\n```\n\n#### Via session helper\n\n```php\nRoute::get('/home', function () {\n    // Retrieve a piece of data from the session...\n    $value = session('key');\n\n    // Specifying a default value...\n    $value = session('key', 'default');\n\n    // Store a piece of data in the session...\n    session(['key' => 'value']);\n});\n```\n\nSee: [Session Helper]()\n\n#### All Session Data\n\n```php\n$data = $request->session()->all();\n```\n\n#### Retrieve and Delete\n\nRetrieve and delete an item from the session\n\n```php\n$value = $request->session()->pull('key', 'default');\n```\n\n### Store Data\n\nVia a request instance\n\n```php\n$request->session()->put('key', 'value');\n```\n\nVia the global \"session\" helper\n\n```php\nsession(['key' => 'value']);\n```\n\nPush a new value onto a session value that is an array\n\n```php\n// array of team names\n$request->session()->push('user.teams', 'developers');\n```\n"
            },
            {
                "title": "Logging",
                "content": "\n### Configuration\n\nConfiguration options for logging behavior is in `config/logging.php`.  \nBy default, Laravel will use the stack channel when logging messages, which aggregates multiple log channels into a\nsingle channel.\n\n### Levels \n\nAll the log levels defined in the [RFC 5424 specification](https://tools.ietf.org/html/rfc5424) are available:\n\n- emergency\n- alert\n- critical\n- error\n- warning\n- notice\n- info\n- debug\n\n### Log Facade \n\n```php\nuse Illuminate\\Support\\Facades\\Log;\n\nLog::emergency($message);\nLog::alert($message);\nLog::critical($message);\nLog::error($message);\nLog::warning($message);\nLog::notice($message);\nLog::info($message);\nLog::debug($message);\n```\n\n### Contextual Info\n\n```php\nuse Illuminate\\Support\\Facades\\Log;\n\nLog::info('User failed to login.', ['id' => $user->id]);\n```\n"
            },
            {
                "title": "Deployment",
                "content": "\n### Intro\n\n- [Laravel Docs - Deployment](https://laravel.com/docs/8.x/deployment)\n\nEnsure your web server directs all requests to your application's `public/index.php` file\n\n### Optimization\n\n#### Composer's autoloader map\n\n```bash\ncomposer install --optimize-autoloader --no-dev\n```\n\n#### Configuration Loading\n\nBe sure that you are only calling the `env` function from within your configuration files.  \nOnce the configuration has been cached, the `.env` file will not be loaded and all calls to the `env` function for\n`.env` variables will return `null`\n\n```bash\nphp artisan config:cache\n```\n\n#### Route Loading\n\n```bash\nphp artisan route:cache\n```\n\n#### View Loading\n\n```bash\nphp artisan view:cache\n```\n\n### Debug Mode\n\nThe debug option in your `config/app.php` determines how much information about an error is actually displayed to the\nuser.  \nBy default, this option is set to the value of the `APP_DEBUG` environment variable in your `.env` file. In your\nproduction environment, this value should always be `false`.  \nIf the `APP_DEBUG` variable is set to `true` in production, you risk exposing sensitive configuration values to end\nusers.\n"
            },
            {
                "title": "Also see",
                "content": "\n- [Laravel Docs](https://laravel.com/docs/8.x)\n- [Laracasts](https://laracasts.com/)\n- [Laravel API](https://laravel.com/api/8.x/)"
            }
        ]
    },
    {
        "name": "bash",
        "title": "Bash",
        "tags": [
            "shell",
            "sh",
            "echo",
            "script",
            "linux"
        ],
        "categories": [
            "Programming",
            "Operating System"
        ],
        "background": "#3e4548",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/bash.svg",
        "intro": "This is a quick reference cheat sheet to getting started with linux bash shell scripting.",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### hello.sh\n\n```bash\n#!/bin/bash\n\nVAR=\"world\"\necho \"Hello $VAR!\" # => Hello world!\n```\n\nExecute the script\n\n```shell script\n$ bash hello.sh\n```\n\n### Variables\n\n```bash\nNAME=\"John\"\n\necho ${NAME}    # => John (Variables)\necho $NAME      # => John (Variables)\necho \"$NAME\"    # => John (Variables)\necho '$NAME'    # => $NAME (Exact string)\necho \"${NAME}!\" # => John! (Variables)\n\nNAME = \"John\"   # => Error (about space)\n```\n\n### Comments\n\n```bash\n# This is an inline Bash comment.\n```\n\n```bash\n: '\nThis is a\nvery neat comment\nin bash\n'\n```\n\nMulti-line comments use `:'` to open and `'` to close\n\n### Arguments \n\n| Expression  | Description                           |\n| ----------- | ------------------------------------- |\n| `$1` \u2026 `$9` | Parameter 1 ... 9                     |\n| `$0`        | Name of the script itself             |\n| `$1`        | First argument                        |\n| `${10}`     | Positional parameter 10               |\n| `$#`        | Number of arguments                   |\n| `$$`        | Process id of the shell               |\n| `$*`        | All arguments                         |\n| `$@`        | All arguments, starting from first    |\n| `$-`        | Current options                       |\n| `$_`        | Last argument of the previous command |\n\nSee: [Special parameters](http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables)\n\n### Functions\n\n```bash\nget_name() {\n    echo \"John\"\n}\n\necho \"You are $(get_name)\"\n```\n\n\n\n### Conditionals {#conditionals-example}\n\n```bash\nif [[ -z \"$string\" ]]; then\n    echo \"String is empty\"\nelif [[ -n \"$string\" ]]; then\n    echo \"String is not empty\"\nfi\n```\n\n\n\n### Brace expansion\n\n```bash\necho {A,B}.js\n```\n\n---\n\n| Expression | Description         |\n| ---------- | ------------------- |\n| `{A,B}`    | Same as `A B`       |\n| `{A,B}.js` | Same as `A.js B.js` |\n| `{1..5}`   | Same as `1 2 3 4 5` |\n\nSee: [Brace expansion](http://wiki.bash-hackers.org/syntax/expansion/brace)\n\n### Shell execution\n\n```bash\n# => I'm in /path/of/current\necho \"I'm in $(PWD)\"\n\n# Same as:\necho \"I'm in `pwd`\"\n```\n\nSee: [Command substitution](http://wiki.bash-hackers.org/syntax/expansion/cmdsubst)\n"
            },
            {
                "title": "Bash Parameter expansions",
                "content": "\n### Syntax \n\n| Code              | Description         |\n| ----------------- | ------------------- |\n| `${FOO%suffix}`   | Remove suffix       |\n| `${FOO#prefix}`   | Remove prefix       |\n| `${FOO%%suffix}`  | Remove long suffix  |\n| `${FOO##prefix}`  | Remove long prefix  |\n| `${FOO/from/to}`  | Replace first match |\n| `${FOO//from/to}` | Replace all         |\n| `${FOO/%from/to}` | Replace suffix      |\n| `${FOO/#from/to}` | Replace prefix      |\n\n#### Substrings\n\n| Expression      | Description                    |\n| --------------- | ------------------------------ |\n| `${FOO:0:3}`    | Substring _(position, length)_ |\n| `${FOO:(-3):3}` | Substring from the right       |\n\n#### Length\n\n| Expression | Description      |\n| ---------- | ---------------- |\n| `${#FOO}`  | Length of `$FOO` |\n\n#### Default values\n\n| Expression        | Description                              |\n| ----------------- | ---------------------------------------- |\n| `${FOO:-val}`     | `$FOO`, or `val` if unset                |\n| `${FOO:=val}`     | Set `$FOO` to `val` if unset             |\n| `${FOO:+val}`     | `val` if `$FOO` is set                   |\n| `${FOO:?message}` | Show message and exit if `$FOO` is unset |\n\n### Substitution\n\n```bash\necho ${food:-Cake}  #=> $food or \"Cake\"\n```\n\n```bash\nSTR=\"/path/to/foo.cpp\"\necho ${STR%.cpp}    # /path/to/foo\necho ${STR%.cpp}.o  # /path/to/foo.o\necho ${STR%/*}      # /path/to\n\necho ${STR##*.}     # cpp (extension)\necho ${STR##*/}     # foo.cpp (basepath)\n\necho ${STR#*/}      # path/to/foo.cpp\necho ${STR##*/}     # foo.cpp\n\necho ${STR/foo/bar} # /path/to/bar.cpp\n```\n\n### Slicing\n\n```bash\nname=\"John\"\necho ${name}           # => John\necho ${name:0:2}       # => Jo\necho ${name::2}        # => Jo\necho ${name::-1}       # => Joh\necho ${name:(-1)}      # => n\necho ${name:(-2)}      # => hn\necho ${name:(-2):2}    # => hn\n\nlength=2\necho ${name:0:length}  # => Jo\n```\n\nSee: [Parameter expansion](http://wiki.bash-hackers.org/syntax/pe)\n\n### basepath & dirpath\n\n```bash\nSRC=\"/path/to/foo.cpp\"\n```\n\n```bash\nBASEPATH=${SRC##*/}\necho $BASEPATH  # => \"foo.cpp\"\n\n\nDIRPATH=${SRC%$BASEPATH}\necho $DIRPATH   # => \"/path/to/\"\n```\n\n### Transform\n\n```bash\nSTR=\"HELLO WORLD!\"\necho ${STR,}   # => hELLO WORLD!\necho ${STR,,}  # => hello world!\n\nSTR=\"hello world!\"\necho ${STR^}   # => Hello world!\necho ${STR^^}  # => HELLO WORLD!\n\nARR=(hello World)\necho \"${ARR[@],}\" # => hello world\necho \"${ARR[@]^}\" # => Hello World\n```\n"
            },
            {
                "title": "Bash Arrays",
                "content": "\n### Defining arrays\n\n```bash\nFruits=('Apple' 'Banana' 'Orange')\n\nFruits[0]=\"Apple\"\nFruits[1]=\"Banana\"\nFruits[2]=\"Orange\"\n\nARRAY1=(foo{1..2}) # => foo1 foo2\nARRAY2=({A..D})    # => A B C D\n\n# Merge => foo1 foo2 A B C D\nARRAY3=(${ARRAY1[@]} ${ARRAY2[@]})\n\n# declare construct\ndeclare -a Numbers=(1 2 3)\nNumbers+=(4 5) # Append => 1 2 3 4 5\n```\n\n### Indexing\n\n| -                  | -             |\n| ------------------ | ------------- |\n| `${Fruits[0]}`     | First element |\n| `${Fruits[-1]}`    | Last element  |\n| `${Fruits[*]}`     | All elements  |\n| `${Fruits[@]}`     | All elements  |\n| `${#Fruits[@]}`    | Number of all |\n| `${#Fruits}`       | Length of 1st |\n| `${#Fruits[3]}`    | Length of nth |\n| `${Fruits[@]:3:2}` | Range         |\n| `${!Fruits[@]}`    | Keys of all   |\n\n### Iteration\n\n```bash\nFruits=('Apple' 'Banana' 'Orange')\n\nfor e in \"${Fruits[@]}\"; do\n    echo $e\ndone\n```\n\n#### With index\n\n```bash\nfor i in \"${!Fruits[@]}\"; do\n  printf \"%s\\t%s\\n\" \"$i\" \"${Fruits[$i]}\"\ndone\n\n```\n\n### Operations \n\n```bash\nFruits=(\"${Fruits[@]}\" \"Watermelon\")     # Push\nFruits+=('Watermelon')                   # Also Push\nFruits=( ${Fruits[@]/Ap*/} )             # Remove by regex match\nunset Fruits[2]                          # Remove one item\nFruits=(\"${Fruits[@]}\")                  # Duplicate\nFruits=(\"${Fruits[@]}\" \"${Veggies[@]}\")  # Concatenate\nlines=(`cat \"logfile\"`)                  # Read from file\n```\n\n### Arrays as arguments\n\n```bash\nfunction extract()\n{\n    local -n myarray=$1\n    local idx=$2\n    echo \"${myarray[$idx]}\"\n}\nFruits=('Apple' 'Banana' 'Orange')\nextract Fruits 2     # => Orangle\n```\n"
            },
            {
                "title": "Bash Dictionaries",
                "content": "\n### Defining\n\n```bash\ndeclare -A sounds\n```\n\n```bash\nsounds[dog]=\"bark\"\nsounds[cow]=\"moo\"\nsounds[bird]=\"tweet\"\nsounds[wolf]=\"howl\"\n```\n\n### Working with dictionaries\n\n```bash\necho ${sounds[dog]} # Dog's sound\necho ${sounds[@]}   # All values\necho ${!sounds[@]}  # All keys\necho ${#sounds[@]}  # Number of elements\nunset sounds[dog]   # Delete dog\n```\n\n### Iteration\n\n```bash\nfor val in \"${sounds[@]}\"; do\n    echo $val\ndone\n```\n\n---\n\n```bash\nfor key in \"${!sounds[@]}\"; do\n    echo $key\ndone\n```\n"
            },
            {
                "title": "Bash Conditionals",
                "content": "\n### Integer conditions\n\n| Condition           | Description                                 |\n| ------------------- | ------------------------------------------- |\n| `[[ NUM -eq NUM ]]` | <yel>Eq</yel>ual                            |\n| `[[ NUM -ne NUM ]]` | <yel>N</yel>ot <yel>e</yel>qual             |\n| `[[ NUM -lt NUM ]]` | <yel>L</yel>ess <yel>t</yel>han             |\n| `[[ NUM -le NUM ]]` | <yel>L</yel>ess than or <yel>e</yel>qual    |\n| `[[ NUM -gt NUM ]]` | <yel>G</yel>reater <yel>t</yel>han          |\n| `[[ NUM -ge NUM ]]` | <yel>G</yel>reater than or <yel>e</yel>qual |\n| `(( NUM < NUM ))`   | Less than                                   |\n| `(( NUM <= NUM ))`  | Less than or equal                          |\n| `(( NUM > NUM ))`   | Greater than                                |\n| `(( NUM >= NUM ))`  | Greater than or equal                       |\n\n### String conditions\n\n| Condition          | Description                 |\n| ------------------ | --------------------------- |\n| `[[ -z STR ]]`     | Empty string                |\n| `[[ -n STR ]]`     | <yel>N</yel>ot empty string |\n| `[[ STR == STR ]]` | Equal                       |\n| `[[ STR = STR ]]`  | Equal (Same above)          |\n| `[[ STR < STR ]]`  | Less than _(ASCII)_         |\n| `[[ STR > STR ]]`  | Greater than _(ASCII)_      |\n| `[[ STR != STR ]]` | Not Equal                   |\n| `[[ STR =~ STR ]]` | Regexp                      |\n\n### Example \n\n#### String\n\n```bash\nif [[ -z \"$string\" ]]; then\n    echo \"String is empty\"\nelif [[ -n \"$string\" ]]; then\n    echo \"String is not empty\"\nelse\n    echo \"This never happens\"\nfi\n```\n\n#### Combinations\n\n```bash\nif [[ X && Y ]]; then\n    ...\nfi\n```\n\n#### Equal\n\n```bash\nif [[ \"$A\" == \"$B\" ]]; then\n    ...\nfi\n```\n\n#### Regex\n\n```bash\nif [[ '1. abc' =~ ([a-z]+) ]]; then\n    echo ${BASH_REMATCH[1]}\nfi\n```\n\n#### Smaller\n\n```bash\nif (( $a < $b )); then\n   echo \"$a is smaller than $b\"\nfi\n```\n\n#### Exists\n\n```bash\nif [[ -e \"file.txt\" ]]; then\n    echo \"file exists\"\nfi\n```\n\n### File conditions \n\n| Condition         | Description                            |\n| ----------------- | -------------------------------------- |\n| `[[ -e FILE ]]`   | <yel>E</yel>xists                      |\n| `[[ -d FILE ]]`   | <yel>D</yel>irectory                   |\n| `[[ -f FILE ]]`   | <yel>F</yel>ile                        |\n| `[[ -h FILE ]]`   | Symlink                                |\n| `[[ -s FILE ]]`   | Size is > 0 bytes                      |\n| `[[ -r FILE ]]`   | <yel>R</yel>eadable                    |\n| `[[ -w FILE ]]`   | <yel>W</yel>ritable                    |\n| `[[ -x FILE ]]`   | Executable                             |\n| `[[ f1 -nt f2 ]]` | f1 <yel>n</yel>ewer <yel>t</yel>han f2 |\n| `[[ f1 -ot f2 ]]` | f2 <yel>o</yel>lder <yel>t</yel>han f1 |\n| `[[ f1 -ef f2 ]]` | Same files                             |\n\n### More conditions\n\n| Condition            | Description          |\n| -------------------- | -------------------- | ----- | --- |\n| `[[ -o noclobber ]]` | If OPTION is enabled |\n| `[[ ! EXPR ]]`       | Not                  |\n| `[[ X && Y ]]`       | And                  |\n| `[[ X                |                      | Y ]]` | Or  |\n\n### logical and, or\n\n```bash\nif [ \"$1\" = 'y' -a $2 -gt 0 ]; then\n    echo \"yes\"\nfi\n\nif [ \"$1\" = 'n' -o $2 -lt 0 ]; then\n    echo \"no\"\nfi\n```\n"
            },
            {
                "title": "Bash Loops",
                "content": "\n### Basic for loop\n\n```bash\nfor i in /etc/rc.*; do\n    echo $i\ndone\n```\n\n### C-like for loop\n\n```bash\nfor ((i = 0 ; i < 100 ; i++)); do\n    echo $i\ndone\n```\n\n### Ranges \n\n```bash\nfor i in {1..5}; do\n    echo \"Welcome $i\"\ndone\n```\n\n#### With step size\n\n```bash\nfor i in {5..50..5}; do\n    echo \"Welcome $i\"\ndone\n```\n\n### Auto increment\n\n```bash\ni=1\nwhile [[ $i -lt 4 ]]; do\n    echo \"Number: $i\"\n    ((i++))\ndone\n```\n\n### Auto decrement\n\n```bash\ni=3\nwhile [[ $i -gt 0 ]]; do\n    echo \"Number: $i\"\n    ((i--))\ndone\n```\n\n### Continue\n\n```bash {data=3,5}\nfor number in $(seq 1 3); do\n    if [[ $number == 2 ]]; then\n        continue;\n    fi\n    echo \"$number\"\ndone\n```\n\n### Break\n\n```bash\nfor number in $(seq 1 3); do\n    if [[ $number == 2 ]]; then\n        # Skip entire rest of loop.\n        break;\n    fi\n    # This will only print 1\n    echo \"$number\"\ndone\n```\n\n### Until\n\n```bash\ncount=0\nuntil [ $count -gt 10 ]; do\n    echo \"$count\"\n    ((count++))\ndone\n```\n\n### Forever\n\n```bash\nwhile true; do\n    # here is some code.\ndone\n```\n\n### Forever (shorthand)\n\n```bash\nwhile :; do\n    # here is some code.\ndone\n```\n\n### Reading lines\n\n```bash\ncat file.txt | while read line; do\n    echo $line\ndone\n```\n"
            },
            {
                "title": "Bash Functions",
                "content": "\n### Defining functions\n\n```bash\nmyfunc() {\n    echo \"hello $1\"\n}\n```\n\n```bash\n# Same as above (alternate syntax)\nfunction myfunc() {\n    echo \"hello $1\"\n}\n```\n\n```bash\nmyfunc \"John\"\n```\n\n### Returning values\n\n```bash\nmyfunc() {\n    local myresult='some value'\n    echo $myresult\n}\n```\n\n```bash\nresult=\"$(myfunc)\"\n```\n\n### Raising errors\n\n```bash\nmyfunc() {\n    return 1\n}\n```\n\n```bash\nif myfunc; then\n    echo \"success\"\nelse\n    echo \"failure\"\nfi\n```\n"
            },
            {
                "title": "Bash Options",
                "content": "\n### Options\n\n```bash\n# Avoid overlay files\n# (echo \"hi\" > foo)\nset -o noclobber\n\n# Used to exit upon error\n# avoiding cascading errors\nset -o errexit\n\n# Unveils hidden failures\nset -o pipefail\n\n# Exposes unset variables\nset -o nounset\n```\n\n### Glob options\n\n```bash\n# Non-matching globs are removed\n# ('*.foo' => '')\nshopt -s nullglob\n\n# Non-matching globs throw errors\nshopt -s failglob\n\n# Case insensitive globs\nshopt -s nocaseglob\n\n# Wildcards match dotfiles\n# (\"*.sh\" => \".foo.sh\")\nshopt -s dotglob\n\n# Allow ** for recursive matches\n# ('lib/**/*.rb' => 'lib/a/b/c.rb')\nshopt -s globstar\n```\n"
            },
            {
                "title": "Bash History",
                "content": "\n### Commands\n\n| Command               | Description                               |\n| --------------------- | ----------------------------------------- |\n| `history`             | Show history                              |\n| `sudo !!`             | Run the previous command with sudo        |\n| `shopt -s histverify` | Don't execute expanded result immediately |\n\n### Expansions\n\n| Expression   | Description                                          |\n| ------------ | ---------------------------------------------------- |\n| `!$`         | Expand last parameter of most recent command         |\n| `!*`         | Expand all parameters of most recent command         |\n| `!-n`        | Expand `n`th most recent command                     |\n| `!n`         | Expand `n`th command in history                      |\n| `!<command>` | Expand most recent invocation of command `<command>` |\n\n### Operations\n\n| Code                 | Description                                                           |\n| -------------------- | --------------------------------------------------------------------- |\n| `!!`                 | Execute last command again                                            |\n| `!!:s/<FROM>/<TO>/`  | Replace first occurrence of `<FROM>` to `<TO>` in most recent command |\n| `!!:gs/<FROM>/<TO>/` | Replace all occurrences of `<FROM>` to `<TO>` in most recent command  |\n| `!$:t`               | Expand only basename from last parameter of most recent command       |\n| `!$:h`               | Expand only directory from last parameter of most recent command      |\n\n`!!` and `!$` can be replaced with any valid expansion.\n\n### Slices\n\n| Code     | Description                                                                              |\n| -------- | ---------------------------------------------------------------------------------------- |\n| `!!:n`   | Expand only `n`th token from most recent command (command is `0`; first argument is `1`) |\n| `!^`     | Expand first argument from most recent command                                           |\n| `!$`     | Expand last token from most recent command                                               |\n| `!!:n-m` | Expand range of tokens from most recent command                                          |\n| `!!:n-$` | Expand `n`th token to last from most recent command                                      |\n\n`!!` can be replaced with any valid expansion i.e. `!cat`, `!-2`, `!42`, etc.\n"
            },
            {
                "title": "Miscellaneous",
                "content": "\n### Numeric calculations\n\n```bash\n$((a + 200))      # Add 200 to $a\n```\n\n```bash\n$(($RANDOM%200))  # Random number 0..199\n```\n\n### Subshells\n\n```bash\n(cd somedir; echo \"I'm now in $PWD\")\npwd # still in first directory\n```\n\n### Inspecting commands\n\n```bash\ncommand -V cd\n#=> \"cd is a function/alias/whatever\"\n```\n\n### Redirection \n\n```bash\npython hello.py > output.txt   # stdout to (file)\npython hello.py >> output.txt  # stdout to (file), append\npython hello.py 2> error.log   # stderr to (file)\npython hello.py 2>&1           # stderr to stdout\npython hello.py 2>/dev/null    # stderr to (null)\npython hello.py &>/dev/null    # stdout and stderr to (null)\n```\n\n```bash\npython hello.py < foo.txt      # feed foo.txt to stdin for python\n```\n\n### Source relative\n\n```bash\nsource \"${0%/*}/../share/foo.sh\"\n```\n\n### Directory of script\n\n```bash\nDIR=\"${0%/*}\"\n```\n\n### Case/switch\n\n```bash\ncase \"$1\" in\n    start | up)\n    vagrant up\n    ;;\n\n    *)\n    echo \"Usage: $0 {start|stop|ssh}\"\n    ;;\nesac\n```\n\n### Trap errors \n\n```bash\ntrap 'echo Error at about $LINENO' ERR\n```\n\nor\n\n```bash\ntraperr() {\n    echo \"ERROR: ${BASH_SOURCE[1]} at about ${BASH_LINENO[0]}\"\n}\n\nset -o errtrace\ntrap traperr ERR\n```\n\n### printf\n\n```bash\nprintf \"Hello %s, I'm %s\" Sven Olga\n#=> \"Hello Sven, I'm Olga\n\nprintf \"1 + 1 = %d\" 2\n#=> \"1 + 1 = 2\"\n\nprintf \"Print a float: %f\" 2\n#=> \"Print a float: 2.000000\"\n```\n\n### Getting options \n\n```bash\nwhile [[ \"$1\" =~ ^- && ! \"$1\" == \"--\" ]]; do case $1 in\n    -V | --version )\n    echo $version\n    exit\n    ;;\n    -s | --string )\n    shift; string=$1\n    ;;\n    -f | --flag )\n    flag=1\n    ;;\nesac; shift; done\nif [[ \"$1\" == '--' ]]; then shift; fi\n```\n\n### Check for command's result \n\n```bash\nif ping -c 1 google.com; then\n    echo \"It appears you have a working internet connection\"\nfi\n```\n\n### Special variables \n\n| Expression | Description                  |\n| ---------- | ---------------------------- |\n| `$?`       | Exit status of last task     |\n| `$!`       | PID of last background task  |\n| `$$`       | PID of shell                 |\n| `$0`       | Filename of the shell script |\n\nSee [Special parameters](http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables).\n\n### Grep check \n\n```bash\nif grep -q 'foo' ~/.bash_history; then\n    echo \"You appear to have typed 'foo' in the past\"\nfi\n```\n\n### Backslash escapes \n\n- &nbsp;\n- \\!\n- \\\"\n- \\#\n- \\&\n- \\'\n- \\(\n- \\)\n- \\,\n- \\;\n- \\<\n- \\>\n- \\[\n- \\|\n- \\\\\n- \\]\n- \\^\n- \\{\n- \\}\n- \\`\n- \\$\n- \\*\n- \\?\n\n\n\nEscape these special characters with `\\`\n\n### Heredoc\n\n```sh\ncat <<END\nhello world\nEND\n```\n\n### Go to previous directory\n\n```bash\npwd # /home/user/foo\ncd bar/\npwd # /home/user/foo/bar\ncd -\npwd # /home/user/foo\n```\n\n### Reading input\n\n```bash\necho -n \"Proceed? [y/n]: \"\nread ans\necho $ans\n```\n\n```bash\nread -n 1 ans    # Just one character\n```\n\n### Conditional execution\n\n```bash\ngit commit && git push\ngit commit || echo \"Commit failed\"\n```\n\n### Strict mode\n\n```bash\nset -euo pipefail\nIFS=$'\\n\\t'\n```\n\nSee: [Unofficial bash strict mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/)\n\n### Optional arguments\n\n```bash\nargs=(\"$@\")\nargs+=(foo)\nargs+=(bar)\necho \"${args[@]}\"\n```\n\nPut the arguments into an array and then append\n"
            },
            {
                "title": "Also see",
                "content": "\n- [Devhints](https://devhints.io/bash) _(devhints.io)_\n- [Bash-hackers wiki](http://wiki.bash-hackers.org/) _(bash-hackers.org)_\n- [Shell vars](http://wiki.bash-hackers.org/syntax/shellvars) _(bash-hackers.org)_\n- [Learn bash in y minutes](https://learnxinyminutes.com/docs/bash/) _(learnxinyminutes.com)_\n- [Bash Guide](http://mywiki.wooledge.org/BashGuide) _(mywiki.wooledge.org)_\n- [ShellCheck](https://www.shellcheck.net/) _(shellcheck.net)_\n- [shell - Standard Shell](https://devmanual.gentoo.org/tools-reference/bash/index.html) _(devmanual.gentoo.org)_"
            }
        ]
    },
    {
        "name": "java",
        "title": "Java",
        "tags": [
            "object-oriented",
            "class"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#d33731",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/java.svg",
        "intro": "This cheat sheet is a crash course for Java beginners and help review the basic syntax of the Java language.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Hello.java \n\n```java\npublic class Hello {\n  // main method\n  public static void main(String[] args)\n  {\n    // Output: Hello, world!\n    System.out.println(\"Hello, world!\");\n  }\n}\n```\n\nCompiling and running\n\n```bash\n$ javac Hello.java\n$ java Hello\nHello, world!\n```\n\n### Variables\n\n```java\nint num = 5;\nfloat floatNum = 5.99f;\nchar letter = 'D';\nboolean bool = true;\nString site = \"cheatsheets.zip\";\n```\n\n### Primitive Data Types \n\n| Data Type | Size   | Default | Range               |\n| --------- | ------ | ------- | :------------------ |\n| `byte`    | 1 byte | 0       | -128 ^to^ 127       |\n| `short`   | 2 byte | 0       | -2^15^ ^to^ 2^15^-1 |\n| `int`     | 4 byte | 0       | -2^31^ ^to^ 2^31^-1 |\n| `long`    | 8 byte | 0       | -2^63^ ^to^ 2^63^-1 |\n| `float`   | 4 byte | 0.0f    | _N/A_               |\n| `double`  | 8 byte | 0.0d    | _N/A_               |\n| `char`    | 2 byte | \\\\u0000 | 0 ^to^ 65535        |\n| `boolean` | _N/A_  | false   | true / false        |\n\n\n\n### Strings\n\n```java\nString first = \"John\";\nString last = \"Doe\";\nString name = first + \" \" + last;\nSystem.out.println(name);\n```\n\n\n\n### Loops\n\n```java\nString word = \"CheatSheets\";\nfor (char c: word.toCharArray()) {\n  System.out.print(c + \"-\");\n}\n// Outputs: C-h-e-a-t-S-h-e-e-t-s-\n```\n\n\n\n### Arrays\n\n```java\nchar[] chars = new char[10];\nchars[0] = 'a'\nchars[1] = 'b'\n\nString[] letters = {\"A\", \"B\", \"C\"};\nint[] mylist = {100, 200};\nboolean[] answers = {true, false};\n```\n\n\n\n### Swap\n\n```java\nint a = 1;\nint b = 2;\nSystem.out.println(a + \" \" + b); // 1 2\n\nint temp = a;\na = b;\nb = temp;\nSystem.out.println(a + \" \" + b); // 2 1\n```\n\n### Type Casting\n\n```java\n// Widening\n// byte<short<int<long<float<double\nint i = 10;\nlong l = i;               // 10\n\n// Narrowing\ndouble d = 10.02;\nlong l = (long)d;         // 10\n\nString.valueOf(10);       // \"10\"\nInteger.parseInt(\"10\");   // 10\nDouble.parseDouble(\"10\"); // 10.0\n```\n\n### Conditionals\n\n```java\nint j = 10;\n\nif (j == 10) {\n  System.out.println(\"I get printed\");\n} else if (j > 10) {\n  System.out.println(\"I don't\");\n} else {\n  System.out.println(\"I also don't\");\n}\n```\n\n\n\n### User Input\n\n```java\nScanner in = new Scanner(System.in);\nString str = in.nextLine();\nSystem.out.println(str);\n\nint num = in.nextInt();\nSystem.out.println(num);\n```\n"
            },
            {
                "title": "Java Strings",
                "content": "\n### Basic\n\n```java\nString str1 = \"value\";\nString str2 = new String(\"value\");\nString str3 = String.valueOf(123);\n```\n\n### Concatenation\n\n```java\nString s = 3 + \"str\" + 3;     // 3str3\nString s = 3 + 3 + \"str\";     // 6str\nString s = \"3\" + 3 + \"str\";   // 33str\nString s = \"3\" + \"3\" + \"23\";  // 3323\nString s = \"\" + 3 + 3 + \"23\"; // 3323\nString s = 3 + 3 + 23;        // Incompatible types\n```\n\n### StringBuilder \n\n`StringBuilder sb = new StringBuilder(10);`\n\n```java\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n|   |   |   |   |   |   |   |   |   |\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n0   1   2   3   4   5   6   7   8   9\n```\n\n`sb.append(\"QuickRef\");`\n\n```java\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n| Q | u | i | c | k | R | e | f |   |\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n0   1   2   3   4   5   6   7   8   9\n```\n\n`sb.delete(5, 9);`\n\n```java\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n| Q | u | i | c | k |   |   |   |   |\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n0   1   2   3   4   5   6   7   8   9\n```\n\n`sb.insert(0, \"My \");`\n\n```java\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n| M | y |   | Q | u | i | c | k |   |\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n0   1   2   3   4   5   6   7   8   9\n```\n\n`sb.append(\"!\");`\n\n```java\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n| M | y |   | Q | u | i | c | k | ! |\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n0   1   2   3   4   5   6   7   8   9\n```\n\n### Comparison\n\n```java\nString s1 = new String(\"cheatsheets.zip\");\nString s2 = new String(\"cheatsheets.zip\");\n\ns1 == s2          // false\ns1.equals(s2)     // true\n\n\"AB\".equalsIgnoreCase(\"ab\")  // true\n```\n\n### Manipulation\n\n```java\nString str = \"Abcd\";\n\nstr.toUpperCase();     // ABCD\nstr.toLowerCase();     // abcd\nstr.concat(\"#\");       // Abcd#\nstr.replace(\"b\", \"-\"); // A-cd\n\n\"  abc \".trim();       // abc\n\"ab\".toCharArray();    // {'a', 'b'}\n```\n\n### Information\n\n```java\nString str = \"abcd\";\n\nstr.charAt(2);       // c\nstr.indexOf(\"a\")     // 0\nstr.indexOf(\"z\")     // -1\nstr.length();        // 4\nstr.toString();      // abcd\nstr.substring(2);    // cd\nstr.substring(2,3);  // c\nstr.contains(\"c\");   // true\nstr.endsWith(\"d\");   // true\nstr.startsWith(\"a\"); // true\nstr.isEmpty();       // false\n```\n\n### Immutable\n\n```java\nString str = \"hello\";\nstr.concat(\"world\");\n\n// Outputs: hello\nSystem.out.println(str);\n```\n\n---\n\n```java\nString str = \"hello\";\nString concat = str.concat(\"world\");\n\n// Outputs: helloworld\nSystem.out.println(concat);\n```\n\nOnce created cannot be modified, any modification creates a new String\n"
            },
            {
                "title": "Java Arrays",
                "content": "\n### Declare\n\n```java\nint[] a1;\nint[] a2 = {1, 2, 3};\nint[] a3 = new int[]{1, 2, 3};\n\nint[] a4 = new int[3];\na4[0] = 1;\na4[2] = 2;\na4[3] = 3;\n```\n\n### Modify\n\n```java\nint[] a = {1, 2, 3};\nSystem.out.println(a[0]); // 1\n\na[0] = 9;\nSystem.out.println(a[0]); // 9\n\nSystem.out.println(a.length); // 3\n```\n\n### Loop (Read & Modify)\n\n```java\nint[] arr = {1, 2, 3};\nfor (int i=0; i < arr.length; i++) {\n    arr[i] = arr[i] * 2;\n    System.out.print(arr[i] + \" \");\n}\n// Outputs: 2 4 6\n```\n\n### Loop (Read)\n\n```java\nString[] arr = {\"a\", \"b\", \"c\"};\nfor (String a: arr) {\n    System.out.print(a + \" \");\n}\n// Outputs: a b c\n```\n\n### Multidimensional Arrays\n\n```java\nint[][] matrix = { {1, 2, 3}, {4, 5} };\n\nint x = matrix[1][0];  // 4\n// [[1, 2, 3], [4, 5]]\nArrays.deepToString(matrix);\n\nint[][] a = matrix;\nfor (int i = 0; i < a.length; ++i) {\n  for(int j = 0; j < a[i].length; ++j) {\n    System.out.println(a[i][j]);\n  }\n}\n// Outputs: 1 2 3 4 5 6 7\n```\n\n### Sort\n\n```java\nchar[] chars = {'b', 'a', 'c'};\nArrays.sort(chars);\n\n// [a, b, c]\nArrays.toString(chars);\n```\n"
            },
            {
                "title": "Java Conditionals",
                "content": "\n### Operators \n\n- <a data-tooltip=\"Additive operator (also used for String concatenation)\">+</a>\n- <a data-tooltip=\"Subtraction operator\">-</a>\n- <a data-tooltip=\"Multiplication operator\">\\*</a>\n- <a data-tooltip=\"Division operator\">/</a>\n- <a data-tooltip=\"Remainder operator\">%</a>\n- <a data-tooltip=\"Simple assignment operator\">=</a>\n- <a data-tooltip=\"Increment operator; increments a value by 1\">++</a>\n- <a data-tooltip=\"Decrement operator; decrements a value by 1\">--</a>\n- <a data-tooltip=\"Logical complement operator; inverts the value of a boolean\">!</a>\n\n{.marker-none .cols-4}\n\n---\n\n- <a data-tooltip=\"Equal to\">==</a>\n- <a data-tooltip=\"Not equal to\">!=</a>\n- <a data-tooltip=\"Greater than\">></a>\n- <a data-tooltip=\"Greater than or equal to\">>=</a>\n- <a data-tooltip=\"Less than\"><</a>\n- <a data-tooltip=\"Less than or equal to\"><=</a>\n\n{.marker-none .cols-4}\n\n---\n\n- <a data-tooltip=\"Conditional-AND\">&&</a>\n- <a data-tooltip=\"Conditional-OR\">||</a>\n- [?:](#ternary-operator){data-tooltip=\"Ternary (shorthand for if-then-else statement)\"}\n\n{.marker-none .cols-4}\n\n---\n\n- <a data-tooltip=\"Compares an object to a specified type\">instanceof</a>\n\n\n\n---\n\n- <a data-tooltip=\"Unary bitwise complement\">~</a>\n- <a data-tooltip=\"Signed left shift\"><<</a>\n- <a data-tooltip=\"Signed right shift\">>></a>\n- <a data-tooltip=\"Unsigned right shift\">>>></a>\n- <a data-tooltip=\"Bitwise AND\">&</a>\n- <a data-tooltip=\"Bitwise exclusive OR\">^</a>\n- <a data-tooltip=\"Bitwise inclusive OR\">|</a>\n\n{.marker-none .cols-4}\n\n### If else\n\n```java\nint k = 15;\nif (k > 20) {\n  System.out.println(1);\n} else if (k > 10) {\n  System.out.println(2);\n} else {\n  System.out.println(3);\n}\n```\n\n### Switch \n\n```java\nint month = 3;\nString str;\nswitch (month) {\n  case 1:\n    str = \"January\";\n    break;\n  case 2:\n    str = \"February\";\n    break;\n  case 3:\n    str = \"March\";\n    break;\n  default:\n    str = \"Some other month\";\n    break;\n}\n\n// Outputs: Result March\nSystem.out.println(\"Result \" + str);\n```\n\n### Ternary operator\n\n```java\nint a = 10;\nint b = 20;\nint max = (a > b) ? a : b;\n\n// Outputs: 20\nSystem.out.println(max);\n```\n"
            },
            {
                "title": "Java Loops",
                "content": "\n### For Loop\n\n```java\nfor (int i = 0; i < 10; i++) {\n  System.out.print(i);\n}\n// Outputs: 0123456789\n```\n\n---\n\n```java\nfor (int i = 0,j = 0; i < 3; i++,j--) {\n  System.out.print(j + \"|\" + i + \" \");\n}\n// Outputs: 0|0 -1|1 -2|2\n```\n\n### Enhanced For Loop\n\n```java\nint[] numbers = {1,2,3,4,5};\n\nfor (int number: numbers) {\n  System.out.print(number);\n}\n// Outputs: 12345\n```\n\nUsed to loop around array's or List's\n\n### While Loop\n\n```java\nint count = 0;\n\nwhile (count < 5) {\n  System.out.print(count);\n  count++;\n}\n// Outputs: 01234\n```\n\n### Do While Loop\n\n```java\nint count = 0;\n\ndo {\n  System.out.print(count);\n  count++;\n} while (count < 5);\n// Outputs: 01234\n```\n\n### Continue Statement\n\n```java\nfor (int i = 0; i < 5; i++) {\n  if (i == 3) {\n    continue;\n  }\n  System.out.print(i);\n}\n// Outputs: 01245\n```\n\n### Break Statement\n\n```java\nfor (int i = 0; i < 5; i++) {\n  System.out.print(i);\n  if (i == 3) {\n    break;\n  }\n}\n// Outputs: 0123\n```\n"
            },
            {
                "title": "Java Collections Framework",
                "content": "\n### Java Collections \n\n| Collection                                                                                                         | Interface   | Ordered | Sorted | Thread safe | Duplicate | Nullable           |\n| ------------------------------------------------------------------------------------------------------------------ | ----------- | ------- | ------ | ----------- | --------- | ------------------ |\n| [ArrayList](https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html)                                    | List        | Y       | _N_    | _N_         | Y         | Y                  |\n| [Vector](https://docs.oracle.com/javase/8/docs/api/java/util/Vector.html)                                          | List        | Y       | _N_    | Y           | Y         | Y                  |\n| [LinkedList](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html)                                  | List, Deque | Y       | _N_    | _N_         | Y         | Y                  |\n| [CopyOnWriteArrayList](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html)   | List        | Y       | _N_    | Y           | Y         | Y                  |\n| [HashSet](https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html)                                        | Set         | _N_     | _N_    | _N_         | _N_       | One `null`         |\n| [LinkedHashSet](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashSet.html)                            | Set         | Y       | _N_    | _N_         | _N_       | One `null`         |\n| [TreeSet](https://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html)                                        | Set         | Y       | Y      | _N_         | _N_       | _N_                |\n| [CopyOnWriteArraySet](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html)     | Set         | Y       | _N_    | Y           | _N_       | One `null`         |\n| [ConcurrentSkipListSet](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html) | Set         | Y       | Y      | Y           | _N_       | _N_                |\n| [HashMap](https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html)                                        | Map         | _N_     | _N_    | _N_         | _N (key)_ | One `null` _(key)_ |\n| [HashTable](https://docs.oracle.com/javase/8/docs/api/java/util/Hashtable.html)                                    | Map         | _N_     | _N_    | Y           | _N (key)_ | _N (key)_          |\n| [LinkedHashMap](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html)                            | Map         | Y       | _N_    | _N_         | _N (key)_ | One `null` _(key)_ |\n| [TreeMap](https://docs.oracle.com/javase/8/docs/api/java/util/TreeMap.html)                                        | Map         | Y       | Y      | _N_         | _N (key)_ | _N (key)_          |\n| [ConcurrentHashMap](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html)         | Map         | _N_     | _N_    | Y           | _N (key)_ | _N_                |\n| [ConcurrentSkipListMap](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html) | Map         | Y       | Y      | Y           | _N (key)_ | _N_                |\n| [ArrayDeque](https://docs.oracle.com/javase/8/docs/api/java/util/ArrayDeque.html)                                  | Deque       | Y       | _N_    | _N_         | Y         | _N_                |\n| [PriorityQueue](https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html)                            | Queue       | Y       | _N_    | _N_         | Y         | _N_                |\n| [ConcurrentLinkedQueue](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html) | Queue       | Y       | _N_    | Y           | Y         | _N_                |\n| [ConcurrentLinkedDeque](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html) | Deque       | Y       | _N_    | Y           | Y         | _N_                |\n| [ArrayBlockingQueue](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html)       | Queue       | Y       | _N_    | Y           | Y         | _N_                |\n| [LinkedBlockingDeque](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html)     | Deque       | Y       | _N_    | Y           | Y         | _N_                |\n| [PriorityBlockingQueue](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html) | Queue       | Y       | _N_    | Y           | Y         | _N_                |\n\n{.show-header .left-text}\n\n### ArrayList\n\n```java\nList<Integer> nums = new ArrayList<>();\n\n// Adding\nnums.add(2);\nnums.add(5);\nnums.add(8);\n\n// Retrieving\nSystem.out.println(nums.get(0));\n\n// Indexed for loop iteration\nfor (int i = 0; i < nums.size(); i++) {\n    System.out.println(nums.get(i));\n}\n\nnums.remove(nums.size() - 1);\nnums.remove(0); // VERY slow\n\nfor (Integer value : nums) {\n    System.out.println(value);\n}\n```\n\n### HashMap\n\n```java\nMap<Integer, String> m = new HashMap<>();\nm.put(5, \"Five\");\nm.put(8, \"Eight\");\nm.put(6, \"Six\");\nm.put(4, \"Four\");\nm.put(2, \"Two\");\n\n// Retrieving\nSystem.out.println(m.get(6));\n\n// Lambda forEach\nm.forEach((key, value) -> {\n    String msg = key + \": \" + value;\n    System.out.println(msg);\n});\n```\n\n### HashSet\n\n```java\nSet<String> set = new HashSet<>();\nif (set.isEmpty()) {\n    System.out.println(\"Empty!\");\n}\n\nset.add(\"dog\");\nset.add(\"cat\");\nset.add(\"mouse\");\nset.add(\"snake\");\nset.add(\"bear\");\n\nif (set.contains(\"cat\")) {\n    System.out.println(\"Contains cat\");\n}\n\nset.remove(\"cat\");\nfor (String element : set) {\n    System.out.println(element);\n}\n```\n\n### ArrayDeque\n\n```java\nDeque<String> a = new ArrayDeque<>();\n\n// Using add()\na.add(\"Dog\");\n\n// Using addFirst()\na.addFirst(\"Cat\");\n\n// Using addLast()\na.addLast(\"Horse\");\n\n// [Cat, Dog, Horse]\nSystem.out.println(a);\n\n// Access element\nSystem.out.println(a.peek());\n\n// Remove element\nSystem.out.println(a.pop());\n```\n"
            },
            {
                "title": "Misc",
                "content": "\n### Access Modifiers \n\n| Modifier    | Class | Package | Subclass | World |\n| ----------- | ----- | ------- | -------- | ----- |\n| public      | Y     | Y       | Y        | Y     |\n| protected   | Y     | Y       | Y        | _N_   |\n| no modifier | Y     | Y       | _N_      | _N_   |\n| private     | Y     | _N_     | _N_      | _N_   |\n\n{.show-header .left-text}\n\n### Regular expressions\n\n```java\nString text = \"I am learning Java\";\n// Removing All Whitespace\ntext.replaceAll(\"\\\\s+\", \"\");\n\n// Splitting a String\ntext.split(\"\\\\|\");\ntext.split(Pattern.quote(\"|\"));\n```\n\nSee: [Regex in java](/regex#regex-in-java)\n\n### Comment\n\n```java\n// I am a single line comment!\n\n/*\nAnd I am a\nmulti-line comment!\n*/\n\n/**\n * This\n * is\n * documentation\n * comment\n */\n```\n\n### Keywords \n\n- `abstract`\n- `continue`\n- `for`\n- `new`\n- `switch`\n- `assert`\n- `default`\n- `goto`\n- `package`\n- `synchronized`\n- `boolean`\n- `do`\n- `if`\n- `private`\n- `this`\n- `break`\n- `double`\n- `implements`\n- `protected`\n- `throw`\n- `byte`\n- `else`\n- `import`\n- `public`\n- `throws`\n- `case`\n- `enum`\n- `instanceof`\n- `return`\n- `transient`\n- `catch`\n- `extends`\n- `int`\n- `short`\n- `try`\n- `char`\n- `final`\n- `interface`\n- `static`\n- `void`\n- `class`\n- `finally`\n- `long`\n- `strictfp`\n- `volatile`\n- `const`\n- `float`\n- `native`\n- `super`\n- `while`\n\n{.marker-none .cols-6}\n\n### Math methods\n\n| Method                | Description            |\n| --------------------- | :--------------------- |\n| `Math.max(a,b)`       | Maximum of a and b     |\n| `Math.min(a,b)`       | Minimum of a and b     |\n| `Math.abs(a)`         | Absolute value a       |\n| `Math.sqrt(a)`        | Square-root of a       |\n| `Math.pow(a,b)`       | Power of b             |\n| `Math.round(a)`       | Closest integer        |\n| `Math.sin(ang)`       | Sine of ang            |\n| `Math.cos(ang)`       | Cosine of ang          |\n| `Math.tan(ang)`       | Tangent of ang         |\n| `Math.asin(ang)`      | Inverse sine of ang    |\n| `Math.log(a)`         | Natural logarithm of a |\n| `Math.toDegrees(rad)` | Angle rad in degrees   |\n| `Math.toRadians(deg)` | Angle deg in radians   |\n\n### Try/Catch/Finally\n\n```java\ntry {\n  // something\n} catch (Exception e) {\n  e.printStackTrace();\n} finally {\n  System.out.println(\"always printed\");\n}\n```"
            }
        ]
    },
    {
        "name": "json",
        "title": "JSON",
        "tags": [
            "config",
            "format"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#646464",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/json.svg",
        "intro": "This is a quick reference cheat sheet for understanding and writing JSON format configuration files.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Introduction\n\n[JSON](https://json.org/) is a lightweight text-based open standard designed for human-readable data interchange.\n\n- JSON stands for JavaScript Object Notation\n- JSON is easy to read and write.\n- JSON is language agnostic data-interchange format\n- JSON filename extension is `.json`\n- JSON Internet Media type is `application/json`\n\n\n\n### Examples\n\n```json\n{\n  \"name\": \"Jason\",\n  \"age\": 39,\n  \"height\": 1.92,\n  \"gender\": \"M\",\n  \"salary\": 70000,\n  \"married\": true,\n  \"children\": [\n    { \"name\": \"Tom\", \"age\": 9, \"gender\": \"M\" },\n    { \"name\": \"Ava\", \"age\": 7, \"gender\": \"F\" }\n  ]\n}\n```\n\n### Types\n\n| Type      | Description                             |\n| --------- | :-------------------------------------- |\n| `Number`  | Double precision floating-point         |\n| `String`  | Series of characters                    |\n| `Boolean` | `true` or `false`                       |\n| `Array`   | Ordered sequence of values              |\n| `Value`   | String, Number, Boolean, null etc       |\n| `Object`  | Unordered collection of key/value pairs |\n| `null`    | Null or Empty                           |\n\n### String \n\n|      |                            |\n| ---- | :------------------------- |\n| `\\\"` | Double quote               |\n| `\\\\` | Backslash                  |\n| `\\/` | Forward slash              |\n| `\\b` | Backspace                  |\n| `\\f` | Form feed                  |\n| `\\n` | Newline                    |\n| `\\r` | Carriage return            |\n| `\\t` | Tab                        |\n| `\\u` | Trailed by four hex digits |\n\n#### Examples\n\n```json \n{\n  \"url\": \"https://cheatsheets.zip\",\n  \"msg\": \"Hi,\\n\\\"CheatSheets.zip\\\"\",\n  \"intro\": \"Share quick reference and cheat sheet for developers.\"\n}\n```\n\n#### Invalid String\n\n```json\n{ \"foo\": \"bar\" }\n```\n\nHave to be delimited by double quotes\n\n### Number \n\n| Type       | Description                            |\n| ---------- | :------------------------------------- |\n| `Integer`  | Digits 1-9, 0 and positive or negative |\n| `Fraction` | Fractions like 0.3, 3.9                |\n| `Exponent` | Exponent like e, e+, e-, E, E+, E      |\n\n#### Examples\n\n```json\n{\n  \"positive\": 12,\n  \"negative\": -1,\n  \"fraction\": 10.25,\n  \"exponent\": 1.0e2,\n  \"zero\": 0\n}\n```\n\n#### Invalid Number\n\n```json\n{ \"foo\": 0xff }\n```\n\nIn JSON you can use only Decimal Literals\n\n### Objects\n\n```json\n{\n  \"color\": \"Purple\",\n  \"id\": \"210\",\n  \"composition\": {\n    \"R\": 70,\n    \"G\": 39,\n    \"B\": 89\n  },\n  \"empty_object\": {}\n}\n```\n\nMultiple key/value pairs separated by a comma\n\n### Arrays\n\n```json\n[1, 2, 3, 4, 5]\n```\n\nBegins with `[` and ends with `]`\n\n### Array of objects\n\n```json\n{\n  \"children\": [\n    { \"name\": \"Jimmy Smith\", \"age\": 15 },\n    { \"name\": \"Sammy Sosa\", \"age\": 12 }\n  ]\n}\n```\n\n### Object of arrays\n\n```json\n{\n  \"attributes\": [\"a1\", \"a2\"],\n  \"methods\": [\"getter\", \"setter\"],\n  \"empty_array\": []\n}\n```\n\n### 2D Array\n\n```json\n{\n  \"my_sequences\": [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9, 0],\n    [10, 11]\n  ]\n}\n```\n\n### Object of objects\n\n```json\n{\n  \"Mark McGwire\": {\n    \"hr\": 65,\n    \"avg\": 0.278\n  },\n  \"Sammy Sosa\": {\n    \"hr\": 63,\n    \"avg\": 0.288\n  }\n}\n```\n\n### Nested\n\n```json\n{\n  \"Jack\": {\n    \"id\": 1,\n    \"name\": \"Franc\",\n    \"salary\": 25000,\n    \"hobby\": [\"a\", \"b\"],\n    \"location\": {\n      \"country\": \"A\",\n      \"city\": \"A-A\"\n    }\n  }\n}\n```\n"
            },
            {
                "title": "Access JSON in JavaScript",
                "content": "\n### Access Object\n\n```javascript\nlet myObject = {\n  name: \"Jason\",\n  last: \"Doe\",\n  age: 39,\n  gender: \"M\",\n  salary: 70000,\n  married: true,\n};\n```\n\n---\n\n|                    |           |\n| ------------------ | :-------- |\n| `myObject.name`    | \"Jason\"   |\n| `myObject[\"name\"]` | \"Jason\"   |\n| `myObject.age`     | 39        |\n| `myObject.other`   | undefined |\n| `myObject[0]`      | undefined |\n\n### Access Nested \n\n```javascript\nlet myObject = {\n  ref: {\n    name: 0,\n    last: 1,\n    age: 2,\n    gender: 3,\n    salary: 4,\n    married: 5,\n  },\n  jdoe: [\"Jason\", \"Doe\", 39, \"M\", 70000, true],\n  jsmith: [\"Tom\", \"Smith\", 42, \"F\", 80000, true],\n};\n```\n\n---\n\n|                          |                          |\n| ------------------------ | :----------------------- |\n| `myObject.ref.age`       | 2                        |\n| `myObject[\"ref\"][\"age\"]` | 2                        |\n| `myObject.jdoe`          | [\"Jason\", \"Doe\", 39 ...] |\n| `myObject.jsmith[3]`     | \"F\"                      |\n| `myObject[1]`            | undefined                |\n\n### Access Array of Objects \n\n```javascript\nlet myArray = [\n  {\n    name: \"Jason\",\n    last: \"Doe\",\n    age: 39,\n    gender: \"M\",\n    salary: 70000,\n    married: true,\n  },\n  {\n    name: \"Tom\",\n    last: \"Smith\",\n    age: 42,\n    gender: \"F\",\n    salary: 80000,\n    married: true,\n  },\n  {\n    name: \"Amy\",\n    last: \"Burnquist\",\n    age: 29,\n    gender: \"F\",\n    salary: 60000,\n    married: false,\n  },\n];\n```\n\n---\n\n|                     |                            |\n| ------------------- | :------------------------- |\n| `myArray[0]`        | `{`\"name\": \"Jason\", ...`}` |\n| `myArray[1].name`   | \"Tom\"                      |\n| `myArray[1][2]`     | 42                         |\n| `myArray[3]`        | undefined                  |\n| `myArray[3].gender` | TypeError: Cannot read...  |\n\n### Access Array\n\n```javascript\nlet myArray = [\"Jason\", \"Doe\", 39, \"M\", 70000, true];\n```\n\n---\n\n|              |           |\n| ------------ | :-------- |\n| `myArray[1]` | \"Doe\"     |\n| `myArray[5]` | true      |\n| `myArray[6]` | undefined |\n"
            },
            {
                "title": "Also see",
                "content": "\n- [JSON](https://www.json.org/json-en.html) _(json.org)_\n- [JSON Editor Online](http://jsoneditoronline.org/) _(jsoneditoronline.org)_\n- [Convert JSON Array to Markdown Table, CSV and more](https://tableconvert.com/json-to-markdown) _(tableconvert.com)_"
            }
        ]
    },
    {
        "name": "toml",
        "title": "TOML",
        "tags": [
            "config",
            "format"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#848484",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/toml.svg",
        "intro": "This is a quick reference cheat sheet to the TOML format configuration file syntax.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Introduction\n\n[TOML](https://toml.io/en/) is a minimal configuration file format that's easy to read due to obvious semantics.\n\n- [Document](https://toml.io/en/latest) _(toml.io)_\n- [Learn X in Y minutes](https://learnxinyminutes.com/docs/toml/) _(learnxinyminutes.com)_\n\n### Examples\n\n```toml\nbool = true\ndate = 2006-05-27T07:32:00Z\nstring = \"hello\"\nnumber = 42\nfloat = 3.14\nscientificNotation = 1e+12\n```\n\n### Comments\n\n```yaml\n# A single line comment example\n\n# block level comment example\n# comment line 1\n# comment line 2\n# comment line 3\n```\n\n### Integer\n\n```toml\nint1 = +42\nint2 = 0\nint3 = -21\nintegerRange = 64\n```\n\n### Float\n\n```toml\nfloat2 = 3.1415\nfloat4 = 5e+22\nfloat7 = 6.626e-34\n```\n\n### Boolean\n\n```toml\nbool1 = true\nbool2 = false\nboolMustBeLowercase = true\n```\n\n### Datetime\n\n```toml\ndate1 = 1989-05-27T07:32:00Z\ndate2 = 1989-05-26T15:32:00-07:00\ndate3 = 1989-05-27T07:32:00\ndate4 = 1989-05-27\ntime1 = 07:32:00\ntime2 = 00:32:00.999999\n```\n\n### String\n\n```toml\nstr1 = \"I'm a string.\"\nstr2 = \"You can \\\"quote\\\" me.\"\nstr3 = \"Name\\tJos\\u00E9\\nLoc\\tSF.\"\n```\n\n\n\n### Table\n\n```toml\n[owner]\nname = \"Tom Preston-Werner\"\ndob = 1979-05-27T07:32:00-08:00\n```\n\n\n\n### Array\n\n```toml\narray1 = [1, 2, 3]\narray2 = [\"Commas\", \"are\", \"delimiter\"]\narray3 = [8001, 8001, 8002]\n```\n\n### Friendly Array \n\n```toml\narray1 = [ \"Don't mix\", \"different\", \"types\" ]\narray2 = [ [ 1.2, 2.4 ], [\"all\", 'strings', \"\"\"are the same\"\"\", '''type'''] ]\narray3 = [\n  \"Whitespace\", \"is\",\n  \"ignored\"\n]\n```\n"
            },
            {
                "title": "TOML Strings",
                "content": "\n### Multiline String\n\n```toml\nmultiLineString = \"\"\"\nMulti-line basic strings are surrounded\nby three quotation marks on each side\nand allow newlines.\n\"\"\"\n```\n\n### Literal String\n\n```toml \npath = 'C:\\Users\\nodejs\\templates'\npath2 = '\\\\User\\admin$\\system32'\nquoted = 'Tom \"Dubs\" Preston-Werner'\nregex = '<\\i\\c*\\s*>'\n```\n\nSurrounded by single quotes. Escaping are not allowed.\n\n### MultiLine Literal String\n\n```toml\nre = '''\\d{2} apps is t[wo]o many'''\nlines = '''\nThe first newline is\ntrimmed in raw strings.\nAll other whitespace\nis preserved.\n'''\n```\n"
            },
            {
                "title": "TOML Tables",
                "content": "\n### Basic\n\n```toml\n[name]\nfoo = 1\nbar = 2\n```\n\n`foo` and `bar` are keys in the table called `name`\n\n### Nested\n\n```toml\n[table1]\n\tfoo = \"bar\"\n\n[table1.nested_table]\n\tbaz = \"bat\"\n```\n\n### Array-like \n\n```toml\n[[comments]]\nauthor = \"Nate\"\ntext = \"Great Article!\"\n\n[[comments]]\nauthor = \"Anonymous\"\ntext = \"Love it!\"\n```\n\n#### \u2193 Equivalent JSON\n\n```json\n{\n  \"comments\": [\n    {\n      \"author\": \"Nate\",\n      \"text\": \"Great Article!\"\n    },\n    {\n      \"author\": \"Anonymous\",\n      \"text\": \"Love It!\"\n    }\n  ]\n}\n```\n\n### Dot separated\n\n```toml\n[dog.\"tater.man\"]\ntype = \"pug\"\n```\n\n#### \u2193 Equivalent JSON\n\n```json\n{\n  \"dog\": {\n    \"tater.man\": {\n      \"type\": \"pug\"\n    }\n  }\n}\n```\n\n### Multi-nested\n\n```toml\n[foo.bar.baz]\nbat = \"hi\"\n```\n\n#### \u2193 Equivalent JSON\n\n```json\n{\n  \"foo\": {\n    \"bar\": {\n      \"baz\": {\n        \"bat\": \"hi\"\n      }\n    }\n  }\n}\n```\n\n### Ignore whitespace\n\n```toml\n[a.b.c]          # this is best practice\n[ d.e.f ]        # same as [d.e.f]\n[ g .  h  .i ]   # same as [g.h.i]\n[ j . \"\u029e\" .'l' ] # same as [j.\"\u029e\".'l']\n```\n\n### Inline Table \n\n```toml\nname = { first = \"Tom\", last = \"Preston-Werner\" }\npoint = { x = 1, y = 2 }\nanimal = { type.name = \"pug\" }\n```"
            }
        ]
    },
    {
        "name": "yaml",
        "title": "YAML",
        "tags": [
            "config",
            "format"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#b42e28",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/yaml.svg",
        "intro": "This is a quick reference cheat sheet for understanding and writing YAML format configuration files.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Introduction\n\n[YAML](https://yaml.org/) is a data serialisation language designed to be directly writable and readable by humans\n\n- YAML does not allow the use of tabs\n- Must be space between the element parts\n- YAML is CASE sensitive\n- End your YAML file with the `.yaml` or `.yml` extension\n- YAML is a superset of JSON\n- Ansible playbooks are YAML files \n\n### Scalar types \n\n\n```yaml\nn1: 1            # integer\nn2: 1.234        # float\n\ns1: 'abc'        # string\ns2: \"abc\"        # string\ns3: abc          # string\n\nb: false         # boolean type\n\nd: 2015-04-05    # date type\n```\n\n#### \u2193 Equivalent JSON\n\n```json \n{\n  \"n1\": 1,\n  \"n2\": 1.234,\n  \"s1\": \"abc\",\n  \"s2\": \"abc\",\n  \"s3\": \"abc\",\n  \"b\": false,\n  \"d\": \"2015-04-05\"\n}\n```\n\nUse spaces to indent. There must be space between the element parts.\n\n### Variables\n\n```yaml\nsome_thing: &VAR_NAME foobar\nother_thing: *VAR_NAME\n```\n\n#### \u2193 Equivalent JSON\n\n\n```json \n{\n  \"some_thing\": \"foobar\",\n  \"other_thing\": \"foobar\"\n}\n```\n\n### Comments\n\n```yaml\n# A single line comment example\n\n# block level comment example\n# comment line 1\n# comment line 2\n# comment line 3\n```\n\n### Multiline strings\n\n```yaml\ndescription: |\n  hello\n  world\n```\n\n#### \u2193 Equivalent JSON\n\n```json \n{ \"description\": \"hello\\nworld\\n\" }\n```\n\n### Inheritance \n\n```yaml\nparent: &defaults\n  a: 2\n  b: 3\n\nchild:\n  <<: *defaults\n  b: 4\n```\n\n#### \u2193 Equivalent JSON\n\n```json \n{\n  \"parent\": {\n    \"a\": 2,\n    \"b\": 3\n  },\n  \"child\": {\n    \"a\": 2,\n    \"b\": 4\n  }\n}\n```\n\n### Reference \n\n```yaml\nvalues: &ref\n  - Will be\n  - reused below\n\nother_values:\n  i_am_ref: *ref\n```\n\n#### \u2193 Equivalent JSON\n\n\n```json \n{\n  \"values\": [\n    \"Will be\",\n    \"reused below\"\n  ],\n  \"other_values\": {\n    \"i_am_ref\": [\n      \"Will be\",\n      \"reused below\"\n    ]\n  }\n}\n```\n\n### Folded strings\n\n```yaml\ndescription: >\n  hello world\n```\n\n#### \u2193 Equivalent JSON\n\n```json \n{ \"description\": \"hello world\\n\" }\n```\n\n### Two Documents\n\n```yaml\n---\ndocument: this is doc 1\n---\ndocument: this is doc 2\n```\n\nYAML uses `---` to separate directives from document content.\n"
            },
            {
                "title": "YAML Collections",
                "content": "\n### Sequence\n\n```yaml\n- Mark McGwire\n- Sammy Sosa\n- Ken Griffey\n```\n\n#### \u2193 Equivalent JSON\n\n\n```json \n[\n  \"Mark McGwire\",\n  \"Sammy Sosa\",\n  \"Ken Griffey\"\n]\n```\n\n### Mapping\n\n\n```yaml\nhr:  65       # Home runs\navg: 0.278    # Batting average\nrbi: 147      # Runs Batted In\n```\n\n#### \u2193 Equivalent JSON\n\n```json \n{\n  \"hr\": 65,\n  \"avg\": 0.278,\n  \"rbi\": 147\n}\n```\n\n### Mapping to Sequences\n\n```yaml\nattributes:\n  - a1\n  - a2\nmethods: [getter, setter]\n```\n\n#### \u2193 Equivalent JSON\n\n```json \n{\n  \"attributes\": [\"a1\", \"a2\"],\n  \"methods\": [\"getter\", \"setter\"]\n}\n```\n\n### Sequence of Mappings\n\n\n```yaml\nchildren:\n  - name: Jimmy Smith\n    age: 15\n  - name: Jimmy Smith\n    age: 15\n  -\n    name: Sammy Sosa\n    age: 12\n```\n\n#### \u2193 Equivalent JSON\n\n\n```json \n{\n  \"children\": [\n    {\"name\": \"Jimmy Smith\", \"age\": 15},\n    {\"name\": \"Jimmy Smith\", \"age\": 15},\n    {\"name\": \"Sammy Sosa\", \"age\": 12}\n  ]\n}\n```\n\n### Sequence of Sequences\n\n\n```yaml\nmy_sequences:\n  - [1, 2, 3]\n  - [4, 5, 6]\n  -\n    - 7\n    - 8\n    - 9\n    - 0 \n```\n\n#### \u2193 Equivalent JSON\n\n```json \n{\n  \"my_sequences\": [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9, 0]\n  ]\n}\n```\n\n### Mapping of Mappings\n\n```yaml\nMark McGwire: { hr: 65, avg: 0.278 }\nSammy Sosa: { hr: 63, avg: 0.288 }\n```\n\n#### \u2193 Equivalent JSON\n\n```json \n{\n  \"Mark McGwire\": {\n    \"hr\": 65,\n    \"avg\": 0.278\n  },\n  \"Sammy Sosa\": {\n    \"hr\": 63,\n    \"avg\": 0.288\n  }\n}\n```\n\n### Nested Collections\n\n```yaml\nJack:\n  id: 1\n  name: Franc\n  salary: 25000\n  hobby:\n    - a\n    - b\n  location: { country: \"A\", city: \"A-A\" }\n```\n\n#### \u2193 Equivalent JSON\n\n```json \n{\n  \"Jack\": {\n    \"id\": 1,\n    \"name\": \"Franc\",\n    \"salary\": 25000,\n    \"hobby\": [\"a\", \"b\"],\n    \"location\": {\n      \"country\": \"A\",\n      \"city\": \"A-A\"\n    }\n  }\n}\n```\n\n### Unordered Sets\n\n```yaml\nset1: !!set\n  ? one\n  ? two\nset2: !!set { \"one\", \"two\" }\n```\n\n#### \u2193 Equivalent JSON\n\n```json \n{\n  \"set1\": { \"one\": null, \"two\": null },\n  \"set2\": { \"one\": null, \"two\": null }\n}\n```\n\nSets are represented as a Mapping where each key is associated with a null value\n\n### Ordered Mappings\n\n```yaml\nordered: !!omap\n  - Mark McGwire: 65\n  - Sammy Sosa: 63\n  - Ken Griffy: 58\n```\n\n#### \u2193 Equivalent JSON\n\n\n```json \n{\n  \"ordered\": [\n    { \"Mark McGwire\": 65 },\n    { \"Sammy Sosa\": 63 },\n    { \"Ken Griffy\": 58 }\n  ]\n}\n```\n"
            },
            {
                "title": "YAML Reference",
                "content": "\n### Terms\n\n- Sequences aka arrays or lists\n- Scalars aka strings or numbers\n- Mappings aka hashes or dictionaries \n\nBased on the YAML.org [refcard](https://yaml.org/refcard.html).\n\n### Document indicators\n\n|       |                     |\n| ----- | ------------------- |\n| `%`   | Directive indicator |\n| `---` | Document header     |\n| `...` | Document terminator |\n\n### Collection indicators \n\n|      |                                 |\n| ---- | ------------------------------- |\n| `?`  | Key indicator                   |\n| `:`  | Value indicator                 |\n| `-`  | Nested series entry indicator   |\n| `,`  | Separate in-line branch entries |\n| `[]` | Surround in-line series branch  |\n| `{}` | Surround in-line keyed branch   |\n\n### Alias indicators\n\n|     |                 |\n| --- | --------------- |\n| `&` | Anchor property |\n| `*` | Alias indicator |\n\n### Special keys\n\n|      |                                 |\n| ---- | ------------------------------- |\n| `=`  | Default \"value\" mapping key     |\n| `<<` | Merge keys from another mapping |\n\n### Scalar indicators\n\n|       |                                   |\n| ----- | --------------------------------- | --------------------------------------------- | ----------- |\n| `''`  | Surround in-line unescaped scalar |\n| `\"`   | Surround in-line escaped scalar   |\n| `     | `                                 | Block scalar indicator                        |\n| `>`   | Folded scalar indicator           |\n| `-`   | Strip chomp modifier (`           | -`or`>-`)                                     |\n| `+`   | Keep chomp modifier (`            | +`or`>+`)                                     |\n| `1-9` | Explicit indentation modifier (`  | 1`or`>2`). <br/> Modifiers can be combined (` | 2-`, `>+1`) |\n\n### Tag Property (usually unspecified) \n\n|          |                                                             |\n| -------- | ----------------------------------------------------------- |\n| `none`   | Unspecified tag (automatically resolved by application)     |\n| `!`      | Non-specific tag (by default, `!!map`/`!!seq`/`!!str`)      |\n| `!foo`   | Primary (by convention, means a local `!foo` tag)           |\n| `!!foo`  | Secondary (by convention, means `tag:yaml.org,2002:foo`)    |\n| `!h!foo` | Requires `%TAG !h! <prefix>` (and then means `<prefix>foo`) |\n| `!<foo>` | Verbatim tag (always means `foo`)                           |\n\n### Misc indicators\n\n|                  |                              |\n| ---------------- | ---------------------------- |\n| `#`              | Throwaway comment indicator  |\n| <code>\\`@</code> | Both reserved for future use |\n\n### Core types (default automatic tags) \n\n|         |                                          |\n| ------- | ---------------------------------------- |\n| `!!map` | `{Hash table, dictionary, mapping}`      |\n| `!!seq` | `{List, array, tuple, vector, sequence}` |\n| `!!str` | Unicode string                           |\n\n### Escape Codes \n\n#### Numeric\n\n- `\\x12` (8-bit)\n- `\\u1234` (16-bit)\n- `\\U00102030` (32-bit)\n\n\n\n#### Protective\n\n- `\\\\` (\\\\)\n- `\\\"` (\")\n- `\\ ` ( )\n- `\\<TAB>` (TAB)\n\n\n\n#### C\n\n- `\\0` (NUL)\n- `\\a` (BEL)\n- `\\b` (BS)\n- `\\f` (FF)\n- `\\n` (LF)\n- `\\r` (CR)\n- `\\t` (TAB)\n- `\\v` (VTAB)\n\n\n\n#### Additional\n\n- `\\e` (ESC)\n- `\\_` (NBSP)\n- `\\N` (NEL)\n- `\\L` (LS)\n- `\\P` (PS)\n\n\n\n### More types\n\n|          |                             |\n| -------- | --------------------------- |\n| `!!set`  | `{cherries, plums, apples}` |\n| `!!omap` | `[one: 1, two: 2]`          |\n\n### Language Independent Scalar Types \n\n|                           |                                            |\n| ------------------------- | ------------------------------------------ |\n| `{~, null}`               | Null (no value).                           |\n| `[1234, 0x4D2, 02333]`    | [Decimal int, Hexadecimal int, Octal int]  |\n| `[1_230.15, 12.3015e+02]` | [Fixed float, Exponential float]           |\n| `[.inf, -.Inf, .NAN]`     | [Infinity (float), Negative, Not a number] |\n| `{Y, true, Yes, ON}`      | Boolean true                               |\n| `{n, FALSE, No, off}`     | Boolean false                              |\n"
            },
            {
                "title": "Also see",
                "content": "\n- [YAML Reference Card](https://yaml.org/refcard.html) _(yaml.org)_\n- [Learn X in Y minutes](https://learnxinyminutes.com/docs/yaml/) _(learnxinyminutes.com)_\n- [YAML lint online](http://www.yamllint.com/) _(yamllint.com)_"
            }
        ]
    },
    {
        "name": "docker",
        "title": "Docker",
        "tags": [
            "container",
            "virtual"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#488fdf",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/docker.svg",
        "intro": "This is a quick reference cheat sheet for [Docker](https://docs.docker.com/get-started/). And you can find the most common Docker commands here.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Getting started\n\nCreate and run a container in background\n\n```shell script\n$ docker run -d -p 80:80 docker/getting-started\n```\n\n---\n\n- `-d` - Run the container in detached mode\n- `-p 80:80` - Map port 80 to port 80 in the container\n- `docker/getting-started` - The image to use\n\n\n\nCreate and run a container in foreground\n\n```shell script\n$ docker run -it -p 8001:8080 --name my-nginx nginx\n```\n\n---\n\n- `-it` - Interactive bash mode\n- `-p 8001:8080` - Map port 8001 to port 8080 in the container\n- `--name my-nginx` - Specify a name\n- `nginx` - The image to use\n\n\n\n### General commands\n\n| Example                             | Description                                      |\n| ----------------------------------- | ------------------------------------------------ |\n| `docker ps`                         | List running containers                          |\n| `docker ps -a`                      | List all containers                              |\n| `docker ps -s`                      | List running containers<br>_(with CPU / memory)_ |\n| `docker images`                     | List all images                                  |\n| `docker exec -it <container>  bash` | Connecting to container                          |\n| `docker logs <container>`           | Shows container's console log                    |\n| `docker stop <container>`           | Stop a container                                 |\n| `docker restart <container>`        | Restart a container                              |\n| `docker rm <container>`             | Remove a container                               |\n| `docker port <container>`           | Shows container's port mapping                   |\n| `docker top <container>`            | List processes                                   |\n| `docker kill <container>`           | Kill a container                                 |\n\nParameter `<container>` can be container id or name\n"
            },
            {
                "title": "Docker Containers",
                "content": "\n### Starting & Stopping\n\n| Description               | Example                             |\n| ------------------------- | ----------------------------------- |\n| `docker start my-nginx`   | Starting                            |\n| `docker stop my-nginx`    | Stopping                            |\n| `docker restart my-nginx` | Restarting                          |\n| `docker pause my-nginx`   | Pausing                             |\n| `docker unpause my-nginx` | Unpausing                           |\n| `docker wait my-nginx`    | Blocking a Container                |\n| `docker kill my-nginx`    | Sending a SIGKILL                   |\n| `docker attach my-nginx`  | Connecting to an Existing Container |\n\n### Information\n\n| Example                   | Description                            |\n| ------------------------- | -------------------------------------- |\n| `docker ps`               | List running containers                |\n| `docker ps -a`            | List all containers                    |\n| `docker logs my-nginx`    | Container Logs                         |\n| `docker inspect my-nginx` | Inspecting Containers                  |\n| `docker events my-nginx`  | Containers Events                      |\n| `docker port my-nginx`    | Public Ports                           |\n| `docker top my-nginx`     | Running Processes                      |\n| `docker stats my-nginx`   | Container Resource Usage               |\n| `docker diff my-nginx`    | Lists the changes made to a container. |\n\n### Creating\n\n```yaml\ndocker create [options] IMAGE\n  -a, --attach               # attach stdout/err\n  -i, --interactive          # attach stdin (interactive)\n  -t, --tty                  # pseudo-tty\n      --name NAME            # name your image\n  -p, --publish 5000:5000    # port map (host:container)\n      --expose 5432          # expose a port to containers\n  -P, --publish-all          # publish all ports\n      --link container:alias # linking\n  -v, --volume `pwd`:/app    # mount (absolute paths needed)\n  -e, --env NAME=hello       # env vars\n```\n\n#### Example\n\n```shell script\n$ docker create --name my_redis --expose 6379 redis:3.0.2\n```\n\n### Manipulating\n\nRenaming a Container\n\n```shell script\ndocker rename my-nginx my-nginx\n```\n\nRemoving a Container\n\n```shell script\ndocker rm my-nginx\n```\n\nUpdating a Container\n\n```shell script\ndocker update --cpu-shares 512 -m 300M my-nginx\n```\n"
            },
            {
                "title": "Docker Images",
                "content": "\n### Manipulating\n\n| `Example`                          | Description                     |\n| ---------------------------------- | ------------------------------- |\n| `docker images`                    | Listing images                  |\n| `docker rmi nginx`                 | Removing an image               |\n| `docker load < ubuntu.tar.gz`      | Loading a tarred repository     |\n| `docker load --input ubuntu.tar`   | Loading a tarred repository     |\n| `docker save busybox > ubuntu.tar` | Save an image to a tar archive  |\n| `docker history`                   | Showing the history of an image |\n| `docker commit nginx`              | Save a container as an image.   |\n| `docker tag nginx eon01/nginx`     | Tagging an image                |\n| `docker push eon01/nginx`          | Pushing an image                |\n\n### Building Images\n\n```shell script\n$ docker build .\n$ docker build github.com/creack/docker-firefox\n$ docker build - < Dockerfile\n$ docker build - < context.tar.gz\n$ docker build -t eon/my-nginx .\n$ docker build -f myOtherDockerfile .\n$ curl example.com/remote/Dockerfile | docker build -f - .\n```\n"
            },
            {
                "title": "Docker Networking",
                "content": "\n### Manipulating\n\nRemoving a network\n\n```shell script\ndocker network rm MyOverlayNetwork\n```\n\nListing networks\n\n```shell script\ndocker network ls\n```\n\nGetting information about a network\n\n```shell script\ndocker network inspect MyOverlayNetwork\n```\n\nConnecting a running container to a network\n\n```shell script\ndocker network connect MyOverlayNetwork nginx\n```\n\nConnecting a container to a network when it starts\n\n```shell script\ndocker run -it -d --network=MyOverlayNetwork nginx\n```\n\nDisconnecting a container from a network\n\n```shell script\ndocker network disconnect MyOverlayNetwork nginx\n```\n\n### Creating Networks\n\n```shell script\ndocker network create -d overlay MyOverlayNetwork\n\ndocker network create -d bridge MyBridgeNetwork\n\ndocker network create -d overlay \\\n  --subnet=192.168.0.0/16 \\\n  --subnet=192.170.0.0/16 \\\n  --gateway=192.168.0.100 \\\n  --gateway=192.170.0.100 \\\n  --ip-range=192.168.1.0/24 \\\n  --aux-address=\"my-router=192.168.1.5\" \\\n  --aux-address=\"my-switch=192.168.1.6\" \\\n  --aux-address=\"my-printer=192.170.1.5\" \\\n  --aux-address=\"my-nas=192.170.1.6\" \\\n  MyOverlayNetwork\n```\n"
            },
            {
                "title": "Clean Up",
                "content": "\n### Clean All\n\nCleans up dangling images, containers, volumes, and networks (ie, not associated with a container)\n\n```shell\ndocker system prune\n```\n\n---\n\nAdditionally, remove any stopped containers and all unused images (not just dangling images)\n\n```shell\ndocker system prune -a\n```\n\n### Containers\n\nStop all running containers\n\n```shell\ndocker stop $(docker ps -a -q)\n```\n\nDelete stopped containers\n\n```shell\ndocker container prune\n```\n\n### Images\n\nRemove all dangling (not tagged and is not associated with a container) images:\n\n```shell\ndocker image prune\n```\n\nRemove all images which are not used by existing containers\n\n```shell\ndocker image prune -a\n```\n\n### Volumes\n\n```shell\ndocker volume prune\n```\n\nRemove all volumes not used by at least one container\n"
            },
            {
                "title": "Miscellaneous",
                "content": "\n### Docker Hub\n\n| Docker Syntax               | Description                         |\n| --------------------------- | ----------------------------------- |\n| `docker search search_word` | Search docker hub for images.       |\n| `docker pull user/image   ` | Downloads an image from docker hub. |\n| `docker login             ` | Authenticate to docker hub          |\n| `docker push user/image   ` | Uploads an image to docker hub.     |\n\n### Registry commands \n\nLogin to a Registry\n\n```shell script\n$ docker login\n$ docker login localhost:8080\n```\n\nLogout from a Registry\n\n```shell script\n$ docker logout\n$ docker logout localhost:8080\n```\n\nSearching an Image\n\n```shell script\n$ docker search nginx\n$ docker search nginx --stars=3 --no-trunc busybox\n```\n\nPulling an Image\n\n```shell script\n$ docker pull nginx\n$ docker pull eon01/nginx localhost:5000/myadmin/nginx\n```\n\nPushing an Image\n\n```shell script\n$ docker push eon01/nginx\n$ docker push eon01/nginx localhost:5000/myadmin/nginx\n```\n\n### Batch clean\n\n| Example                             | Description             |\n| ----------------------------------- | ----------------------- |\n| `docker stop -f $(docker ps -a -q)` | Stopping all containers |\n| `docker rm -f $(docker ps -a -q)`   | Removing all containers |\n| `docker rmi -f $(docker images -q)` | Removing all images     |\n\n### Volumes\n\nCheck volumes\n\n```shell script\n$ docker volume ls\n```\n\nCleanup unused volumes\n\n```shell script\n$ docker volume prune\n```"
            }
        ]
    },
    {
        "name": "kubernetes",
        "title": "Kubernetes",
        "tags": [
            "config",
            "format"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#416cde",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/kubernetes.svg",
        "intro": "This page contains a list of commonly used kubectl commands and flags.\n",
        "sections": [
            {
                "title": "Viewing and finding resources",
                "content": "\n### Nodes\n\n```bash\nkubectl get no # Display all node information\nkubectl get no -o wide # Show more information about all nodes\nkubectl describe no # Display node details\nkubectl get no -o yaml # Display node details in yaml format\nkubectl get node --selector=[label_name] # Filter the node with the specified label\nkubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=\"ExternalIP\")].address}'\n# Output the field information defined by the jsonpath expression\nkubectl top node [node_name] # Display node (CPU/memory/storage) usage\n```\n\nResource name: nodes, abbreviation: no\n\n### Pods\n\n```bash\nkubectl get po # Display all container group information\nkubectl get po -o wide\nkubectl describe po\nkubectl get po --show-labels # View the labels of the container group\nkubectl get po -l app=nginx\nkubectl get po -o yaml\nkubectl get pod [pod_name] -o yaml --export\nkubectl get pod [pod_name] -o yaml --export > nameoffile.yaml\n# Export container group information to yaml file in yaml format\nkubectl get pods --field-selector status.phase=Running\n# Use the field selector to filter out container group information\n```\n\nResource name: pods, abbreviation: po\n\n### Namespaces\n\n```bash\nkubectl get ns\nkubectl get ns -o yaml\nkubectl describe ns\n```\n\nResource name: namespaces, abbreviation: ns\n\n### Deployments\n\n```bash\nkubectl get deploy\nkubectl describe deploy\nkubectl get deploy -o wide\nkubectl get deploy -o yaml\n```\n\nResource name: deployments, abbreviation: deploy\n\n### Services\n\n```bash\nkubectl get svc\nkubectl describe svc\nkubectl get svc -o wide\nkubectl get svc -o yaml\nkubectl get svc --show-labels\n```\n\nResource name: services, abbreviation: svc\n\n### Daemon Sets\n\n```bash\nkubectl get ds\nkubectl describe ds --all-namespaces\nkubectl describe ds [daemonset_name] -n [namespace_name]\nkubectl get ds [ds_name] -n [ns_name] -o yaml\n```\n\nResource name: daemonsets, abbreviation: ds\n\n### Events\n\n```bash\nkubectl get events\nkubectl get events -n kube-system\nkubectl get events -w\n```\n\nResource name: events, abbreviation: ev\n\n### Logs\n\n```bash\nkubectl logs [pod_name]\nkubectl logs --since=1h [pod_name]\nkubectl logs --tail=20 [pod_name]\nkubectl logs -f -c [container_name] [pod_name]\nkubectl logs [pod_name] > pod.log\n```\n\n### Service Accounts\n\n```bash\nkubectl get sa\nkubectl get sa -o yaml\nkubectl get serviceaccounts default -o yaml >./sa.yaml\nkubectl replace serviceaccount default -f ./sa.yaml\n```\n\nResource name: serviceaccounts, abbreviation: ev\n\n### Replica Sets\n\n```bash\nkubectl get rs\nkubectl describe rs\nkubectl get rs -o wide\nkubectl get rs -o yaml\n```\n\nResource name: replicasets, abbreviation: rs\n\n### Roles\n\n```bash\nkubectl get roles --all-namespaces\nkubectl get roles --all-namespaces -o yaml\n```\n\n### Secrets\n\n```bash\nkubectl get secrets\nkubectl get secrets --all-namespaces\nkubectl get secrets -o yaml\n```\n\n### Config maps\n\nResource name: configmaps, abbreviation: cm\n\n```bash\nkubectl get cm\nkubectl get cm --all-namespaces\nkubectl get cm --all-namespaces -o yaml\n```\n\n### Ingresses\n\nResource name: ingresses, abbreviation: ing\n\n```bash\nkubectl get ing\nkubectl get ing --all-namespaces\n```\n\n### Persistent Volumes\n\nResource name: persistentvolumes, abbreviation: pv\n\n```bash\nkubectl get pv\nkubectl describe pv\n```\n\n### Persistent volume declaration\n\nResource name: persistentvolumeclaims, abbreviation: pvc\n\n```bash\nkubectl get pvc\nkubectl describe pvc\n```\n\n### storage class\n\nResource name: storageclasses, Abbreviation: sc\n\n```bash\nkubectl get sc\nkubectl get sc -o yaml\n```\n\n### Multiple resources\n\n```bash\nkubectl get svc, po\nkubectl get deploy, no\nkubectl get all\nkubectl get all --all-namespaces\n```\n"
            },
            {
                "title": "Updating resources",
                "content": "\n### Taint\n\n```bash\nkubectl taint [node_name] [taint_name]\n```\n\n### Label\n\n```bash\nkubectl label [node_name] disktype=ssd\nkubectl label [pod_name] env=prod\n```\n\n### Maintain/Schedulable\n\n```bash\nkubectl cordon [node_name] # node maintenance\nkubectl uncordon [node_name] # node is schedulable\n```\n\n### clear\n\n```bash\nkubectl drain [node_name] # empty the node\n```\n\n### Node/Pod \n\n```bash\nkubectl delete node [node_name]\nkubectl delete pod [pod_name]\nkubectl edit node [node_name]\nkubectl edit pod [pod_name]\n```\n\n### Stateless/Namespaced \n\n```bash\nkubectl edit deploy [deploy_name]\nkubectl delete deploy [deploy_name]\nkubectl expose deploy [deploy_name] --port=80 --type=NodePort\nkubectl scale deploy [deploy_name] --replicas=5\nkubectl delete ns\nkubectl edit ns [ns_name]\n```\n\n### Service\n\n```bash\nkubectl edit svc [svc_name]\nkubectl delete svc [svc_name]\n```\n\n### Daemon set\n\n```bash\nkubectl edit ds [ds_name] -n kube-system\nkubectl delete ds [ds_name]\n```\n\n### Service account\n\n```bash\nkubectl edit sa [sa_name]\nkubectl delete sa [sa_name]\n```\n\n### Notes\n\n```bash\nkubectl annotate po [pod_name] [annotation]\nkubectl annotateno [node_name]\n```\n"
            },
            {
                "title": "Create resources",
                "content": "\n### Create pod\n\n```bash\nkubectl create -f [name_of_file]\nkubectl apply -f [name_of_file]\nkubectl run [pod_name] --image=nginx --restart=Never\nkubectl run [pod_name] --generator=run-pod/v1 --image=nginx\nkubectl run [pod_name] --image=nginx --restart=Never\n```\n\n### Create Service\n\n```bash\nkubectl create svc nodeport [svc_name] --tcp=8080:80\n```\n\n### Create a stateless application\n\n```bash\nkubectl create -f [name_of_file]\nkubectl apply -f [name_of_file]\nkubectl create deploy [deploy_name] --image=nginx\n```\n\n### interaction\n\n```bash\nkubectl run [pod_name] --image=busybox --rm -it --restart=Never --sh\n```\n\n### Output YAML\n\n```bash\nkubectl create deploy [deploy_name] --image=nginx --dry-run -o yaml > deploy.yaml\nkubectl get po [pod_name] -o yaml --export > pod.yaml\n```\n\n### Help\n\n```bash\nkubectl -h\nkubectl create -h\nkubectl run -h\nkubectl explain deploy.spec\n```\n"
            },
            {
                "title": "Miscellaneous",
                "content": "\n### APIs\n\n```bash\nkubectl get --raw /apis/metrics.k8s.io/\n```\n\n### Information\n\n```bash\nkubectl config\nkubectl cluster-info\nkubectl get componentstatus\n```\n"
            },
            {
                "title": "Also See",
                "content": "\n- [Kubernetes Official Documentation](https://kubernetes.io/zh-cn/docs/reference/kubectl/) _(kubernetes.io)_"
            }
        ]
    },
    {
        "name": "postgres",
        "title": "PostgreSQL",
        "tags": [
            "DB",
            "RDBMS"
        ],
        "categories": [
            "Database"
        ],
        "background": "#3d6488",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/postgres.svg",
        "intro": "The [PostgreSQL](https://www.postgresql.org/docs/current/) cheat sheet provides you with the common PostgreSQL commands and statements.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Getting started\n\nSwitch and connect\n\n```shell script\n$ sudo -u postgres psql\n```\n\nList all databases\n\n```shell script\npostgres=# \\l\n```\n\nConnect to the database named postgres\n\n```shell script\npostgres=# \\c postgres\n```\n\nDisconnect\n\n```shell script\npostgres=# \\q\npostgres=# \\!\n```\n\n### psql commands \n\n| Option              | Example                                      | Description                    |\n| ------------------- | -------------------------------------------- | :----------------------------- |\n| `[-d] <database>`   | psql -d mydb                                 | Connecting to database         |\n| `-U`                | psql -U john mydb                            | Connecting as a specific user  |\n| `-h` `-p`           | psql -h localhost -p 5432 mydb               | Connecting to a host/port      |\n| `-U` `-h` `-p` `-d` | psql -U admin -h 192.168.1.5 -p 2506 -d mydb | Connect remote PostgreSQL      |\n| `-W`                | psql -W mydb                                 | Force password                 |\n| `-c`                | psql -c '\\c postgres' -c '\\dt'               | Execute a SQL query or command |\n| `-H`                | psql -c \"\\l+\" -H postgres > database.html    | Generate HTML report           |\n| `-l`                | psql -l                                      | List all databases             |\n| `-f`                | psql mydb -f file.sql                        | Execute commands from a file   |\n| `-V`                | psql -V                                      | Print the psql version         |\n\n\n\n### Getting help\n\n| -           | -                              |\n| ----------- | :----------------------------- |\n| `\\h`        | Help on syntax of SQL commands |\n| `\\h` DELETE | DELETE SQL statement syntax    |\n| `\\?`        | List of PostgreSQL command     |\n\nRun in PostgreSQL console\n"
            },
            {
                "title": "PostgreSQL Working",
                "content": "\n### Recon\n\nShow version\n\n```\nSHOW SERVER_VERSION;\n```\n\nShow system status\n\n```sql \n\\conninfo\n```\n\nShow environmental variables\n\n```sql \nSHOW ALL;\n```\n\nList users\n\n```sql \nSELECT rolname FROM pg_roles;\n```\n\nShow current user\n\n```sql \nSELECT current_user;\n```\n\nShow current user's permissions\n\n```\n\\du\n```\n\nShow current database\n\n```sql \nSELECT current_database();\n```\n\nShow all tables in database\n\n```sql \n\\dt\n```\n\nList functions\n\n```sql \n\\df <schema>\n```\n\n### Databases\n\nList databases\n\n```sql \n\\l\n```\n\nConnect to database\n\n```sql \n\\c <database_name>\n```\n\nShow current database\n\n```sql \nSELECT current_database();\n```\n\n[Create database](http://www.postgresql.org/docs/current/static/sql-createdatabase.html)\n\n```sql \nCREATE DATABASE <database_name> WITH OWNER <username>;\n```\n\n[Drop database](http://www.postgresql.org/docs/current/static/sql-dropdatabase.html)\n\n```sql \nDROP DATABASE IF EXISTS <database_name>;\n```\n\n[Rename database](http://www.postgresql.org/docs/current/static/sql-alterdatabase.html)\n\n```sql \nALTER DATABASE <old_name> RENAME TO <new_name>;\n```\n\n### Tables\n\nList tables, in current db\n\n```sql \n\\dt\n\nSELECT table_schema,table_name FROM information_schema.tables ORDER BY table_schema,table_name;\n```\n\nList tables, globally\n\n```sql \n\\dt *.*.\n\nSELECT * FROM pg_catalog.pg_tables\n```\n\nList table schema\n\n```sql \n\\d <table_name>\n\\d+ <table_name>\n\nSELECT column_name, data_type, character_maximum_length\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE table_name = '<table_name>';\n```\n\n[Create table](http://www.postgresql.org/docs/current/static/sql-createtable.html)\n\n```sql \nCREATE TABLE <table_name>(\n  <column_name> <column_type>,\n  <column_name> <column_type>\n);\n```\n\nCreate table, with an auto-incrementing primary key\n\n```sql \nCREATE TABLE <table_name> (\n  <column_name> SERIAL PRIMARY KEY\n);\n```\n\n[Delete table](http://www.postgresql.org/docs/current/static/sql-droptable.html)\n\n```sql \nDROP TABLE IF EXISTS <table_name> CASCADE;\n```\n\n### Permissions\n\nBecome the postgres user, if you have permission errors\n\n```shell\nsudo su - postgres\npsql\n```\n\n[Grant](http://www.postgresql.org/docs/current/static/sql-grant.html) all permissions on database\n\n```sql \nGRANT ALL PRIVILEGES ON DATABASE <db_name> TO <user_name>;\n```\n\nGrant connection permissions on database\n\n```sql \nGRANT CONNECT ON DATABASE <db_name> TO <user_name>;\n```\n\nGrant permissions on schema\n\n```sql \nGRANT USAGE ON SCHEMA public TO <user_name>;\n```\n\nGrant permissions to functions\n\n```sql \nGRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO <user_name>;\n```\n\nGrant permissions to select, update, insert, delete, on a all tables\n\n```sql \nGRANT SELECT, UPDATE, INSERT ON ALL TABLES IN SCHEMA public TO <user_name>;\n```\n\nGrant permissions, on a table\n\n```sql \nGRANT SELECT, UPDATE, INSERT ON <table_name> TO <user_name>;\n```\n\nGrant permissions, to select, on a table\n\n```sql \nGRANT SELECT ON ALL TABLES IN SCHEMA public TO <user_name>;\n```\n\n### Columns\n\n[Add column](http://www.postgresql.org/docs/current/static/sql-altertable.html)\n\n```sql \nALTER TABLE <table_name> IF EXISTS\nADD <column_name> <data_type> [<constraints>];\n```\n\nUpdate column\n\n```sql \nALTER TABLE <table_name> IF EXISTS\nALTER <column_name> TYPE <data_type> [<constraints>];\n```\n\nDelete column\n\n```sql \nALTER TABLE <table_name> IF EXISTS\nDROP <column_name>;\n```\n\nUpdate column to be an auto-incrementing primary key\n\n```sql \nALTER TABLE <table_name>\nADD COLUMN <column_name> SERIAL PRIMARY KEY;\n```\n\nInsert into a table, with an auto-incrementing primary key\n\n```sql \nINSERT INTO <table_name>\nVALUES (DEFAULT, <value1>);\n\n\nINSERT INTO <table_name> (<column1_name>,<column2_name>)\nVALUES ( <value1>,<value2> );\n```\n\n### Data\n\n[Select](http://www.postgresql.org/docs/current/static/sql-select.html) all data\n\n```sql \nSELECT * FROM <table_name>;\n```\n\nRead one row of data\n\n```sql \nSELECT * FROM <table_name> LIMIT 1;\n```\n\nSearch for data\n\n```sql \nSELECT * FROM <table_name> WHERE <column_name> = <value>;\n```\n\n[Insert](http://www.postgresql.org/docs/current/static/sql-insert.html) data\n\n```sql \nINSERT INTO <table_name> VALUES( <value_1>, <value_2> );\n```\n\n[Update](http://www.postgresql.org/docs/current/static/sql-update.html) data\n\n```sql \nUPDATE <table_name>\nSET <column_1> = <value_1>, <column_2> = <value_2>\nWHERE <column_1> = <value>;\n```\n\n[Delete](http://www.postgresql.org/docs/current/static/sql-delete.html) all data\n\n```sql \nDELETE FROM <table_name>;\n```\n\nDelete specific data\n\n```sql \nDELETE FROM <table_name>\nWHERE <column_name> = <value>;\n```\n\n### Users\n\nList roles\n\n```sql \nSELECT rolname FROM pg_roles;\n```\n\n[Create user](http://www.postgresql.org/docs/current/static/sql-createuser.html)\n\n```sql \nCREATE USER <user_name> WITH PASSWORD '<password>';\n```\n\n[Drop user](http://www.postgresql.org/docs/current/static/sql-dropuser.html)\n\n```sql \nDROP USER IF EXISTS <user_name>;\n```\n\n[Alter](http://www.postgresql.org/docs/current/static/sql-alterrole.html) user password\n\n```sql \nALTER ROLE <user_name> WITH PASSWORD '<password>';\n```\n\n### Schema\n\nList schemas\n\n```sql \n\\dn\n\nSELECT schema_name FROM information_schema.schemata;\n\nSELECT nspname FROM pg_catalog.pg_namespace;\n```\n\n[Create schema](http://www.postgresql.org/docs/current/static/sql-createschema.html)\n\n```sql \nCREATE SCHEMA IF NOT EXISTS <schema_name>;\n```\n\n[Drop schema](http://www.postgresql.org/docs/current/static/sql-dropschema.html)\n\n```sql \nDROP SCHEMA IF EXISTS <schema_name> CASCADE;\n```\n\n### Dates\n\nShow [current date](https://www.postgresql.org/docs/15/functions-datetime.html#FUNCTIONS-DATETIME-CURRENT) YYYY-MM-DD\n\n```sql \nSELECT current_date;\n```\n\nCalculate\n[age](<https://www.postgresql.org/docs/15/functions-datetime.html#:~:text=age%20(%20timestamp%2C%20timestamp%20)%20%E2%86%92%20interval>)\nbetween two dates\n\n```sql \nSELECT age(timestamp, timestamp);\n```\n\nShow [current time](https://www.postgresql.org/docs/15/functions-datetime.html#FUNCTIONS-DATETIME-CURRENT) with time\nzone\n\n```sql \nSELECT current_time;\n```\n\n[Make](<https://www.postgresql.org/docs/15/functions-datetime.html#:~:text=make_date%20(%20year%20int%2C%20month%20int%2C%20day%20int%20)%20%E2%86%92%20date>)\ndates using integers\n\n```sql \nSELECT make_date(2021,03,25);\n```\n"
            },
            {
                "title": "PostgreSQL Commands",
                "content": "\n### Tables\n\n| -                | -                               |\n| ---------------- | :------------------------------ |\n| `\\d <table>`     | Describe table                  |\n| `\\d+ <table>`    | Describe table with details     |\n| `\\dt`            | List tables from current schema |\n| `\\dt *.*`        | List tables from all schemas    |\n| `\\dt <schema>.*` | List tables for a schema        |\n| `\\dp`            | List table access privileges    |\n| `\\det[+]`        | List foreign tables             |\n\n### Query buffer\n\n| -            | -                                  |\n| ------------ | :--------------------------------- |\n| `\\e [FILE]`  | Edit the query buffer (or file)    |\n| `\\ef [FUNC]` | Edit function definition           |\n| `\\p`         | Show the contents                  |\n| `\\r`         | Reset (clear) the query buffer     |\n| `\\s [FILE]`  | Display history or save it to file |\n| `\\w FILE`    | Write query buffer to file         |\n\n### Informational \n\n| -               | -                               |\n| --------------- | :------------------------------ |\n| `\\l[+]`         | List all databases              |\n| `\\dn[S+]`       | List schemas                    |\n| `\\di[S+]`       | List indexes                    |\n| `\\du[+]`        | List roles                      |\n| `\\ds[S+]`       | List sequences                  |\n| `\\df[antw][S+]` | List functions                  |\n| `\\deu[+]`       | List user mappings              |\n| `\\dv[S+]`       | List views                      |\n| `\\dl`           | List large objects              |\n| `\\dT[S+]`       | List data types                 |\n| `\\da[S]`        | List aggregates                 |\n| `\\db[+]`        | List tablespaces                |\n| `\\dc[S+]`       | List conversions                |\n| `\\dC[+]`        | List casts                      |\n| `\\ddp`          | List default privileges         |\n| `\\dd[S]`        | Show object descriptions        |\n| `\\dD[S+]`       | List domains                    |\n| `\\des[+]`       | List foreign servers            |\n| `\\dew[+]`       | List foreign-data wrappers      |\n| `\\dF[+]`        | List text search configurations |\n| `\\dFd[+]`       | List text search dictionaries   |\n| `\\dFp[+]`       | List text search parsers        |\n| `\\dFt[+]`       | List text search templates      |\n| `\\dL[S+]`       | List procedural languages       |\n| `\\do[S]`        | List operators                  |\n| `\\dO[S+]`       | List collations                 |\n| `\\drds`         | List per-database role settings |\n| `\\dx[+]`        | List extensions                 |\n\n`S`: show system objects, `+`: additional detail\n\n### Connection\n\n| -                      | -                           |\n| ---------------------- | :-------------------------- |\n| `\\c [DBNAME]`          | Connect to new database     |\n| `\\encoding [ENCODING]` | Show or set client encoding |\n| `\\password [USER]`     | Change the password         |\n| `\\conninfo`            | Display information         |\n\n### Formatting\n\n| -                         | -                                          |\n| ------------------------- | :----------------------------------------- |\n| `\\a`                      | Toggle between unaligned and aligned       |\n| `\\C [STRING]`             | Set table title, or unset if none          |\n| `\\f [STRING]`             | Show or set field separator for unaligned  |\n| `\\H`                      | Toggle HTML output mode                    |\n| <code>\\t [on\\|off]</code> | Show only rows                             |\n| `\\T [STRING]`             | Set or unset HTML \\<table\\> tag attributes |\n| <code>\\x [on\\|off]</code> | Toggle expanded output                     |\n\n### Input/Output\n\n| -                 | -                                                              |\n| ----------------- | :------------------------------------------------------------- |\n| `\\copy ...`       | Import/export table<br> _See also:_ [copy](#import-export-csv) |\n| `\\echo [STRING]`  | Print string                                                   |\n| `\\i FILE`         | Execute file                                                   |\n| `\\o [FILE]`       | Export all results to file                                     |\n| `\\qecho [STRING]` | String to output stream                                        |\n\n### Variables\n\n| -                     | -                                             |\n| --------------------- | :-------------------------------------------- |\n| `\\prompt [TEXT] NAME` | Set variable                                  |\n| `\\set [NAME [VALUE]]` | Set variable _(or list all if no parameters)_ |\n| `\\unset NAME`         | Delete variable                               |\n\n### Misc\n\n| -                              | -                    |\n| ------------------------------ | :------------------- |\n| `\\cd [DIR]`                    | Change the directory |\n| <code>\\timing [on\\|off]</code> | Toggle timing        |\n| `\\! [COMMAND]`                 | Execute in shell     |\n| `\\! ls -l`                     | List all in shell    |\n\n### Large Objects\n\n- `\\lo_export LOBOID FILE`\n- `\\lo_import FILE [COMMENT]`\n- `\\lo_list`\n- `\\lo_unlink LOBOID`\n\n\n"
            },
            {
                "title": "Miscellaneous",
                "content": "\n### Backup\n\nUse pg_dumpall to backup all databases\n\n```shell script\n$ pg_dumpall -U postgres > all.sql\n```\n\nUse pg_dump to backup a database\n\n```shell script\n$ pg_dump -d mydb -f mydb_backup.sql\n```\n\n| -    | -                                              |\n| ---- | :--------------------------------------------- |\n| `-a` | Dump only the data, not the schema             |\n| `-s` | Dump only the schema, no data                  |\n| `-c` | Drop database before recreating                |\n| `-C` | Create database before restoring               |\n| `-t` | Dump the named table(s) only                   |\n| `-F` | Format (`c`: custom, `d`: directory, `t`: tar) |\n\nUse `pg_dump -?` to get the full list of options\n\n### Restore\n\nRestore a database with psql\n\n```shell script\n$ psql -U user mydb < mydb_backup.sql\n```\n\nRestore a database with pg_restore\n\n```shell script\n$ pg_restore -d mydb mydb_backup.sql -c\n```\n\n| -    | -                                                                            |\n| ---- | :--------------------------------------------------------------------------- |\n| `-U` | Specify a database user                                                      |\n| `-c` | Drop database before recreating                                              |\n| `-C` | Create database before restoring                                             |\n| `-e` | Exit if an error has encountered                                             |\n| `-F` | Format (`c`: custom, `d`: directory, `t`: tar, `p`: plain text sql(default)) |\n\n\n\nUse `pg_restore -?` to get the full list of options\n\n### Remote access\n\nGet location of postgresql.conf\n\n```shell script\n$ psql -U postgres -c 'SHOW config_file'\n```\n\nAppend to postgresql.conf\n\n```shell script\nlisten_addresses = '*'\n```\n\nAppend to pg_hba.conf (Same location as postgresql.conf)\n\n```shell script\nhost  all  all  0.0.0.0/0  md5\nhost  all  all  ::/0       md5\n```\n\nRestart PostgreSQL server\n\n```shell script\n$ sudo systemctl restart postgresql\n```\n\n### Import/Export CSV\n\nExport table into CSV file\n\n```shell script\n\\copy table TO '<path>' CSV\n\\copy table(col1,col1) TO '<path>' CSV\n\\copy (SELECT...) TO '<path>' CSV\n```\n\nImport CSV file into table\n\n```shell script\n\\copy table FROM '<path>' CSV\n\\copy table(col1,col1) FROM '<path>' CSV\n```\n\nSee also: [Copy](https://www.postgresql.org/docs/current/sql-copy.html)\n"
            },
            {
                "title": "Also see",
                "content": "\n- [Posgres-cheatsheet](https://gist.github.com/apolloclark/ea5466d5929e63043dcf#posgres-cheatsheet) _(gist.github.com)_"
            }
        ]
    },
    {
        "name": "mysql",
        "title": "MySQL",
        "tags": [
            "RDBMS",
            "DB"
        ],
        "categories": [
            "Database"
        ],
        "background": "#2a6387",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/mysql.svg",
        "intro": "The SQL cheat sheet provides you with the most commonly used SQL statements for your reference.",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Connect MySQL\n\n```\nmysql -u <user> -p\n\nmysql [db_name]\n\nmysql -h <host> -P <port> -u <user> -p [db_name]\n\nmysql -h <host> -u <user> -p [db_name]\n```\n\n### Commons \n\n#### Database\n\n| -                        | -               |\n| ------------------------ | --------------- |\n| `CREATE DATABASE` db `;` | Create database |\n| `SHOW DATABASES;`        | List databases  |\n| `USE` db`;`              | Switch to db    |\n| `CONNECT` db `;`         | Switch to db    |\n| `DROP DATABASE` db`;`    | Delete db       |\n\n#### Table\n\n| -                        | -                          |\n| ------------------------ | -------------------------- |\n| `SHOW TABLES;`           | List tables for current db |\n| `SHOW FIELDS FROM` t`;`  | List fields for a table    |\n| `DESC` t`;`              | Show table structure       |\n| `SHOW CREATE TABLE `t`;` | Show create table sql      |\n| `TRUNCATE TABLE `t`;`    | Remove all data in a table |\n| `DROP TABLE `t`;`        | Delete table               |\n\n#### Process\n\n| -                   | -              |\n| ------------------- | -------------- |\n| `show processlist;` | List processes |\n| `kill` pid`;`       | kill process   |\n\n#### Other\n\n| -              | -                  |\n| -------------- | ------------------ |\n| `exit` or `\\q` | Exit MySQL session |\n\n### Backups\n\nCreate a backup\n\n```sql\nmysqldump -u user -p db_name > db.sql\n```\n\nExport db without schema\n\n```\nmysqldump -u user -p db_name --no-data=true --add-drop-table=false > db.sql\n```\n\nRestore a backup\n\n```\nmysql -u user -p db_name < db.sql\n```\n"
            },
            {
                "title": "MySQL Examples",
                "content": "\n### Managing tables\n\nCreate a new table with three columns\n\n```sql\nCREATE TABLE t (\n     id    INT,\n     name  VARCHAR DEFAULT NOT NULL,\n     price INT DEFAULT 0\n     PRIMARY KEY(id)\n);\n```\n\nDelete the table from the database\n\n```sql\nDROP TABLE t ;\n```\n\nAdd a new column to the table\n\n```sql\nALTER TABLE t ADD column;\n```\n\nDrop column c from the table\n\n```sql\nALTER TABLE t DROP COLUMN c ;\n```\n\nAdd a constraint\n\n```sql\nALTER TABLE t ADD constraint;\n```\n\nDrop a constraint\n\n```sql\nALTER TABLE t DROP constraint;\n```\n\nRename a table from t1 to t2\n\n```sql\nALTER TABLE t1 RENAME TO t2;\n```\n\nRename column c1 to c2\n\n```sql\nALTER TABLE t1 RENAME c1 TO c2 ;\n```\n\nRemove all data in a table\n\n```sql\nTRUNCATE TABLE t;\n```\n\n### Querying data from a table\n\nQuery data in columns c1, c2 from a table\n\n```sql\nSELECT c1, c2 FROM t\n```\n\nQuery all rows and columns from a table\n\n```sql\nSELECT * FROM t\n```\n\nQuery data and filter rows with a condition\n\n```sql\nSELECT c1, c2 FROM t\nWHERE condition\n```\n\nQuery distinct rows from a table\n\n```sql\nSELECT DISTINCT c1 FROM t\nWHERE condition\n```\n\nSort the result set in ascending or descending order\n\n```sql\nSELECT c1, c2 FROM t\nORDER BY c1 ASC [DESC]\n```\n\nSkip offset of rows and return the next n rows\n\n```sql\nSELECT c1, c2 FROM t\nORDER BY c1\nLIMIT n OFFSET offset\n```\n\nGroup rows using an aggregate function\n\n```sql\nSELECT c1, aggregate(c2)\nFROM t\nGROUP BY c1\n```\n\nFilter groups using HAVING clause\n\n```sql\nSELECT c1, aggregate(c2)\nFROM t\nGROUP BY c1\nHAVING condition\n```\n\n### Querying from multiple tables \n\nInner join t1 and t2\n\n```sql\nSELECT c1, c2\nFROM t1\nINNER JOIN t2 ON condition\n```\n\nLeft join t1 and t1\n\n```sql\nSELECT c1, c2\nFROM t1\nLEFT JOIN t2 ON condition\n```\n\nRight join t1 and t2\n\n```sql\nSELECT c1, c2\nFROM t1\nRIGHT JOIN t2 ON condition\n```\n\nPerform full outer join\n\n```sql\nSELECT c1, c2\nFROM t1\nFULL OUTER JOIN t2 ON condition\n```\n\nProduce a Cartesian product of rows in tables\n\n```sql\nSELECT c1, c2\nFROM t1\nCROSS JOIN t2\n```\n\nAnother way to perform cross join\n\n```sql\nSELECT c1, c2\nFROM t1, t2\n```\n\nJoin t1 to itself using INNER JOIN clause\n\n```sql\nSELECT c1, c2\nFROM t1 A\nINNER JOIN t1 B ON condition\n```\n\nUsing SQL Operators Combine rows from two queries\n\n```sql\nSELECT c1, c2 FROM t1\nUNION [ALL]\nSELECT c1, c2 FROM t2\n```\n\nReturn the intersection of two queries\n\n```sql\nSELECT c1, c2 FROM t1\nINTERSECT\nSELECT c1, c2 FROM t2\n```\n\nSubtract a result set from another result set\n\n```sql\nSELECT c1, c2 FROM t1\nMINUS\nSELECT c1, c2 FROM t2\n```\n\nQuery rows using pattern matching %, \\_\n\n```sql\nSELECT c1, c2 FROM t1\nWHERE c1 [NOT] LIKE pattern\n```\n\nQuery rows in a list\n\n```sql\nSELECT c1, c2 FROM t\nWHERE c1 [NOT] IN value_list\n```\n\nQuery rows between two values\n\n```sql\nSELECT c1, c2 FROM t\nWHERE  c1 BETWEEN low AND high\n```\n\nCheck if values in a table is NULL or not\n\n```sql\nSELECT c1, c2 FROM t\nWHERE  c1 IS [NOT] NULL\n```\n\n### Using SQL constraints\n\nSet c1 and c2 as a primary key\n\n```sql\nCREATE TABLE t(\n    c1 INT, c2 INT, c3 VARCHAR,\n    PRIMARY KEY (c1,c2)\n);\n```\n\nSet c2 column as a foreign key\n\n```sql\nCREATE TABLE t1(\n    c1 INT PRIMARY KEY,\n    c2 INT,\n    FOREIGN KEY (c2) REFERENCES t2(c2)\n);\n```\n\nMake the values in c1 and c2 unique\n\n```sql\nCREATE TABLE t(\n    c1 INT, c1 INT,\n    UNIQUE(c2,c3)\n);\n```\n\nEnsure c1 > 0 and values in c1 >= c2\n\n```sql\nCREATE TABLE t(\n  c1 INT, c2 INT,\n  CHECK(c1> 0 AND c1 >= c2)\n);\n```\n\nSet values in c2 column not NULL\n\n```sql\nCREATE TABLE t(\n     c1 INT PRIMARY KEY,\n     c2 VARCHAR NOT NULL\n);\n```\n\n### Modifying Data\n\nInsert one row into a table\n\n```sql\nINSERT INTO t(column_list)\nVALUES(value_list);\n```\n\nInsert multiple rows into a table\n\n```sql\nINSERT INTO t(column_list)\nVALUES (value_list),\n       (value_list), \u2026;\n```\n\nInsert rows from t2 into t1\n\n```sql\nINSERT INTO t1(column_list)\nSELECT column_list\nFROM t2;\n```\n\nUpdate new value in the column c1 for all rows\n\n```sql\nUPDATE t\nSET c1 = new_value;\n```\n\nUpdate values in the column c1, c2 that match the condition\n\n```sql\nUPDATE t\nSET c1 = new_value,\n        c2 = new_value\nWHERE condition;\n```\n\nDelete all data in a table\n\n```sql\nDELETE FROM t;\n```\n\nDelete subset of rows in a table\n\n```sql\nDELETE FROM t\nWHERE condition;\n```\n\n### Managing Views\n\nCreate a new view that consists of c1 and c2\n\n```sql\nCREATE VIEW v(c1,c2)\nAS\nSELECT c1, c2\nFROM t;\n```\n\nCreate a new view with check option\n\n```sql\nCREATE VIEW v(c1,c2)\nAS\nSELECT c1, c2\nFROM t;\nWITH [CASCADED | LOCAL] CHECK OPTION;\n```\n\nCreate a recursive view\n\n```sql\nCREATE RECURSIVE VIEW v\nAS\nselect-statement -- anchor part\nUNION [ALL]\nselect-statement; -- recursive part\n```\n\nCreate a temporary view\n\n```sql\nCREATE TEMPORARY VIEW v\nAS\nSELECT c1, c2\nFROM t;\n```\n\nDelete a view\n\n```sql\nDROP VIEW view_name;\n```\n\n### Managing triggers\n\nCreate or modify a trigger\n\n```sql\nCREATE OR MODIFY TRIGGER trigger_name\nWHEN EVENT\nON table_name TRIGGER_TYPE\nEXECUTE stored_procedure;\n```\n\n#### WHEN\n\n| -        | -                              |\n| -------- | ------------------------------ |\n| `BEFORE` | invoke before the event occurs |\n| `AFTER`  | invoke after the event occurs  |\n\n#### EVENT\n\n| -        | -                 |\n| -------- | ----------------- |\n| `INSERT` | invoke for INSERT |\n| `UPDATE` | invoke for UPDATE |\n| `DELETE` | invoke for DELETE |\n\n#### TRIGGER_TYPE\n\n| -                    | -   |\n| -------------------- | --- |\n| `FOR EACH ROW`       |     |\n| `FOR EACH STATEMENT` |     |\n\n### Managing indexes\n\nCreate an index on c1 and c2 of the t table\n\n```sql\nCREATE INDEX idx_name\nON t(c1,c2);\n```\n\nCreate a unique index on c3, c4 of the t table\n\n```sql\nCREATE UNIQUE INDEX idx_name\nON t(c3,c4)\n```\n\nDrop an index\n\n```sql\nDROP INDEX idx_name ON t;\n```\n"
            },
            {
                "title": "MySQL Data Types",
                "content": "\n### Strings\n\n| -            | -                           |\n| ------------ | --------------------------- |\n| `CHAR`       | String (0 - 255)            |\n| `VARCHAR`    | String (0 - 255)            |\n| `TINYTEXT`   | String (0 - 255)            |\n| `TEXT`       | String (0 - 65535)          |\n| `BLOB`       | String (0 - 65535)          |\n| `MEDIUMTEXT` | String (0 - 16777215)       |\n| `MEDIUMBLOB` | String (0 - 16777215)       |\n| `LONGTEXT`   | String (0 - 429496\u00ad7295)    |\n| `LONGBLOB`   | String (0 - 429496\u00ad7295)    |\n| `ENUM`       | One of preset options       |\n| `SET`        | Selection of preset options |\n\n### Date & time\n\n| Data Type   | Format              |\n| ----------- | ------------------- |\n| `DATE     ` | yyyy-MM-dd          |\n| `TIME     ` | hh:mm:ss            |\n| `DATETIME ` | yyyy-MM-dd hh:mm:ss |\n| `TIMESTAMP` | yyyy-MM-dd hh:mm:ss |\n| `YEAR     ` | yyyy                |\n\n### Numeric\n\n| -             | -                                                             |\n| ------------- | ------------------------------------------------------------- |\n| `TINYINT x`   | Integer (-128 to 127)                                         |\n| `SMALLINT x`  | Integer (-32768 to 32767)                                     |\n| `MEDIUMINT x` | Integer (-8388608 to 8388607)                                 |\n| `INT x`       | Integer (-2147\u00ad483648 to 214748\u00ad3647)                         |\n| `BIGINT x`    | Integer (-9223\u00ad372\u00ad036\u00ad854\u00ad775808 to 922337\u00ad203\u00ad685\u00ad477\u00ad5807) |\n| `FLOAT`       | Decimal (precise to 23 digits)                                |\n| `DOUBLE`      | Decimal (24 to 53 digits)                                     |\n| `DECIMAL`     | \"\u00adDOU\u00adBLE\u00ad\" stored as string                                  |\n"
            },
            {
                "title": "MySQL Functions & Operators",
                "content": "\n### Strings \n\n\n- [ASCII()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ascii){data-tooltip=\"Return numeric value of left-most character\"}\n- [BIN()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_bin){data-tooltip=\"Return a string containing binary representation of a number\"}\n- [BIT_LENGTH()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_bit-length){data-tooltip=\"Return length of argument in bits\"}\n- [CHAR()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_char){data-tooltip=\"Return the character for each integer passed\"}\n- [CHARACTER_LENGTH()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_character-length){data-tooltip=\"Synonym for CHAR_LENGTH()\"}\n- [CHAR_LENGTH()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_char-length){data-tooltip=\"Return number of characters in argument\"}\n- [CONCAT()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_concat){data-tooltip=\"Return concatenated string\"}\n- [CONCAT_WS()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_concat-ws){data-tooltip=\"Return concatenate with separator\"}\n- [ELT()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_elt){data-tooltip=\"Return string at index number\"}\n- [EXPORT_SET()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_export-set){data-tooltip=\"Return a string such that for every bit set in the value bits, you get an on string and for every unset bit, you get an off string\"}\n- [FIELD()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_field){data-tooltip=\"Index (position) of first argument in subsequent arguments\"}\n- [FIND_IN_SET()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_find-in-set){data-tooltip=\"Index (position) of first argument within second argument\"}\n- [FORMAT()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_format){data-tooltip=\"Return a number formatted to specified number of decimal places\"}\n- [FROM_BASE64()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_from-base64){data-tooltip=\"Decode base64 encoded string and return result\"}\n- [HEX()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_hex){data-tooltip=\"Hexadecimal representation of decimal or string value\"}\n- [INSERT()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_insert){data-tooltip=\"Insert substring at specified position up to specified number of characters\"}\n- [INSTR()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_instr){data-tooltip=\"Return the index of the first occurrence of substring\"}\n- [LCASE()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lcase){data-tooltip=\"Synonym for LOWER()\"}\n- [LEFT()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_left){data-tooltip=\"Return the leftmost number of characters as specified\"}\n- [LENGTH()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_length){data-tooltip=\"Return the length of a string in bytes\"}\n- [LIKE](https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html#operator_like){data-tooltip=\"Simple pattern matching\"}\n- [LOAD_FILE()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_load-file){data-tooltip=\"Load the named file\"}\n- [LOCATE()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_locate){data-tooltip=\"Return the position of the first occurrence of substring\"}\n- [LOWER()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lower){data-tooltip=\"Return the argument in lowercase\"}\n- [LPAD()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lpad){data-tooltip=\"Return the string argument, left-padded with the specified string\"}\n- [LTRIM()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ltrim){data-tooltip=\"Remove leading spaces\"}\n- [MAKE_SET()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_make-set){data-tooltip=\"Return a set of comma-separated strings that have the corresponding bit in bits set\"}\n- [MATCH](https://dev.mysql.com/doc/refman/8.0/en/fulltext-search.html#function_match){data-tooltip=\"Perform full-text search\"}\n- [MID()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_mid){data-tooltip=\"Return a substring starting from the specified position\"}\n- [NOT LIKE](https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html#operator_not-like){data-tooltip=\"Negation of simple pattern matching\"}\n- [NOT REGEXP](https://dev.mysql.com/doc/refman/8.0/en/regexp.html#operator_not-regexp){data-tooltip=\"Negation of REGEXP\"}\n- [OCT()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_oct){data-tooltip=\"Return a string containing octal representation of a number\"}\n- [OCTET_LENGTH()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_octet-length){data-tooltip=\"Synonym for LENGTH()\"}\n- [ORD()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ord){data-tooltip=\"Return character code for leftmost character of the argument\"}\n- [POSITION()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_position){data-tooltip=\"Synonym for LOCATE()\"}\n- [QUOTE()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_quote){data-tooltip=\"Escape the argument for use in an SQL statement\"}\n- [REGEXP](https://dev.mysql.com/doc/refman/8.0/en/regexp.html#operator_regexp){data-tooltip=\"Whether string matches regular expression\"}\n- [REGEXP_INSTR()](https://dev.mysql.com/doc/refman/8.0/en/regexp.html#function_regexp-instr){data-tooltip=\"Starting index of substring matching regular expression\"}\n- [REGEXP_LIKE()](https://dev.mysql.com/doc/refman/8.0/en/regexp.html#function_regexp-like){data-tooltip=\"Whether string matches regular expression\"}\n- [REGEXP_REPLACE()](https://dev.mysql.com/doc/refman/8.0/en/regexp.html#function_regexp-replace){data-tooltip=\"Replace substrings matching regular expression\"}\n- [REGEXP_SUBSTR()](https://dev.mysql.com/doc/refman/8.0/en/regexp.html#function_regexp-substr){data-tooltip=\"Return substring matching regular expression\"}\n- [REPEAT()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_repeat){data-tooltip=\"Repeat a string the specified number of times\"}\n- [REPLACE()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_replace){data-tooltip=\"Replace occurrences of a specified string\"}\n- [REVERSE()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_reverse){data-tooltip=\"Reverse the characters in a string\"}\n- [RIGHT()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_right){data-tooltip=\"Return the specified rightmost number of characters\"}\n- [RLIKE](https://dev.mysql.com/doc/refman/8.0/en/regexp.html#operator_regexp){data-tooltip=\"Whether string matches regular expression\"}\n- [RPAD()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_rpad){data-tooltip=\"Append string the specified number of times\"}\n- [RTRIM()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_rtrim){data-tooltip=\"Remove trailing spaces\"}\n- [SOUNDEX()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_soundex){data-tooltip=\"Return a soundex string\"}\n- [SOUNDS LIKE](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#operator_sounds-like){data-tooltip=\"Compare sounds\"}\n- [SPACE()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_space){data-tooltip=\"Return a string of the specified number of spaces\"}\n- [STRCMP()](https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html#function_strcmp){data-tooltip=\"Compare two strings\"}\n- [SUBSTR()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substr){data-tooltip=\"Return the substring as specified\"}\n- [SUBSTRING()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substring){data-tooltip=\"Return the substring as specified\"}\n- [SUBSTRING_INDEX()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substring-index){data-tooltip=\"Return a substring from a string before the specified number of occurrences of the delimiter\"}\n- [TO_BASE64()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_to-base64){data-tooltip=\"Return the argument converted to a base-64 string\"}\n- [TRIM()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_trim){data-tooltip=\"Remove leading and trailing spaces\"}\n- [UCASE()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ucase){data-tooltip=\"Synonym for UPPER()\"}\n- [UNHEX()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_unhex){data-tooltip=\"Return a string containing hex representation of a number\"}\n- [UPPER()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_upper){data-tooltip=\"Convert to uppercase\"}\n- [WEIGHT_STRING()](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_weight-string){data-tooltip=\"Return the weight string for a string\"}\n\n\n\n### Date and Time \n\n\n- [ADDDATE()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_adddate){data-tooltip=\"Add time values (intervals) to a date value\"}\n- [ADDTIME()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_addtime){data-tooltip=\"Add time\"}\n- [CONVERT_TZ()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_convert-tz){data-tooltip=\"Convert from one time zone to another\"}\n- [CURDATE()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_curdate){data-tooltip=\"Return the current date\"}\n- [CURRENT_DATE()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_current-date){data-tooltip=\"Synonyms for CURDATE()\"}\n- [CURRENT_TIME()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_current-time){data-tooltip=\"Synonyms for CURTIME()\"}\n- [CURRENT_TIMESTAMP()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_current-timestamp){data-tooltip=\"Synonyms for NOW()\"}\n- [CURTIME()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_curtime){data-tooltip=\"Return the current time\"}\n- [DATE()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date){data-tooltip=\"Extract the date part of a date or datetime expression\"}\n- [DATE_ADD()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-add){data-tooltip=\"Add time values (intervals) to a date value\"}\n- [DATE_FORMAT()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-format){data-tooltip=\"Format date as specified\"}\n- [DATE_SUB()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-sub){data-tooltip=\"Subtract a time value (interval) from a date\"}\n- [DATEDIFF()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_datediff){data-tooltip=\"Subtract two dates\"}\n- [DAY()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_day){data-tooltip=\"Synonym for DAYOFMONTH()\"}\n- [DAYNAME()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_dayname){data-tooltip=\"Return the name of the weekday\"}\n- [DAYOFMONTH()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_dayofmonth){data-tooltip=\"Return the day of the month (0-31)\"}\n- [DAYOFWEEK()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_dayofweek){data-tooltip=\"Return the weekday index of the argument\"}\n- [DAYOFYEAR()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_dayofyear){data-tooltip=\"Return the day of the year (1-366)\"}\n- [EXTRACT()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_extract){data-tooltip=\"Extract part of a date\"}\n- [FROM_DAYS()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_from-days){data-tooltip=\"Convert a day number to a date\"}\n- [FROM_UNIXTIME()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_from-unixtime){data-tooltip=\"Format Unix timestamp as a date\"}\n- [GET_FORMAT()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_get-format){data-tooltip=\"Return a date format string\"}\n- [HOUR()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_hour){data-tooltip=\"Extract the hour\"}\n- [LAST_DAY](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_last-day){data-tooltip=\"Return the last day of the month for the argument\"}\n- [LOCALTIME()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_localtime){data-tooltip=\"Synonym for NOW()\"}\n- [LOCALTIMESTAMP()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_localtimestamp){data-tooltip=\"Synonym for NOW()\"}\n- [MAKEDATE()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_makedate){data-tooltip=\"Create a date from the year and day of year\"}\n- [MAKETIME()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_maketime){data-tooltip=\"Create time from hour, minute, second\"}\n- [MICROSECOND()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_microsecond){data-tooltip=\"Return the microseconds from argument\"}\n- [MINUTE()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_minute){data-tooltip=\"Return the minute from the argument\"}\n- [MONTH()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_month){data-tooltip=\"Return the month from the date passed\"}\n- [MONTHNAME()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_monthname){data-tooltip=\"Return the name of the month\"}\n- [NOW()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_now){data-tooltip=\"Return the current date and time\"}\n- [PERIOD_ADD()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_period-add){data-tooltip=\"Add a period to a year-month\"}\n- [PERIOD_DIFF()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_period-diff){data-tooltip=\"Return the number of months between periods\"}\n- [QUARTER()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_quarter){data-tooltip=\"Return the quarter from a date argument\"}\n- [SEC_TO_TIME()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_sec-to-time){data-tooltip=\"Converts seconds to 'hh:mm:ss' format\"}\n- [SECOND()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_second){data-tooltip=\"Return the second (0-59)\"}\n- [STR_TO_DATE()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_str-to-date){data-tooltip=\"Convert a string to a date\"}\n- [SUBDATE()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_subdate){data-tooltip=\"Synonym for DATE_SUB() when invoked with three arguments\"}\n- [SUBTIME()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_subtime){data-tooltip=\"Subtract times\"}\n- [SYSDATE()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_sysdate){data-tooltip=\"Return the time at which the function executes\"}\n- [TIME()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_time){data-tooltip=\"Extract the time portion of the expression passed\"}\n- [TIME_FORMAT()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_time-format){data-tooltip=\"Format as time\"}\n- [TIME_TO_SEC()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_time-to-sec){data-tooltip=\"Return the argument converted to seconds\"}\n- [TIMEDIFF()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_timediff){data-tooltip=\"Subtract time\"}\n- [TIMESTAMP()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_timestamp){data-tooltip=\"With a single argument, this function returns the date or datetime expression; with two arguments, the sum of the arguments\"}\n- [TIMESTAMPADD()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_timestampadd){data-tooltip=\"Add an interval to a datetime expression\"}\n- [TIMESTAMPDIFF()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_timestampdiff){data-tooltip=\"Subtract an interval from a datetime expression\"}\n- [TO_DAYS()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_to-days){data-tooltip=\"Return the date argument converted to days\"}\n- [TO_SECONDS()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_to-seconds){data-tooltip=\"Return the date or datetime argument converted to seconds since Year 0\"}\n- [UNIX_TIMESTAMP()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_unix-timestamp){data-tooltip=\"Return a Unix timestamp\"}\n- [UTC_DATE()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_utc-date){data-tooltip=\"Return the current UTC date\"}\n- [UTC_TIME()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_utc-time){data-tooltip=\"Return the current UTC time\"}\n- [UTC_TIMESTAMP()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_utc-timestamp){data-tooltip=\"Return the current UTC date and time\"}\n- [WEEK()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_week){data-tooltip=\"Return the week number\"}\n- [WEEKDAY()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_weekday){data-tooltip=\"Return the weekday index\"}\n- [WEEKOFYEAR()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_weekofyear){data-tooltip=\"Return the calendar week of the date (1-53)\"}\n- [YEAR()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_year){data-tooltip=\"Return the year\"}\n- [YEARWEEK()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_yearweek){data-tooltip=\"Return the year and week\"}\n- [GET_FORMAT()](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_get-format){data-tooltip=\"'%m.%d.%Y'\"}\n\n\n\n### Numeric\n\n\n- [%, MOD](https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_mod){data-tooltip=\"Modulo operator\"}\n- [*](https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_times){data-tooltip=\"Multiplication operator\"}\n- [+](https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_plus){data-tooltip=\"Addition operator\"}\n- [-](https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_minus){data-tooltip=\"Minus operator\"}\n- [-](https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_unary-minus){data-tooltip=\"Change the sign of the argument\"}\n- [/](https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_divide){data-tooltip=\"Division operator\"}\n- [ABS()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_abs){data-tooltip=\"Return the absolute value\"}\n- [ACOS()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_acos){data-tooltip=\"Return the arc cosine\"}\n- [ASIN()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_asin){data-tooltip=\"Return the arc sine\"}\n- [ATAN()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_atan){data-tooltip=\"Return the arc tangent\"}\n- [ATAN2(), ATAN()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_atan2){data-tooltip=\"Return the arc tangent of the two arguments\"}\n- [CEIL()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_ceil){data-tooltip=\"Return the smallest integer value not less than the argument\"}\n- [CEILING()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_ceiling){data-tooltip=\"Return the smallest integer value not less than the argument\"}\n- [CONV()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_conv){data-tooltip=\"Convert numbers between different number bases\"}\n- [COS()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_cos){data-tooltip=\"Return the cosine\"}\n- [COT()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_cot){data-tooltip=\"Return the cotangent\"}\n- [CRC32()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_crc32){data-tooltip=\"Compute a cyclic redundancy check value\"}\n- [DEGREES()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_degrees){data-tooltip=\"Convert radians to degrees\"}\n- [DIV](https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_div){data-tooltip=\"Integer division\"}\n- [EXP()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_exp){data-tooltip=\"Raise to the power of\"}\n- [FLOOR()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_floor){data-tooltip=\"Return the largest integer value not greater than the argument\"}\n- [LN()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_ln){data-tooltip=\"Return the natural logarithm of the argument\"}\n- [LOG()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_log){data-tooltip=\"Return the natural logarithm of the first argument\"}\n- [LOG10()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_log10){data-tooltip=\"Return the base-10 logarithm of the argument\"}\n- [LOG2()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_log2){data-tooltip=\"Return the base-2 logarithm of the argument\"}\n- [MOD()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_mod){data-tooltip=\"Return the remainder\"}\n- [PI()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_pi){data-tooltip=\"Return the value of pi\"}\n- [POW()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_pow){data-tooltip=\"Return the argument raised to the specified power\"}\n- [POWER()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_power){data-tooltip=\"Return the argument raised to the specified power\"}\n- [RADIANS()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_radians){data-tooltip=\"Return argument converted to radians\"}\n- [RAND()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_rand){data-tooltip=\"Return a random floating-point value\"}\n- [ROUND()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_round){data-tooltip=\"Round the argument\"}\n- [SIGN()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_sign){data-tooltip=\"Return the sign of the argument\"}\n- [SIN()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_sin){data-tooltip=\"Return the sine of the argument\"}\n- [SQRT()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_sqrt){data-tooltip=\"Return the square root of the argument\"}\n- [TAN()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_tan){data-tooltip=\"Return the tangent of the argument\"}\n- [TRUNCATE()](https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_truncate){data-tooltip=\"Truncate to specified number of decimal places\"}\n\n\n\n### Aggregate\n\n\n- [AVG()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_avg){data-tooltip=\"Return the average value of the argument\"}\n- [BIT_AND()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_bit-and){data-tooltip=\"Return bitwise AND\"}\n- [BIT_OR()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_bit-or){data-tooltip=\"Return bitwise OR\"}\n- [BIT_XOR()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_bit-xor){data-tooltip=\"Return bitwise XOR\"}\n- [COUNT()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_count){data-tooltip=\"Return a count of the number of rows returned\"}\n- [COUNT(DISTINCT)](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_count-distinct){data-tooltip=\"Return the count of a number of different values\"}\n- [GROUP_CONCAT()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_group-concat){data-tooltip=\"Return a concatenated string\"}\n- [JSON_ARRAYAGG()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_json-arrayagg){data-tooltip=\"Return result set as a single JSON array\"}\n- [JSON_OBJECTAGG()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_json-objectagg){data-tooltip=\"Return result set as a single JSON object\"}\n- [MAX()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_max){data-tooltip=\"Return the maximum value\"}\n- [MIN()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_min){data-tooltip=\"Return the minimum value\"}\n- [STD()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_std){data-tooltip=\"Return the population standard deviation\"}\n- [STDDEV()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_stddev){data-tooltip=\"Return the population standard deviation\"}\n- [STDDEV_POP()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_stddev-pop){data-tooltip=\"Return the population standard deviation\"}\n- [STDDEV_SAMP()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_stddev-samp){data-tooltip=\"Return the sample standard deviation\"}\n- [SUM()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_sum){data-tooltip=\"Return the sum\"}\n- [VAR_POP()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_var-pop){data-tooltip=\"Return the population standard variance\"}\n- [VAR_SAMP()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_var-samp){data-tooltip=\"Return the sample variance\"}\n- [VARIANCE()](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_variance){data-tooltip=\"Return the population standard variance\"}\n\n\n\n### JSON \n\n\n- [->](https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html#operator_json-column-path){data-tooltip=\"Return value from JSON column after evaluating path; equivalent to JSON_EXTRACT().\"}\n- [->>](https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html#operator_json-inline-path){data-tooltip=\"Return value from JSON column after evaluating path and unquoting the result; equivalent to JSON_UNQUOTE(JSON_EXTRACT()).\"}\n- [JSON_ARRAY()](https://dev.mysql.com/doc/refman/8.0/en/json-creation-functions.html#function_json-array){data-tooltip=\"Create JSON array\"}\n- [JSON_ARRAY_APPEND()](https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html#function_json-array-append){data-tooltip=\"Append data to JSON document\"}\n- [JSON_ARRAY_INSERT()](https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html#function_json-array-insert){data-tooltip=\"Insert into JSON array\"}\n- [JSON_CONTAINS()](https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html#function_json-contains){data-tooltip=\"Whether JSON document contains specific object at path\"}\n- [JSON_CONTAINS_PATH()](https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html#function_json-contains-path){data-tooltip=\"Whether JSON document contains any data at path\"}\n- [JSON_DEPTH()](https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html#function_json-depth){data-tooltip=\"Maximum depth of JSON document\"}\n- [JSON_EXTRACT()](https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html#function_json-extract){data-tooltip=\"Return data from JSON document\"}\n- [JSON_INSERT()](https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html#function_json-insert){data-tooltip=\"Insert data into JSON document\"}\n- [JSON_KEYS()](https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html#function_json-keys){data-tooltip=\"Array of keys from JSON document\"}\n- [JSON_LENGTH()](https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html#function_json-length){data-tooltip=\"Number of elements in JSON document\"}\n- [JSON_MERGE() (deprecated)](https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html#function_json-merge){data-tooltip=\"Merge JSON documents, preserving duplicate keys. Deprecated synonym for JSON_MERGE_PRESERVE()\"}\n- [JSON_MERGE_PATCH()](https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html#function_json-merge-patch){data-tooltip=\"Merge JSON documents, replacing values of duplicate keys\"}\n- [JSON_MERGE_PRESERVE()](https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html#function_json-merge-preserve){data-tooltip=\"Merge JSON documents, preserving duplicate keys\"}\n- [JSON_OBJECT()](https://dev.mysql.com/doc/refman/8.0/en/json-creation-functions.html#function_json-object){data-tooltip=\"Create JSON object\"}\n- [JSON_OVERLAPS() (introduced 8.0.17)](https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html#function_json-overlaps){data-tooltip=\"Compares two JSON documents, returns TRUE (1) if these have any key-value pairs or array elements in common, otherwise FALSE (0)\"}\n- [JSON_PRETTY()](https://dev.mysql.com/doc/refman/8.0/en/json-utility-functions.html#function_json-pretty){data-tooltip=\"Print a JSON document in human-readable format\"}\n- [JSON_QUOTE()](https://dev.mysql.com/doc/refman/8.0/en/json-creation-functions.html#function_json-quote){data-tooltip=\"Quote JSON document\"}\n- [JSON_REMOVE()](https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html#function_json-remove){data-tooltip=\"Remove data from JSON document\"}\n- [JSON_REPLACE()](https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html#function_json-replace){data-tooltip=\"Replace values in JSON document\"}\n- [JSON_SCHEMA_VALID() (introduced 8.0.17)](https://dev.mysql.com/doc/refman/8.0/en/json-validation-functions.html#function_json-schema-valid){data-tooltip=\"Validate JSON document against JSON schema; returns TRUE/1 if document validates against schema, or FALSE/0 if it does not\"}\n- [JSON_SCHEMA_VALIDATION_REPORT() (introduced 8.0.17)](https://dev.mysql.com/doc/refman/8.0/en/json-validation-functions.html#function_json-schema-validation-report){data-tooltip=\"Validate JSON document against JSON schema; returns report in JSON format on outcome on validation including success or failure and reasons for failure\"}\n- [JSON_SEARCH()](https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html#function_json-search){data-tooltip=\"Path to value within JSON document\"}\n- [JSON_SET()](https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html#function_json-set){data-tooltip=\"Insert data into JSON document\"}\n- [JSON_STORAGE_FREE()](https://dev.mysql.com/doc/refman/8.0/en/json-utility-functions.html#function_json-storage-free){data-tooltip=\"Freed space within binary representation of JSON column value following partial update\"}\n- [JSON_STORAGE_SIZE()](https://dev.mysql.com/doc/refman/8.0/en/json-utility-functions.html#function_json-storage-size){data-tooltip=\"Space used for storage of binary representation of a JSON document\"}\n- [JSON_TABLE()](https://dev.mysql.com/doc/refman/8.0/en/json-table-functions.html#function_json-table){data-tooltip=\"Return data from a JSON expression as a relational table\"}\n- [JSON_TYPE()](https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html#function_json-type){data-tooltip=\"Type of JSON value\"}\n- [JSON_UNQUOTE()](https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html#function_json-unquote){data-tooltip=\"Unquote JSON value\"}\n- [JSON_VALID()](https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html#function_json-valid){data-tooltip=\"Whether JSON value is valid\"}\n- [JSON_VALUE() (introduced 8.0.21)](https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html#function_json-value){data-tooltip=\"Extract value from JSON document at location pointed to by path provided; return this value as VARCHAR(512) or specified type\"}\n- [MEMBER OF() (introduced 8.0.17)](https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html#operator_member-of){data-tooltip=\"Returns true (1) if first operand matches any element of JSON array passed as second operand, otherwise returns false (0)\"}\n\n\n\n### Cast\n\n\n- [BINARY](https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html#operator_binary){data-tooltip=\"Cast a string to a binary string\"}\n- [CAST()](https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html#function_cast){data-tooltip=\"Cast a value as a certain type\"}\n- [CONVERT()](https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html#function_convert){data-tooltip=\"Cast a value as a certain type\"}\n\n\n\n### Flow Control\n\n\n- [CASE](https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html#operator_case){data-tooltip=\"Case operator\"}\n- [IF()](https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html#function_if){data-tooltip=\"If/else construct\"}\n- [IFNULL()](https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html#function_ifnull){data-tooltip=\"Null if/else construct\"}\n- [NULLIF()](https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html#function_nullif){data-tooltip=\"Return NULL if expr1 = expr2\"}\n\n\n\n### Information\n\n\n- [BENCHMARK()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_benchmark){data-tooltip=\"Repeatedly execute an expression\"}\n- [CHARSET()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_charset){data-tooltip=\"Return the character set of the argument\"}\n- [COERCIBILITY()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_coercibility){data-tooltip=\"Return the collation coercibility value of the string argument\"}\n- [COLLATION()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_collation){data-tooltip=\"Return the collation of the string argument\"}\n- [CONNECTION_ID()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_connection-id){data-tooltip=\"Return the connection ID (thread ID) for the connection\"}\n- [CURRENT_ROLE()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_current-role){data-tooltip=\"Return the current active roles\"}\n- [CURRENT_USER()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_current-user){data-tooltip=\"The authenticated user name and host name\"}\n- [DATABASE()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_database){data-tooltip=\"Return the default (current) database name\"}\n- [FOUND_ROWS()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_found-rows){data-tooltip=\"For a SELECT with a LIMIT clause, the number of rows that would be returned were there no LIMIT clause\"}\n- [ICU_VERSION()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_icu-version){data-tooltip=\"ICU library version\"}\n- [LAST_INSERT_ID()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_last-insert-id){data-tooltip=\"Value of the AUTOINCREMENT column for the last INSERT\"}\n- [ROLES_GRAPHML()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_roles-graphml){data-tooltip=\"Return a GraphML document representing memory role subgraphs\"}\n- [ROW_COUNT()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_row-count){data-tooltip=\"The number of rows updated\"}\n- [SCHEMA()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_schema){data-tooltip=\"Synonym for DATABASE()\"}\n- [SESSION_USER()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_session-user){data-tooltip=\"Synonym for USER()\"}\n- [SYSTEM_USER()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_system-user){data-tooltip=\"Synonym for USER()\"}\n- [USER()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_user){data-tooltip=\"The user name and host name provided by the client\"}\n- [VERSION()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_version){data-tooltip=\"Return a string that indicates the MySQL server version\"}\n\n\n\n### Encryption and Compression\n\n\n- [AES_DECRYPT()](https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html#function_aes-decrypt){data-tooltip=\"Decrypt using AES\"}\n- [AES_ENCRYPT()](https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html#function_aes-encrypt){data-tooltip=\"Encrypt using AES\"}\n- [COMPRESS()](https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html#function_compress){data-tooltip=\"Return result as a binary string\"}\n- [MD5()](https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html#function_md5){data-tooltip=\"Calculate MD5 checksum\"}\n- [RANDOM_BYTES()](https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html#function_random-bytes){data-tooltip=\"Return a random byte vector\"}\n- [SHA1(), SHA()](https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html#function_sha1){data-tooltip=\"Calculate an SHA-1 160-bit checksum\"}\n- [SHA2()](https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html#function_sha2){data-tooltip=\"Calculate an SHA-2 checksum\"}\n- [STATEMENT_DIGEST()](https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html#function_statement-digest){data-tooltip=\"Compute statement digest hash value\"}\n- [STATEMENT_DIGEST_TEXT()](https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html#function_statement-digest-text){data-tooltip=\"Compute normalized statement digest\"}\n- [UNCOMPRESS()](https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html#function_uncompress){data-tooltip=\"Uncompress a string compressed\"}\n- [UNCOMPRESSED_LENGTH()](https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html#function_uncompressed-length){data-tooltip=\"Return the length of a string before compression\"}\n- [VALIDATE_PASSWORD_STRENGTH()](https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html#function_validate-password-strength){data-tooltip=\"Determine strength of password\"}\n\n\n\n### Locking\n\n\n- [GET_LOCK()](https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html#function_get-lock){data-tooltip=\"Get a named lock\"}\n- [IS_FREE_LOCK()](https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html#function_is-free-lock){data-tooltip=\"Whether the named lock is free\"}\n- [IS_USED_LOCK()](https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html#function_is-used-lock){data-tooltip=\"Whether the named lock is in use; return connection identifier if true\"}\n- [RELEASE_ALL_LOCKS()](https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html#function_release-all-locks){data-tooltip=\"Release all current named locks\"}\n- [RELEASE_LOCK()](https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html#function_release-lock){data-tooltip=\"Release the named lock\"}\n\n\n\n### Bit\n\n\n- [&](https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html#operator_bitwise-and){data-tooltip=\"Bitwise AND\"}\n- [>>](https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html#operator_right-shift){data-tooltip=\"Right shift\"}\n- [<<](https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html#operator_left-shift){data-tooltip=\"Left shift\"}\n- [^](https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html#operator_bitwise-xor){data-tooltip=\"Bitwise XOR\"}\n- [BIT_COUNT()](https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html#function_bit-count){data-tooltip=\"Return the number of bits that are set\"}\n- [|](https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html#operator_bitwise-or){data-tooltip=\"Bitwise OR\"}\n- [~](https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html#operator_bitwise-invert){data-tooltip=\"Bitwise inversion\"}\n\n\n\n### Miscellaneous\n\n\n- [ANY_VALUE()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_any-value){data-tooltip=\"Suppress ONLY_FULL_GROUP_BY value rejection\"}\n- [BIN_TO_UUID()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_bin-to-uuid){data-tooltip=\"Convert binary UUID to string\"}\n- [DEFAULT()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_default){data-tooltip=\"Return the default value for a table column\"}\n- [GROUPING()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_grouping){data-tooltip=\"Distinguish super-aggregate ROLLUP rows from regular rows\"}\n- [INET_ATON()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_inet-aton){data-tooltip=\"Return the numeric value of an IP address\"}\n- [INET_NTOA()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_inet-ntoa){data-tooltip=\"Return the IP address from a numeric value\"}\n- [INET6_ATON()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_inet6-aton){data-tooltip=\"Return the numeric value of an IPv6 address\"}\n- [INET6_NTOA()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_inet6-ntoa){data-tooltip=\"Return the IPv6 address from a numeric value\"}\n- [IS_IPV4()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_is-ipv4){data-tooltip=\"Whether argument is an IPv4 address\"}\n- [IS_IPV4_COMPAT()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_is-ipv4-compat){data-tooltip=\"Whether argument is an IPv4-compatible address\"}\n- [IS_IPV4_MAPPED()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_is-ipv4-mapped){data-tooltip=\"Whether argument is an IPv4-mapped address\"}\n- [IS_IPV6()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_is-ipv6){data-tooltip=\"Whether argument is an IPv6 address\"}\n- [IS_UUID()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_is-uuid){data-tooltip=\"Whether argument is a valid UUID\"}\n- [MASTER_POS_WAIT()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_master-pos-wait){data-tooltip=\"Block until the replica has read and applied all updates up to the specified position\"}\n- [NAME_CONST()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_name-const){data-tooltip=\"Cause the column to have the given name\"}\n- [SLEEP()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_sleep){data-tooltip=\"Sleep for a number of seconds\"}\n- [UUID()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_uuid){data-tooltip=\"Return a Universal Unique Identifier (UUID)\"}\n- [UUID_SHORT()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_uuid-short){data-tooltip=\"Return an integer-valued universal identifier\"}\n- [UUID_TO_BIN()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_uuid-to-bin){data-tooltip=\"Convert string UUID to binary\"}\n- [VALUES()](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_values){data-tooltip=\"Define the values to be used during an INSERT\"}\n\n\n"
            },
            {
                "title": "Also see",
                "content": "\n- [Regex in MySQL](/regex#regex-in-mysql) _(cheatsheets.zip)_"
            }
        ]
    },
    {
        "name": "mongodb",
        "title": "MongoDB",
        "tags": [
            "NoSQL",
            "DB"
        ],
        "categories": [
            "Database"
        ],
        "background": "#33FF57",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/mongodb.svg",
        "intro": "The MongoDB cheat sheet provides you with the most commonly used MongoDB commands and queries for your reference. the cheatsheet is from mongodb developers website",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Connect MongoDB Shell\n\n```mongosh\nmongo # connects to mongodb://127.0.0.1:27017 by default\n```\n\n```mongosh\nmongo --host <host> --port <port> -u <user> -p <pwd> # omit the password if you want a prompt\n```\n\n```mongosh\nmongo \"mongodb://192.168.1.1:27017\"\n```\n\n```mongosh\nmongo \"mongodb+srv://cluster-name.abcde.mongodb.net/<dbname>\" --username <username> # MongoDB Atlas\n```\n\n### Helpers\n\nShow dbs :\n\n```mongosh\ndb // prints the current database\n```\n\nSwitch database :\n\n```mongosh\nuse <database_name>\n```\n\nShow collections :\n\n```mongosh\nshow collections\n```\n\nRun JavaScript file :\n\n```mongosh\nload(\"myScript.js\")\n```\n\n---\n"
            },
            {
                "title": "Crud",
                "content": "\n### Create\n\n```mongosh\ndb.coll.insertOne({name: \"Max\"})\ndb.coll.insertMany([{name: \"Max\"}, {name:\"Alex\"}]) // ordered bulk insert\ndb.coll.insertMany([{name: \"Max\"}, {name:\"Alex\"}], {ordered: false}) // unordered bulk insert\ndb.coll.insertOne({date: ISODate()})\ndb.coll.insertMany({name: \"Max\"}, {\"writeConcern\": {\"w\": \"majority\", \"wtimeout\": 5000}})\n```\n\n### Delete\n\n```mongosh\ndb.coll.deleteOne({name: \"Max\"})\ndb.coll.deleteMany( $and: [{name: \"Max\"}, {justOne: true}]) //delete all entries which contain both values\ndb.coll.deleteMany( $or: [{name: \"Max\"}, {justOne: true}])  //delete all entries which contain any of the specified values\ndb.coll.deleteMany({}) // WARNING! Deletes all the docs but not the collection itself and its index definitions\ndb.coll.deleteMany({name: \"Max\"}, {\"writeConcern\": {\"w\": \"majority\", \"wtimeout\": 5000}})\ndb.coll.findOneAndDelete({\"name\": \"Max\"})\n```\n\n### Update\n\n```mongosh\ndb.coll.updateMany({\"_id\": 1}, {$set: {\"year\": 2016}}) // WARNING! Replaces the entire document where \"_id\" = 1\ndb.coll.updateOne({\"_id\": 1}, {$set: {\"year\": 2016, name: \"Max\"}})   \ndb.coll.updateOne({\"_id\": 1}, {$unset: {\"year\": 1}})  \ndb.coll.updateOne({\"_id\": 1}, {$rename: {\"year\": \"date\"} }) \ndb.coll.updateOne({\"_id\": 1}, {$inc: {\"year\": 5}}) \ndb.coll.updateOne({\"_id\": 1}, {$mul: {price: 2}})  \ndb.coll.updateOne({\"_id\": 1}, {$min: {\"imdb\": 5}})\ndb.coll.updateOne({\"_id\": 1}, {$max: {\"imdb\": 8}}) \ndb.coll.updateMany({\"_id\": {$lt: 10}}, {$set: {\"lastModified\": ISODate()}})  \n```\n\n### Array \n\n```mongosh\ndb.coll.updateOne({\"_id\": 1}, {$push :{\"array\": 1}})\ndb.coll.updateOne({\"_id\": 1}, {$pull :{\"array\": 1}})\ndb.coll.updateOne({\"_id\": 1}, {$addToSet :{\"array\": 2}})\ndb.coll.updateOne({\"_id\": 1}, {$pop: {\"array\": 1}})  // last element\ndb.coll.updateOne({\"_id\": 1}, {$pop: {\"array\": -1}}) // first element\ndb.coll.updateOne({\"_id\": 1}, {$pullAll: {\"array\" :[3, 4, 5]}})\ndb.coll.updateOne({\"_id\": 1}, {$push: {scores: {$each: [90, 92, 85]}}})\ndb.coll.updateOne({\"_id\": 1, \"grades\": 80}, {$set: {\"grades.$\": 82}})\ndb.coll.updateMany({}, {$inc: {\"grades.$[]\": 10}})\ndb.coll.updateMany({}, {$set: {\"grades.$[element]\": 100}}, {arrayFilters: [{\"element\": {$gte: 100}}]})\n```\n\n### Update many \n\n```mongosh\ndb.coll.updateMany({\"year\": 1999}, {$set: {\"decade\": \"90's\"}})\n```\n\n### FindOneAndUpdate \n\n```mongosh\ndb.coll.findOneAndUpdate({\"name\": \"Max\"}, {$inc: {\"points\": 5}}, {returnNewDocument: true})\n```\n\n### Upsert \n\n```mongosh\ndb.coll.updateOne({\"_id\": 1}, {$set: {item: \"apple\"}, $setOnInsert: {defaultQty: 100}}, {upsert: true})\n```\n\n### Replace \n\n```mongosh\ndb.coll.replaceOne({\"name\": \"Max\"}, {\"firstname\": \"Maxime\", \"surname\": \"Beugnet\"})\n```\n\n### Write concern \n\n```mongosh\ndb.coll.updateMany({}, {$set: {\"x\": 1}}, {\"writeConcern\": {\"w\": \"majority\", \"wtimeout\": 5000}})\n```\n\n### Find \n\n```mongosh\ndb.coll.findOne() // returns a single document\ndb.coll.find()    // returns a cursor - show 20 results - \"it\" to display more\ndb.coll.find().pretty()\ndb.coll.find({name: \"Max\", age: 32}) // implicit logical \"AND\".\ndb.coll.find({date: ISODate(\"2020-09-25T13:57:17.180Z\")})\ndb.coll.find({name: \"Max\", age: 32}).explain(\"executionStats\") // or \"queryPlanner\" or \"allPlansExecution\"\ndb.coll.distinct(\"name\")\n```\n\n### Count\n\n```mongosh\ndb.coll.estimatedDocumentCount()  // estimation based on collection metadata\ndb.coll.countDocuments({age: 32}) // alias for an aggregation pipeline - accurate count\n```\n\n### Comparison\n\n```mongosh\ndb.coll.find({\"year\": {$gt: 1970}})\ndb.coll.find({\"year\": {$gte: 1970}})\ndb.coll.find({\"year\": {$lt: 1970}})\ndb.coll.find({\"year\": {$lte: 1970}})\ndb.coll.find({\"year\": {$ne: 1970}})\ndb.coll.find({\"year\": {$in: [1958, 1959]}})\ndb.coll.find({\"year\": {$nin: [1958, 1959]}})\n```\n\n### Logical\n\n```mongosh\ndb.coll.find({name:{$not: {$eq: \"Max\"}}})\ndb.coll.find({$or: [{\"year\" : 1958}, {\"year\" : 1959}]})\ndb.coll.find({$nor: [{price: 1.99}, {sale: true}]})\ndb.coll.find({\n$and: [\n    {$or: [{qty: {$lt :10}}, {qty :{$gt: 50}}]},\n{$or: [{sale: true}, {price: {$lt: 5 }}]}\n]\n})\n```\n\n### Element\n\n```mongosh\ndb.coll.find({name: {$exists: true}})\ndb.coll.find({\"zipCode\": {$type: 2 }})\ndb.coll.find({\"zipCode\": {$type: \"string\"}})\n```\n\n### Aggregation Pipeline\n\n```mongosh\ndb.coll.aggregate([\n{$match: {status: \"A\"}},\n{$group: {_id: \"$cust_id\", total: {$sum: \"$amount\"}}},\n{$sort: {total: -1}}\n])\n```\n\n### Text search with a \"text\" index\n\n```mongosh\ndb.coll.find({$text: {$search: \"cake\"}}, {score: {$meta: \"textScore\"}}).sort({score: {$meta: \"textScore\"}})\n```\n\n### Regex\n\n```mongosh\ndb.coll.find({name: /^Max/}) // regex: starts by letter \"M\"\ndb.coll.find({name: /^Max$/i}) // regex case insensitive\n```\n\n### Array\n\n```mongosh\ndb.coll.find({tags: {$all: [\"Realm\", \"Charts\"]}})\ndb.coll.find({field: {$size: 2}}) // impossible to index - prefer storing the size of the array & update it\ndb.coll.find({results: {$elemMatch: {product: \"xyz\", score: {$gte: 8}}}})\n```\n\n### Projections\n\n```mongosh\ndb.coll.find({\"x\": 1}, {\"actors\": 1}) // actors + \\_id\ndb.coll.find({\"x\": 1}, {\"actors\": 1, \"\\_id\": 0}) // actors\ndb.coll.find({\"x\": 1}, {\"actors\": 0, \"summary\": 0}) // all but \"actors\" and \"summary\"\n```\n\n### Sort, skip, limit\n\n```mongosh\ndb.coll.find({}).sort({\"year\": 1, \"rating\": -1}).skip(10).limit(3)\n```\n\n### Read Concern\n\n```mongosh\ndb.coll.find().readConcern(\"majority\")\n```\n"
            },
            {
                "title": "Databases and Collections",
                "content": "\n### Drop \n\n```mongosh\ndb.coll.drop()    // removes the collection and its index definitions\ndb.dropDatabase() // double check that you are *NOT* on the PROD cluster... :-)\n```\n\n### Create Collection \n\n```mongosh\ndb.createCollection(\"contacts\", {\n   validator: {$jsonSchema: {\n      bsonType: \"object\",\n      required: [\"phone\"],\n      properties: {\n         phone: {\n            bsonType: \"string\",\n            description: \"must be a string and is required\"\n         },\n         email: {\n            bsonType: \"string\",\n            pattern: \"@mongodb\\.com$\",\n            description: \"must be a string and match the regular expression pattern\"\n         },\n         status: {\n            enum: [ \"Unknown\", \"Incomplete\" ],\n            description: \"can only be one of the enum values\"\n         }\n      }\n   }}\n})\n```\n\n### Other Collection Functions \n\n```mongosh\ndb.coll.stats()\ndb.coll.storageSize()\ndb.coll.totalIndexSize()\ndb.coll.totalSize()\ndb.coll.validate({full: true})\ndb.coll.renameCollection(\"new_coll\", true) // 2nd parameter to drop the target collection if exists\n```\n"
            },
            {
                "title": "Indexes",
                "content": "\n### Basics\n\n#### List\n\n```mongosh\ndb.coll.getIndexes()\ndb.coll.getIndexKeys()\n```\n\n#### Drop Indexes\n\n```mongosh\ndb.coll.dropIndex(\"name_1\")\n```\n\n#### Hide/Unhide Indexes\n\n```mongosh\ndb.coll.hideIndex(\"name_1\")\ndb.coll.unhideIndex(\"name_1\")\n```\n\n### Create Indexes\n\n```mongosh\n// Index Types\ndb.coll.createIndex({\"name\": 1})                // single field index\ndb.coll.createIndex({\"name\": 1, \"date\": 1})     // compound index\ndb.coll.createIndex({foo: \"text\", bar: \"text\"}) // text index\ndb.coll.createIndex({\"$**\": \"text\"})            // wildcard text index\ndb.coll.createIndex({\"userMetadata.$**\": 1})    // wildcard index\ndb.coll.createIndex({\"loc\": \"2d\"})              // 2d index\ndb.coll.createIndex({\"loc\": \"2dsphere\"})        // 2dsphere index\ndb.coll.createIndex({\"_id\": \"hashed\"})          // hashed index\n\n// Index Options\ndb.coll.createIndex({\"lastModifiedDate\": 1}, {expireAfterSeconds: 3600})      // TTL index\ndb.coll.createIndex({\"name\": 1}, {unique: true})\ndb.coll.createIndex({\"name\": 1}, {partialFilterExpression: {age: {$gt: 18}}}) // partial index\ndb.coll.createIndex({\"name\": 1}, {collation: {locale: 'en', strength: 1}})    // case insensitive index with strength = 1 or 2\ndb.coll.createIndex({\"name\": 1 }, {sparse: true})\n```\n"
            },
            {
                "title": "Others",
                "content": "\n### Handy commands \n\n```mongosh\nuse admin\ndb.createUser({\"user\": \"root\", \"pwd\": passwordPrompt(), \"roles\": [\"root\"]})\ndb.dropUser(\"root\")\ndb.auth( \"user\", passwordPrompt() )\n\nuse test\ndb.getSiblingDB(\"dbname\")\ndb.currentOp()\ndb.killOp(123) // opid\n\ndb.fsyncLock()\ndb.fsyncUnlock()\n\ndb.getCollectionNames()\ndb.getCollectionInfos()\ndb.printCollectionStats()\ndb.stats()\n\ndb.getReplicationInfo()\ndb.printReplicationInfo()\ndb.isMaster()\ndb.hostInfo()\ndb.printShardingStatus()\ndb.shutdownServer()\ndb.serverStatus()\n\ndb.setSlaveOk()\ndb.getSlaveOk()\n\ndb.getProfilingLevel()\ndb.getProfilingStatus()\ndb.setProfilingLevel(1, 200) // 0 == OFF, 1 == ON with slowms, 2 == ON\n\ndb.enableFreeMonitoring()\ndb.disableFreeMonitoring()\ndb.getFreeMonitoringStatus()\n\ndb.createView(\"viewName\", \"sourceColl\", [{$project:{department: 1}}])\n```\n\n### Replica Set \n\n```mongosh\nrs.status()\nrs.initiate({\"_id\": \"replicaTest\",\n  members: [\n    { _id: 0, host: \"127.0.0.1:27017\" },\n    { _id: 1, host: \"127.0.0.1:27018\" },\n    { _id: 2, host: \"127.0.0.1:27019\", arbiterOnly:true }]\n})\nrs.add(\"mongodbd1.example.net:27017\")\nrs.addArb(\"mongodbd2.example.net:27017\")\nrs.remove(\"mongodbd1.example.net:27017\")\nrs.conf()\nrs.isMaster()\nrs.printReplicationInfo()\nrs.printSlaveReplicationInfo()\nrs.reconfig(<valid_conf>)\nrs.slaveOk()\nrs.stepDown(20, 5) // (stepDownSecs, secondaryCatchUpPeriodSecs)\n```\n\n### Sharded Cluster \n\n```mongosh\nsh.status()\nsh.addShard(\"rs1/mongodbd1.example.net:27017\")\nsh.shardCollection(\"mydb.coll\", {zipcode: 1})\n\nsh.moveChunk(\"mydb.coll\", { zipcode: \"53187\" }, \"shard0019\")\nsh.splitAt(\"mydb.coll\", {x: 70})\nsh.splitFind(\"mydb.coll\", {x: 70})\nsh.disableAutoSplit()\nsh.enableAutoSplit()\n\nsh.startBalancer()\nsh.stopBalancer()\nsh.disableBalancing(\"mydb.coll\")\nsh.enableBalancing(\"mydb.coll\")\nsh.getBalancerState()\nsh.setBalancerState(true/false)\nsh.isBalancerRunning()\n\nsh.addTagRange(\"mydb.coll\", {state: \"NY\", zip: MinKey }, { state: \"NY\", zip: MaxKey }, \"NY\")\nsh.removeTagRange(\"mydb.coll\", {state: \"NY\", zip: MinKey }, { state: \"NY\", zip: MaxKey }, \"NY\")\nsh.addShardTag(\"shard0000\", \"NYC\")\nsh.removeShardTag(\"shard0000\", \"NYC\")\n\nsh.addShardToZone(\"shard0000\", \"JFK\")\nsh.removeShardFromZone(\"shard0000\", \"NYC\")\nsh.removeRangeFromZone(\"mydb.coll\", {a: 1, b: 1}, {a: 10, b: 10})\n```\n\n### Change Streams \n\n```mongosh\nwatchCursor = db.coll.watch( [ { $match : {\"operationType\" : \"insert\" } } ] )\n\nwhile (!watchCursor.isExhausted()){\n   if (watchCursor.hasNext()){\n      print(tojson(watchCursor.next()));\n   }\n}\n```"
            }
        ]
    },
    {
        "name": "redis",
        "title": "Redis",
        "tags": [
            "cache"
        ],
        "categories": [
            "Database"
        ],
        "background": "#c13b2c",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/redis.svg",
        "intro": "This is a [redis](https://redis.io/) quick reference cheat sheet that lists examples of redis commands\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Getting started\n\nStart Redis\n\n```shell script\n$ redis-server\n```\n\nConnect to redis (Redis CLI client)\n\n```shell script\n$ redis-cli\n```\n\nConnect to redis (telnet)\n\n```shell script\n$ telnet 127.0.0.1 6379\n```\n\n### Hello World\n\n#### Ping\n\n```shell script\nredis> PING\nPONG\n```\n\n#### Hello World\n\n```shell script\nredis> SET mykey \"Hello world\"\nOK\nredis> GET mykey\n\"Hello world\"\n```\n\n### Basic Data types\n\n- [Strings](#redis-string-command)\n- [Lists](#redis-list-command)\n- [Hashes](#redis-hash-command)\n- [Sets](#redis-set-command)\n- [Sorted Sets](#redis-sorted-set-command)\n\nRedis supports 5 basic data types\n"
            },
            {
                "title": "Redis String command",
                "content": "\n### APPEND\n\n```\nAPPEND key value\n```\n\n#### Example\n\n```shell script\nredis> EXISTS mykey\n(integer) 0\nredis> APPEND mykey \"Hello\"\n(integer) 5\nredis> APPEND mykey \" World\"\n(integer) 11\nredis> GET mykey\n\"Hello World\"\n```\n\nAppend a value to a key\n\n### BITCOUNT\n\n```\nBITCOUNT key [start end]\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"foobar\"\n\"OK\"\nredis> BITCOUNT mykey\n(integer) 26\nredis> BITCOUNT mykey 0 0\n(integer) 4\nredis> BITCOUNT mykey 1 1\n(integer) 6\n```\n\nCount set bits in a string\n\n### BITFIELD\n\n```\nBITFIELD key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP|SAT|FAIL]\n```\n\n#### Example\n\n```shell script\nredis> BITFIELD mykey INCRBY i5 100 1 GET u4 0\n1) (integer) 1\n2) (integer) 0\n```\n\nPerform arbitrary bitfield integer operations on strings\n\n### BITOP\n\n```\nBITOP operation destkey key [key ...]\n```\n\n#### Example\n\n```shell script\nredis> SET key1 \"foobar\"\n\"OK\"\nredis> SET key2 \"abcdef\"\n\"OK\"\nredis> BITOP AND dest key1 key2\n(integer) 6\nredis> GET dest\n\"`bc`ab\"\n```\n\nPerform bitwise operations between strings\n\n### BITPOS\n\n```\nBITPOS key bit [start] [end]\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"\\xff\\xf0\\x00\"\n\"OK\"\nredis> BITPOS mykey 0\n(integer) 12\nredis> SET mykey \"\\x00\\xff\\xf0\"\n\"OK\"\nredis> BITPOS mykey 1 0\n(integer) 8\nredis> BITPOS mykey 1 2\n(integer) 16\nredis> set mykey \"\\x00\\x00\\x00\"\n\"OK\"\nredis> BITPOS mykey 1\n(integer) -1\n```\n\nFind first bit set or clear in a string\n\n### DECR\n\n```\nDECR key\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"10\"\n\"OK\"\nredis> DECR mykey\n(integer) 9\nredis> SET mykey \"234293482390480948029348230948\"\n\"OK\"\nredis> DECR mykey\nERR ERR value is not an integer or out of range\n```\n\nDecrement the integer value of a key by one\n\n### DECRBY\n\n```\nDECRBY key decrement\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"10\"\n\"OK\"\nredis> DECRBY mykey 3\n(integer) 7\n```\n\nDecrement the integer value of a key by the given number\n\n### GET\n\n```\nGET key\n```\n\n#### Example\n\n```shell script\nredis> GET nonexisting\n(nil)\nredis> SET mykey \"Hello\"\n\"OK\"\nredis> GET mykey\n\"Hello\"\n```\n\nGet the value of a key\n\n### GETBIT\n\n```\nGETBIT key offset\n```\n\n#### Example\n\n```shell script\nredis> SETBIT mykey 7 1\n(integer) 0\nredis> GETBIT mykey 0\n(integer) 0\nredis> GETBIT mykey 7\n(integer) 1\nredis> GETBIT mykey 100\n(integer) 0\n```\n\nReturns the bit value at offset in the string value stored at key\n\n### GETRANGE\n\n```\nGETRANGE key start end\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"This is a string\"\n\"OK\"\nredis> GETRANGE mykey 0 3\n\"This\"\nredis> GETRANGE mykey -3 -1\n\"ing\"\nredis> GETRANGE mykey 0 -1\n\"This is a string\"\nredis> GETRANGE mykey 10 100\n\"string\"\n```\n\nGet a substring of the string stored at a key\n\n### GETSET\n\n```\nGETSET key value\n```\n\n#### Example\n\n```shell script\nredis> INCR mycounter\n(integer) 1\nredis> GETSET mycounter \"0\"\n\"1\"\nredis> GET mycounter\n\"0\"\n```\n\nSet the string value of a key and return its old value\n\n### INCR\n\n```\nINCR key\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"10\"\n\"OK\"\nredis> INCR mykey\n(integer) 11\nredis> GET mykey\n\"11\"\n```\n\nIncrement the integer value of a key by one\n\n### MSETNX\n\n```\nMSETNX key value [key value ...]\n```\n\n#### Example\n\n```shell script\nredis> MSETNX key1 \"Hello\" key2 \"there\"\n(integer) 1\nredis> MSETNX key2 \"new\" key3 \"world\"\n(integer) 0\nredis> MGET key1 key2 key3\n1) \"Hello\"\n2) \"there\"\n3) (nil)\n```\n\nSet multiple keys to multiple values, only if none of the keys exist\n\n### INCRBYFLOAT\n\n```\nINCRBYFLOAT key increment\n```\n\n#### Example\n\n```shell script\nredis> SET mykey 10.50\n\"OK\"\nredis> INCRBYFLOAT mykey 0.1\n\"10.6\"\nredis> INCRBYFLOAT mykey -5\n\"5.6\"\nredis> SET mykey 5.0e3\n\"OK\"\nredis> INCRBYFLOAT mykey 2.0e2\n\"5200\"\n```\n\nIncrement the float value of a key by the given amount\n\n### MGET\n\n```\nMGET key [key ...]\n```\n\n#### Example\n\n```shell script\nredis> SET key1 \"Hello\"\n\"OK\"\nredis> SET key2 \"World\"\n\"OK\"\nredis> MGET key1 key2 nonexisting\n1) \"Hello\"\n2) \"World\"\n3) (nil)\n```\n\nGet the values of all the given keys\n\n### MSET\n\n```\nMSET key value [key value ...]\n```\n\n#### Example\n\n```shell script\nredis> MSET key1 \"Hello\" key2 \"World\"\n\"OK\"\nredis> GET key1\n\"Hello\"\nredis> GET key2\n\"World\"\n```\n\nSet multiple keys to multiple values\n\n### INCRBY\n\n```\nINCRBY key increment\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"10\"\n\"OK\"\nredis> INCRBY mykey 5\n(integer) 15\n```\n\nIncrement the integer value of a key by the given amount\n\n### PSETEX\n\n```\nPSETEX key milliseconds value\n```\n\n#### Example\n\n```shell script\nredis> PSETEX mykey 1000 \"Hello\"\n\"OK\"\nredis> PTTL mykey\n(integer) 1000\nredis> GET mykey\n\"Hello\"\n```\n\nSet the value and expiration in milliseconds of a key\n\n### SET\n\n```\nSET key value [EX seconds|PX milliseconds|KEEPTTL] [NX|XX] [GET]\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"Hello\"\n\"OK\"\nredis> GET mykey\n\"Hello\"\nredis> SET anotherkey \"will expire in a minute\" EX 60\n\"OK\"\n```\n\nSet the string value of a key\n\n### SETBIT\n\n```\nSETBIT key offset value\n```\n\n#### Example\n\n```shell script\nredis> SETBIT mykey 7 1\n(integer) 0\nredis> SETBIT mykey 7 0\n(integer) 1\nredis> GET mykey\n\"\\u0000\"\n```\n\nSets or clears the bit at offset in the string value stored at key\n\n### SETEX\n\n```\nSETEX key seconds value\n```\n\n#### Example\n\n```shell script\nredis> SETEX mykey 10 \"Hello\"\n\"OK\"\nredis> TTL mykey\n(integer) 10\nredis> GET mykey\n\"Hello\"\n```\n\nSet the value and expiration of a key\n\n### SETNX\n\n```\nSETNX key value\n```\n\n#### Example\n\n```shell script\nredis> SETNX mykey \"Hello\"\n(integer) 1\nredis> SETNX mykey \"World\"\n(integer) 0\nredis> GET mykey\n\"Hello\"\n```\n\nSet the value of a key, only if the key does not exist\n\n### SETRANGE\n\n```\nSETRANGE key offset value\n```\n\n#### Example\n\n```shell script\nredis> SET key1 \"Hello World\"\n\"OK\"\nredis> SETRANGE key1 6 \"Redis\"\n(integer) 11\nredis> GET key1\n\"Hello Redis\"\n```\n\nOverwrite part of a string at key starting at the specified offset\n\n### STRLEN\n\n```\nSTRLEN key\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"Hello world\"\n\"OK\"\nredis> STRLEN mykey\n(integer) 11\nredis> STRLEN nonexisting\n(integer) 0\n```\n\nGet the length of the value stored in a key\n\n### STRALGO\n\n```\nSTRALGO LCS algo-specific-argument [algo-specific-argument ...]\n```\n\n#### Example\n\n```shell script\nredis> STRALGO LCS KEYS key1 key2 IDX\n1) \"matches\"\n2) 1) 1) 1) (integer) 4\n         2) (integer) 7\n      2) 1) (integer) 5\n         2) (integer) 8\n   2) 1) 1) (integer) 2\n         2) (integer) 3\n      2) 1) (integer) 0\n         2) (integer) 1\n3) \"len\"\n4) (integer) 6\n```\n\nRun algorithms (currently LCS) against strings\n"
            },
            {
                "title": "Redis Set command",
                "content": "\n### SADD\n\n```\nSADD key member [member ...]\n```\n\n#### Example\n\n```shell script\nredis> SADD myset \"Hello\"\n(integer) 1\nredis> SADD myset \"World\"\n(integer) 1\nredis> SADD myset \"World\"\n(integer) 0\nredis> SMEMBERS myset\n1) \"Hello\"\n2) \"World\"\n```\n\nAdd one or more members to a set\n\n### SCARD\n\n```\nSCARD key\n```\n\n#### Example\n\n```shell script\nredis> SADD myset \"Hello\"\n(integer) 1\nredis> SADD myset \"World\"\n(integer) 1\nredis> SCARD myset\n(integer) 2\n```\n\nGet the number of members in a set\n\n### SDIFF\n\n```\nSDIFF key [key ...]\n```\n\n#### Example\n\n```shell script\nredis> SADD key1 \"a\"\n(integer) 1\nredis> SADD key1 \"b\"\n(integer) 1\nredis> SADD key1 \"c\"\n(integer) 1\nredis> SADD key2 \"c\"\n(integer) 1\nredis> SADD key2 \"d\"\n(integer) 1\nredis> SADD key2 \"e\"\n(integer) 1\nredis> SDIFF key1 key2\n1) \"a\"\n2) \"b\"\n```\n\nSubtract multiple sets\n\n### SDIFFSTORE\n\n```\nSDIFFSTORE destination key [key ...]\n```\n\n#### Example\n\n```shell script\nredis> SADD key1 \"a\"\n(integer) 1\nredis> SADD key1 \"b\"\n(integer) 1\nredis> SADD key1 \"c\"\n(integer) 1\nredis> SADD key2 \"c\"\n(integer) 1\nredis> SADD key2 \"d\"\n(integer) 1\nredis> SADD key2 \"e\"\n(integer) 1\nredis> SDIFFSTORE key key1 key2\n(integer) 2\nredis> SMEMBERS key\n1) \"a\"\n2) \"b\"\n```\n\nSubtract multiple sets and store the resulting set in a key\n\n### SINTER\n\n```\nSINTER key [key ...]\n```\n\n#### Example\n\n```shell script\nredis> SADD key1 \"a\"\n(integer) 1\nredis> SADD key1 \"b\"\n(integer) 1\nredis> SADD key1 \"c\"\n(integer) 1\nredis> SADD key2 \"c\"\n(integer) 1\nredis> SADD key2 \"d\"\n(integer) 1\nredis> SADD key2 \"e\"\n(integer) 1\nredis> SINTER key1 key2\n1) \"c\"\n```\n\nIntersect multiple sets\n\n### SINTERSTORE\n\n```\nSINTERSTORE destination key [key ...]\n```\n\n#### Example\n\n```shell script\nredis> SADD key1 \"a\"\n(integer) 1\nredis> SADD key1 \"b\"\n(integer) 1\nredis> SADD key1 \"c\"\n(integer) 1\nredis> SADD key2 \"c\"\n(integer) 1\nredis> SADD key2 \"d\"\n(integer) 1\nredis> SADD key2 \"e\"\n(integer) 1\nredis> SINTERSTORE key key1 key2\n(integer) 1\nredis> SMEMBERS key\n1) \"c\"\n```\n\nIntersect multiple sets and store the resulting set in a key\n\n### SISMEMBER\n\n```\nSISMEMBER key member\n```\n\n#### Example\n\n```shell script\nredis> SADD myset \"one\"\n(integer) 1\nredis> SISMEMBER myset \"one\"\n(integer) 1\nredis> SISMEMBER myset \"two\"\n(integer) 0\n```\n\nDetermine if a given value is a member of a set\n\n### SMISMEMBER\n\n```\nSMISMEMBER key member [member ...]\n```\n\n#### Example\n\n```shell script\nredis> SADD myset \"one\"\n(integer) 1\nredis> SADD myset \"one\"\n(integer) 0\nredis> SMISMEMBER myset \"one\" \"notamember\"\n1) (integer) 1\n2) (integer) 0\n```\n\nReturns the membership associated with the given elements for a set\n\n### SMEMBERS\n\n```\nSMEMBERS key\n```\n\n#### Example\n\n```shell script\nredis> SADD myset \"Hello\"\n(integer) 1\nredis> SADD myset \"World\"\n(integer) 1\nredis> SMEMBERS myset\n1) \"Hello\"\n2) \"World\"\n```\n\nGet all the members in a set\n\n### SMOVE\n\n```\nSMOVE source destination member\n```\n\n#### Example\n\n```shell script\nredis> SADD myset \"one\"\n(integer) 1\nredis> SADD myset \"two\"\n(integer) 1\nredis> SADD myotherset \"three\"\n(integer) 1\nredis> SMOVE myset myotherset \"two\"\n(integer) 1\nredis> SMEMBERS myset\n1) \"one\"\nredis> SMEMBERS myotherset\n1) \"two\"\n2) \"three\"\n```\n\nMove a member from one set to another\n\n### SPOP\n\n```\nSPOP key [count]\n```\n\n#### Example\n\n```shell script\nredis> SADD myset \"one\"\n(integer) 1\nredis> SADD myset \"two\"\n(integer) 1\nredis> SADD myset \"three\"\n(integer) 1\nredis> SPOP myset\n\"two\"\nredis> SMEMBERS myset\n1) \"one\"\n2) \"three\"\nredis> SADD myset \"four\"\n(integer) 1\nredis> SADD myset \"five\"\n(integer) 1\nredis> SPOP myset 3\n1) \"four\"\n2) \"five\"\n3) \"three\"\nredis> SMEMBERS myset\n1) \"one\"\n```\n\nRemove and return one or multiple random members from a set\n\n### SRANDMEMBER\n\n```\nSRANDMEMBER key [count]\n```\n\n#### Example\n\n```shell script\nredis> SADD myset one two three\n(integer) 3\nredis> SRANDMEMBER myset\n\"three\"\nredis> SRANDMEMBER myset 2\n1) \"two\"\n2) \"three\"\nredis> SRANDMEMBER myset -5\n1) \"one\"\n2) \"two\"\n3) \"three\"\n4) \"three\"\n5) \"one\"\n```\n\nGet one or multiple random members from a set\n\n### SREM\n\n```\nSREM key member [member ...]\n```\n\n#### Example\n\n```shell script\nredis> SADD myset \"one\"\n(integer) 1\nredis> SADD myset \"two\"\n(integer) 1\nredis> SADD myset \"three\"\n(integer) 1\nredis> SREM myset \"one\"\n(integer) 1\nredis> SREM myset \"four\"\n(integer) 0\nredis> SMEMBERS myset\n1) \"two\"\n2) \"three\"\n```\n\nRemove one or more members from a set\n\n### SUNION\n\n```\nSUNION key [key ...]\n```\n\n#### Example\n\n```shell script\nredis> SADD key1 \"a\"\n(integer) 1\nredis> SADD key1 \"b\"\n(integer) 1\nredis> SADD key1 \"c\"\n(integer) 1\nredis> SADD key2 \"c\"\n(integer) 1\nredis> SADD key2 \"d\"\n(integer) 1\nredis> SADD key2 \"e\"\n(integer) 1\nredis> SUNION key1 key2\n1) \"a\"\n2) \"c\"\n3) \"e\"\n4) \"b\"\n5) \"d\"\n```\n\nAdd multiple sets\n\n### SUNIONSTORE\n\n```\nSUNIONSTORE destination key [key ...]\n```\n\n#### Example\n\n```shell script\nredis> SADD key1 \"a\"\n(integer) 1\nredis> SADD key1 \"b\"\n(integer) 1\nredis> SADD key1 \"c\"\n(integer) 1\nredis> SADD key2 \"c\"\n(integer) 1\nredis> SADD key2 \"d\"\n(integer) 1\nredis> SADD key2 \"e\"\n(integer) 1\nredis> SUNIONSTORE key key1 key2\n(integer) 5\nredis> SMEMBERS key\n1) \"a\"\n2) \"c\"\n3) \"e\"\n4) \"b\"\n5) \"d\"\n```\n\nAdd multiple sets and store the resulting set in a key\n"
            },
            {
                "title": "Redis List command",
                "content": "\n### Misc\n\n| -                                                   | -                                                                                                  |\n| --------------------------------------------------- | -------------------------------------------------------------------------------------------------- |\n| [BRPOPLPUSH ](https://redis.io/commands/brpoplpush) | Pop an element from a list, push it to another list and return it; or block until one is available |\n| [BLMOVE ](https://redis.io/commands/blmove)         | Pop an element from a list, push it to another list and return it; or block until one is available |\n\n### BLPOP\n\n```\nBLPOP key [key ...] timeout\n```\n\n#### Example\n\n```shell script\nredis> DEL list1 list2\n(integer) 0\nredis> RPUSH list1 a b c\n(integer) 3\nredis> BLPOP list1 list2 0\n1) \"list1\"\n2) \"a\"\n```\n\nRemove and get the first element in a list, or block until one is available |\n\n### BRPOP\n\n```\nBRPOP key [key ...] timeout\n```\n\n#### Example\n\n```shell script\nredis> DEL list1 list2\n(integer) 0\nredis> RPUSH list1 a b c\n(integer) 3\nredis> BRPOP list1 list2 0\n1) \"list1\"\n2) \"c\"\n```\n\nRemove and get the last element in a list, or block until one is available |\n\n### LINDEX\n\n```\nLINDEX key index\n```\n\n#### Example\n\n```shell script\nredis> LPUSH mylist \"World\"\n(integer) 1\nredis> LPUSH mylist \"Hello\"\n(integer) 2\nredis> LINDEX mylist 0\n\"Hello\"\nredis> LINDEX mylist -1\n\"World\"\nredis> LINDEX mylist 3\n(nil)\n```\n\nGet an element from a list by its index\n\n### LINSERT\n\n```\nLINSERT key BEFORE|AFTER pivot element\n```\n\n#### Example\n\n```shell script\nredis> RPUSH mylist \"Hello\"\n(integer) 1\nredis> RPUSH mylist \"World\"\n(integer) 2\nredis> LINSERT mylist BEFORE \"World\" \"There\"\n(integer) 3\nredis> LRANGE mylist 0 -1\n1) \"Hello\"\n2) \"There\"\n3) \"World\"\n```\n\nInsert an element before or after another element in a list\n\n### LLEN\n\n```\nLLEN key\n```\n\n#### Example\n\n```shell script\nredis> LPUSH mylist \"World\"\n(integer) 1\nredis> LPUSH mylist \"Hello\"\n(integer) 2\nredis> LLEN mylist\n(integer) 2\n```\n\nGet the length of a list\n\n### LPOP\n\n```\nLPOP key [count]\n```\n\n#### Example\n\n```shell script\nredis> RPUSH mylist \"one\"\n(integer) 1\nredis> RPUSH mylist \"two\"\n(integer) 2\nredis> RPUSH mylist \"three\"\n(integer) 3\nredis> LPOP mylist\n\"one\"\nredis> LRANGE mylist 0 -1\n1) \"two\"\n2) \"three\"\n```\n\nRemove and get the first elements in a list\n\n### LPOS\n\n```\nLPOS key element [RANK rank] [COUNT num-matches] [MAXLEN len]\n```\n\n#### Example\n\n```shell script\nredis> RPUSH mylist a b c d 1 2 3 4 3 3 3\n(integer) 11\nredis> LPOS mylist 3\n(integer) 6\nredis> LPOS mylist 3 COUNT 0 RANK 2\n1) (integer) 8\n2) (integer) 9\n3) (integer) 10\n```\n\nReturn the index of matching elements on a list\n\n### LPUSH\n\n```\nLPUSH key element [element ...]\n```\n\n#### Example\n\n```shell script\nredis> LPUSH mylist \"world\"\n(integer) 1\nredis> LPUSH mylist \"hello\"\n(integer) 2\nredis> LRANGE mylist 0 -1\n1) \"hello\"\n2) \"world\"\n```\n\nPrepend one or multiple elements to a list\n\n### LPUSHX\n\n```\nLPUSHX key element [element ...]\n```\n\n#### Example\n\n```shell script\nredis> LPUSH mylist \"World\"\n(integer) 1\nredis> LPUSHX mylist \"Hello\"\n(integer) 2\nredis> LPUSHX myotherlist \"Hello\"\n(integer) 0\nredis> LRANGE mylist 0 -1\n1) \"Hello\"\n2) \"World\"\nredis> LRANGE myotherlist 0 -1\n(empty list or set)\n```\n\nPrepend an element to a list, only if the list exists\n\n### LRANGE\n\n```\nLRANGE key start stop\n```\n\n#### Example\n\n```shell script\nredis> RPUSH mylist \"one\"\n(integer) 1\nredis> RPUSH mylist \"two\"\n(integer) 2\nredis> RPUSH mylist \"three\"\n(integer) 3\nredis> LRANGE mylist 0 0\n1) \"one\"\nredis> LRANGE mylist -3 2\n1) \"one\"\n2) \"two\"\n3) \"three\"\nredis> LRANGE mylist -100 100\n1) \"one\"\n2) \"two\"\n3) \"three\"\nredis> LRANGE mylist 5 10\n(empty list or set)\n```\n\nGet a range of elements from a list\n\n### LREM\n\n```\nLREM key count element\n```\n\n#### Example\n\n```shell script\nredis> RPUSH mylist \"hello\"\n(integer) 1\nredis> RPUSH mylist \"hello\"\n(integer) 2\nredis> RPUSH mylist \"foo\"\n(integer) 3\nredis> RPUSH mylist \"hello\"\n(integer) 4\nredis> LREM mylist -2 \"hello\"\n(integer) 2\nredis> LRANGE mylist 0 -1\n1) \"hello\"\n2) \"foo\"\n```\n\nRemove elements from a list\n\n### LSET\n\n```\nLSET key index element\n```\n\n#### Example\n\n```shell script\nredis> RPUSH mylist \"one\"\n(integer) 1\nredis> RPUSH mylist \"two\"\n(integer) 2\nredis> RPUSH mylist \"three\"\n(integer) 3\nredis> LSET mylist 0 \"four\"\n\"OK\"\nredis> LSET mylist -2 \"five\"\n\"OK\"\nredis> LRANGE mylist 0 -1\n1) \"four\"\n2) \"five\"\n3) \"three\"\n```\n\nSet the value of an element in a list by its index\n\n### LTRIM\n\n```\nLTRIM key start stop\n```\n\n#### Example\n\n```shell script\nredis> RPUSH mylist \"one\"\n(integer) 1\nredis> RPUSH mylist \"two\"\n(integer) 2\nredis> RPUSH mylist \"three\"\n(integer) 3\nredis> LTRIM mylist 1 -1\n\"OK\"\nredis> LRANGE mylist 0 -1\n1) \"two\"\n2) \"three\"\n```\n\nTrim a list to the specified range\n\n### RPOP\n\n```\nRPOP key [count]\n```\n\n#### Example\n\n```shell script\nredis> RPUSH mylist \"one\"\n(integer) 1\nredis> RPUSH mylist \"two\"\n(integer) 2\nredis> RPUSH mylist \"three\"\n(integer) 3\nredis> RPOP mylist\n\"three\"\nredis> LRANGE mylist 0 -1\n1) \"one\"\n2) \"two\"\n```\n\nRemove and get the last elements in a list\n\n### RPOPLPUSH\n\n```\nRPOPLPUSH source destination\n```\n\n#### Example\n\n```shell script\nredis> RPUSH mylist \"one\"\n(integer) 1\nredis> RPUSH mylist \"two\"\n(integer) 2\nredis> RPUSH mylist \"three\"\n(integer) 3\nredis> RPOPLPUSH mylist myotherlist\n\"three\"\nredis> LRANGE mylist 0 -1\n1) \"one\"\n2) \"two\"\nredis> LRANGE myotherlist 0 -1\n1) \"three\"\n```\n\nRemove the last element in a list, prepend it to another list and return it\n\n### LMOVE\n\n```\nLMOVE source destination LEFT|RIGHT LEFT|RIGHT\n```\n\n#### Example\n\n```shell script\nredis> RPUSH mylist \"one\"\n(integer) 1\nredis> RPUSH mylist \"two\"\n(integer) 2\nredis> RPUSH mylist \"three\"\n(integer) 3\nredis> LMOVE mylist myotherlist RIGHT LEFT\n\"three\"\nredis> LMOVE mylist myotherlist LEFT RIGHT\n\"one\"\nredis> LRANGE mylist 0 -1\n1) \"two\"\nredis> LRANGE myotherlist 0 -1\n1) \"three\"\n2) \"one\"\n```\n\nPop an element from a list, push it to another list and return it\n\n### RPUSH\n\n```\nRPUSH key element [element ...]\n```\n\n#### Example\n\n```shell script\nredis> RPUSH mylist \"hello\"\n(integer) 1\nredis> RPUSH mylist \"world\"\n(integer) 2\nredis> LRANGE mylist 0 -1\n1) \"hello\"\n2) \"world\"\n```\n\nAppend one or multiple elements to a list\n\n### RPUSHX\n\n```\nRPUSHX key element [element ...]\n```\n\n#### Example\n\n```shell script\nredis> RPUSH mylist \"Hello\"\n(integer) 1\nredis> RPUSHX mylist \"World\"\n(integer) 2\nredis> RPUSHX myotherlist \"World\"\n(integer) 0\nredis> LRANGE mylist 0 -1\n1) \"Hello\"\n2) \"World\"\nredis> LRANGE myotherlist 0 -1\n(empty list or set)\n```\n\nAppend an element to a list, only if the list exists\n"
            },
            {
                "title": "Redis Hash command",
                "content": "\n### HDEL\n\n```\nHDEL key field [field ...]\n```\n\n#### Example\n\n```shell script\nredis> HSET myhash field1 \"foo\"\n(integer) 1\nredis> HDEL myhash field1\n(integer) 1\nredis> HDEL myhash field2\n(integer) 0\n```\n\nDelete one or more hash fields\n\n### HEXISTS\n\n```\nHEXISTS key field\n```\n\n#### Example\n\n```shell script\nredis> HSET myhash field1 \"foo\"\n(integer) 1\nredis> HEXISTS myhash field1\n(integer) 1\nredis> HEXISTS myhash field2\n(integer) 0\n```\n\nDetermine if a hash field exists\n\n### HGET\n\n```\nHGET key field\n```\n\n#### Example\n\n```shell script\nredis> HSET myhash field1 \"foo\"\n(integer) 1\nredis> HGET myhash field1\n\"foo\"\nredis> HGET myhash field2\n(nil)\n```\n\nGet the value of a hash field\n\n### HGETALL\n\n```\nHGETALL key\n```\n\n#### Example\n\n```shell script\nredis> HSET myhash field1 \"Hello\"\n(integer) 1\nredis> HSET myhash field2 \"World\"\n(integer) 1\nredis> HGETALL myhash\n1) \"field1\"\n2) \"Hello\"\n3) \"field2\"\n4) \"World\"\n```\n\nGet all the fields and values in a hash\n\n### HINCRBY\n\n```\nHINCRBY key field increment\n```\n\n#### Example\n\n```shell script\nredis> HSET myhash field 5\n(integer) 1\nredis> HINCRBY myhash field 1\n(integer) 6\nredis> HINCRBY myhash field -1\n(integer) 5\nredis> HINCRBY myhash field -10\n(integer) -5\n```\n\nIncrement the integer value of a hash field by the given number\n\n### HINCRBYFLOAT\n\n```\nHINCRBYFLOAT key field increment\n```\n\n#### Example\n\n```shell script\nredis> HSET mykey field 10.50\n(integer) 1\nredis> HINCRBYFLOAT mykey field 0.1\n\"10.6\"\nredis> HINCRBYFLOAT mykey field -5\n\"5.6\"\nredis> HSET mykey field 5.0e3\n(integer) 0\nredis> HINCRBYFLOAT mykey field 2.0e2\n\"5200\"\n```\n\nIncrement the float value of a hash field by the given amount\n\n### HKEYS\n\n```\nHKEYS key\n```\n\n#### Example\n\n```shell script\nredis> HSET myhash field1 \"Hello\"\n(integer) 1\nredis> HSET myhash field2 \"World\"\n(integer) 1\nredis> HKEYS myhash\n1) \"field1\"\n2) \"field2\"\n```\n\nGet all the fields in a hash\n\n### HLEN\n\n```\nHLEN key\n```\n\n#### Example\n\n```shell script\nredis> HSET myhash field1 \"Hello\"\n(integer) 1\nredis> HSET myhash field2 \"World\"\n(integer) 1\nredis> HLEN myhash\n(integer) 2\n```\n\nGet the number of fields in a hash\n\n### HMGET\n\n```\nHMGET key field [field ...]\n```\n\n#### Example\n\n```shell script\nredis> HSET myhash field1 \"Hello\"\n(integer) 1\nredis> HSET myhash field2 \"World\"\n(integer) 1\nredis> HMGET myhash field1 field2 nofield\n1) \"Hello\"\n2) \"World\"\n3) (nil)\n```\n\nGet the values of all the given hash fields\n\n### HMSET\n\n```\nHMSET key field value [field value ...]\n```\n\n#### Example\n\n```shell script\nredis> HMSET myhash field1 \"Hello\" field2 \"World\"\n\"OK\"\nredis> HGET myhash field1\n\"Hello\"\nredis> HGET myhash field2\n\"World\"\n```\n\nSet multiple hash fields to multiple values\n\n### HSET\n\n```\nHSET key field value [field value ...]\n```\n\n#### Example\n\n```shell script\nredis> HSET myhash field1 \"Hello\"\n(integer) 1\nredis> HGET myhash field1\n\"Hello\"\n```\n\nSet the string value of a hash field\n\n### HSETNX\n\n```\nHSETNX key field value\n```\n\n#### Example\n\n```shell script\nredis> HSETNX myhash field \"Hello\"\n(integer) 1\nredis> HSETNX myhash field \"World\"\n(integer) 0\nredis> HGET myhash field\n\"Hello\"\n```\n\nSet the value of a hash field, only if the field does not exist\n\n### HSTRLEN\n\n```\nHSTRLEN key field\n```\n\n#### Example\n\n```shell script\nredis> HMSET myhash f1 HelloWorld f2 99 f3 -256\n\"OK\"\nredis> HSTRLEN myhash f1\n(integer) 10\nredis> HSTRLEN myhash f2\n(integer) 2\nredis> HSTRLEN myhash f3\n(integer) 4\n```\n\nGet the length of the value of a hash field\n\n### HVALS\n\n```\nHVALS key\n```\n\n#### Example\n\n```shell script\nredis> HSET myhash field1 \"Hello\"\n(integer) 1\nredis> HSET myhash field2 \"World\"\n(integer) 1\nredis> HVALS myhash\n1) \"Hello\"\n2) \"World\"\n```\n\nGet all the values in a hash\n"
            },
            {
                "title": "Redis Sorted set command",
                "content": "\n### BZPOPMIN\n\n```\nBZPOPMIN key [key ...] timeout\n```\n\n#### Example\n\n```shell script\nredis> DEL zset1 zset2\n(integer) 0\nredis> ZADD zset1 0 a 1 b 2 c\n(integer) 3\nredis> BZPOPMIN zset1 zset2 0\n1) \"zset1\"\n2) \"a\"\n3) \"0\"\n```\n\nRemove and return the member with the lowest score from one or more sorted sets, or block until one is available\n\n### BZPOPMAX\n\n```\nBZPOPMAX key [key ...] timeout\n```\n\n#### Example\n\n```shell script\nredis> DEL zset1 zset2\n(integer) 0\nredis> ZADD zset1 0 a 1 b 2 c\n(integer) 3\nredis> BZPOPMAX zset1 zset2 0\n1) \"zset1\"\n2) \"c\"\n3) \"2\"\n```\n\nRemove and return the member with the highest score from one or more sorted sets, or block until one is available\n\n### ZADD \n\n```\nZADD key [NX|XX] [GT|LT] [CH] [INCR] score member [score member ...]\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 1 \"uno\"\n(integer) 1\nredis> ZADD myzset 2 \"two\" 3 \"three\"\n(integer) 2\nredis> ZRANGE myzset 0 -1 WITHSCORES\n1) \"one\"\n2) \"1\"\n3) \"uno\"\n4) \"1\"\n5) \"two\"\n6) \"2\"\n7) \"three\"\n8) \"3\"\n```\n\nAdd one or more members to a sorted set, or update its score if it already exists\n\n### ZCARD\n\n```\nZCARD key\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 2 \"two\"\n(integer) 1\nredis> ZCARD myzset\n(integer) 2\n```\n\nGet the number of members in a sorted set\n\n### ZSCORE\n\n```\nZSCORE key member\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZSCORE myzset \"one\"\n\"1\"\n```\n\nGet the score associated with the given member in a sorted set\n\n### ZCOUNT\n\n```\nZCOUNT key min max\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 2 \"two\"\n(integer) 1\nredis> ZADD myzset 3 \"three\"\n(integer) 1\nredis> ZCOUNT myzset -inf +inf\n(integer) 3\nredis> ZCOUNT myzset (1 3\n(integer) 2\n```\n\nCount the members in a sorted set with scores within the given values\n\n### ZDIFF\n\n```\nZDIFF numkeys key [key ...] [WITHSCORES]\n```\n\n#### Example\n\n```shell script\nredis> ZADD zset1 1 \"one\"\n(integer) 1\nredis> ZADD zset1 2 \"two\"\n(integer) 1\nredis> ZADD zset1 3 \"three\"\n(integer) 1\nredis> ZADD zset2 1 \"one\"\n(integer) 1\nredis> ZADD zset2 2 \"two\"\n(integer) 1\nredis> ZDIFF 2 zset1 zset2\n1) \"three\"\nredis> ZDIFF 2 zset1 zset2 WITHSCORES\n1) \"three\"\n2) \"3\"\n```\n\nSubtract multiple sorted sets\n\n### ZDIFFSTORE\n\n```\nZDIFFSTORE destination numkeys key [key ...]\n```\n\n#### Example\n\n```shell script\nredis> ZADD zset1 1 \"one\"\n(integer) 1\nredis> ZADD zset1 2 \"two\"\n(integer) 1\nredis> ZADD zset1 3 \"three\"\n(integer) 1\nredis> ZADD zset2 1 \"one\"\n(integer) 1\nredis> ZADD zset2 2 \"two\"\n(integer) 1\nredis> ZDIFFSTORE out 2 zset1 zset2\n(integer) 1\nredis> ZRANGE out 0 -1 WITHSCORES\n1) \"three\"\n2) \"3\"\n```\n\nSubtract multiple sorted sets and store the resulting sorted set in a new key\n\n### ZINCRBY\n\n```\nZINCRBY key increment member\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 2 \"two\"\n(integer) 1\nredis> ZINCRBY myzset 2 \"one\"\n\"3\"\nredis> ZRANGE myzset 0 -1 WITHSCORES\n1) \"two\"\n2) \"2\"\n3) \"one\"\n4) \"3\"\n```\n\nIncrement the score of a member in a sorted set\n\n### ZINTER\n\n```\nZINTER numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX] [WITHSCORES]\n```\n\n#### Example\n\n```shell script\nredis> ZADD zset1 1 \"one\"\n(integer) 1\nredis> ZADD zset1 2 \"two\"\n(integer) 1\nredis> ZADD zset2 1 \"one\"\n(integer) 1\nredis> ZADD zset2 2 \"two\"\n(integer) 1\nredis> ZADD zset2 3 \"three\"\n(integer) 1\nredis> ZINTER 2 zset1 zset2\n1) \"one\"\n2) \"two\"\nredis> ZINTER 2 zset1 zset2 WITHSCORES\n1) \"one\"\n2) \"2\"\n3) \"two\"\n4) \"4\"\n```\n\nIntersect multiple sorted sets\n\n### ZINTERSTORE\n\n```\nZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]\n```\n\n#### Example\n\n```shell script\nredis> ZADD zset1 1 \"one\"\n(integer) 1\nredis> ZADD zset1 2 \"two\"\n(integer) 1\nredis> ZADD zset2 1 \"one\"\n(integer) 1\nredis> ZADD zset2 2 \"two\"\n(integer) 1\nredis> ZADD zset2 3 \"three\"\n(integer) 1\nredis> ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3\n(integer) 2\nredis> ZRANGE out 0 -1 WITHSCORES\n1) \"one\"\n2) \"5\"\n3) \"two\"\n4) \"10\"\n```\n\nIntersect multiple sorted sets and store the resulting sorted set in a new key\n\n### ZLEXCOUNT\n\n```\nZLEXCOUNT key min max\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 0 a 0 b 0 c 0 d 0 e\n(integer) 5\nredis> ZADD myzset 0 f 0 g\n(integer) 2\nredis> ZLEXCOUNT myzset - +\n(integer) 7\nredis> ZLEXCOUNT myzset [b [f\n(integer) 5\n```\n\nCount the number of members in a sorted set between a given lexicographical range\n\n### ZPOPMAX\n\n```\nZPOPMAX key [count]\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 2 \"two\"\n(integer) 1\nredis> ZADD myzset 3 \"three\"\n(integer) 1\nredis> ZPOPMAX myzset\n1) \"three\"\n2) \"3\"\n```\n\nRemove and return members with the highest scores in a sorted set\n\n### ZPOPMIN\n\n```\nZPOPMIN key [count]\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 2 \"two\"\n(integer) 1\nredis> ZADD myzset 3 \"three\"\n(integer) 1\nredis> ZPOPMIN myzset\n1) \"one\"\n2) \"1\"\n```\n\nRemove and return members with the lowest scores in a sorted set\n\n### ZRANGE\n\n```\nZRANGE key start stop [WITHSCORES]\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 2 \"two\"\n(integer) 1\nredis> ZADD myzset 3 \"three\"\n(integer) 1\nredis> ZRANGE myzset 0 -1\n1) \"one\"\n2) \"two\"\n3) \"three\"\nredis> ZRANGE myzset 2 3\n1) \"three\"\nredis> ZRANGE myzset -2 -1\n1) \"two\"\n2) \"three\"\n```\n\nReturn a range of members in a sorted set, by index\n\n### ZRANGEBYLEX\n\n```\nZRANGEBYLEX key min max [LIMIT offset count]\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g\n(integer) 7\nredis> ZRANGEBYLEX myzset - [c\n1) \"a\"\n2) \"b\"\n3) \"c\"\nredis> ZRANGEBYLEX myzset - (c\n1) \"a\"\n2) \"b\"\nredis> ZRANGEBYLEX myzset [aaa (g\n1) \"b\"\n2) \"c\"\n3) \"d\"\n4) \"e\"\n5) \"f\"\n```\n\nReturn a range of members in a sorted set, by lexicographical range\n\n### ZREVRANGEBYLEX\n\n```\nZREVRANGEBYLEX key max min [LIMIT offset count]\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g\n(integer) 7\nredis> ZREVRANGEBYLEX myzset [c -\n1) \"c\"\n2) \"b\"\n3) \"a\"\nredis> ZREVRANGEBYLEX myzset (c -\n1) \"b\"\n2) \"a\"\nredis> ZREVRANGEBYLEX myzset (g [aaa\n1) \"f\"\n2) \"e\"\n3) \"d\"\n4) \"c\"\n5) \"b\"\n```\n\nReturn a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings.\n\n### ZRANGEBYSCORE\n\n```\nZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 2 \"two\"\n(integer) 1\nredis> ZADD myzset 3 \"three\"\n(integer) 1\nredis> ZRANGEBYSCORE myzset -inf +inf\n1) \"one\"\n2) \"two\"\n3) \"three\"\nredis> ZRANGEBYSCORE myzset 1 2\n1) \"one\"\n2) \"two\"\nredis> ZRANGEBYSCORE myzset (1 2\n1) \"two\"\nredis> ZRANGEBYSCORE myzset (1 (2\n(empty list or set)\n```\n\nReturn a range of members in a sorted set, by score\n\n### ZRANK\n\n```\nZRANK key member\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 2 \"two\"\n(integer) 1\nredis> ZADD myzset 3 \"three\"\n(integer) 1\nredis> ZRANK myzset \"three\"\n(integer) 2\nredis> ZRANK myzset \"four\"\n(nil)\n```\n\nDetermine the index of a member in a sorted set\n\n### ZREM\n\n```\nZREM key member [member ...]\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 2 \"two\"\n(integer) 1\nredis> ZADD myzset 3 \"three\"\n(integer) 1\nredis> ZREM myzset \"two\"\n(integer) 1\nredis> ZRANGE myzset 0 -1 WITHSCORES\n1) \"one\"\n2) \"1\"\n3) \"three\"\n4) \"3\"\n```\n\nRemove one or more members from a sorted set\n\n### ZREMRANGEBYLEX\n\n```\nZREMRANGEBYLEX key min max\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 0 aaaa 0 b 0 c 0 d 0 e\n(integer) 5\nredis> ZADD myzset 0 foo 0 zap 0 zip 0 ALPHA 0 alpha\n(integer) 5\nredis> ZRANGE myzset 0 -1\n1) \"ALPHA\"\n 2) \"aaaa\"\n 3) \"alpha\"\n 4) \"b\"\n 5) \"c\"\n 6) \"d\"\n 7) \"e\"\n 8) \"foo\"\n 9) \"zap\"\n10) \"zip\"\nredis> ZREMRANGEBYLEX myzset [alpha [omega\n(integer) 6\nredis> ZRANGE myzset 0 -1\n1) \"ALPHA\"\n2) \"aaaa\"\n3) \"zap\"\n4) \"zip\"\n```\n\nRemove all members in a sorted set between the given lexicographical range\n\n### ZREMRANGEBYRANK\n\n```\nZREMRANGEBYRANK key start stop\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 2 \"two\"\n(integer) 1\nredis> ZADD myzset 3 \"three\"\n(integer) 1\nredis> ZREMRANGEBYRANK myzset 0 1\n(integer) 2\nredis> ZRANGE myzset 0 -1 WITHSCORES\n1) \"three\"\n2) \"3\"\n```\n\nRemove all members in a sorted set within the given indexes\n\n### ZREMRANGEBYSCORE\n\n```\nZREMRANGEBYSCORE key min max\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 2 \"two\"\n(integer) 1\nredis> ZADD myzset 3 \"three\"\n(integer) 1\nredis> ZREMRANGEBYSCORE myzset -inf (2\n(integer) 1\nredis> ZRANGE myzset 0 -1 WITHSCORES\n1) \"two\"\n2) \"2\"\n3) \"three\"\n4) \"3\"\n```\n\nRemove all members in a sorted set within the given scores\n\n### ZREVRANGE\n\n```\nZREVRANGE key start stop [WITHSCORES]\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 2 \"two\"\n(integer) 1\nredis> ZADD myzset 3 \"three\"\n(integer) 1\nredis> ZREVRANGE myzset 0 -1\n1) \"three\"\n2) \"two\"\n3) \"one\"\nredis> ZREVRANGE myzset 2 3\n1) \"one\"\nredis> ZREVRANGE myzset -2 -1\n1) \"two\"\n2) \"one\"\n```\n\nReturn a range of members in a sorted set, by index, with scores ordered from high to low\n\n### ZREVRANGEBYSCORE\n\n```\nZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 2 \"two\"\n(integer) 1\nredis> ZADD myzset 3 \"three\"\n(integer) 1\nredis> ZREVRANGEBYSCORE myzset +inf -inf\n1) \"three\"\n2) \"two\"\n3) \"one\"\nredis> ZREVRANGEBYSCORE myzset 2 1\n1) \"two\"\n2) \"one\"\nredis> ZREVRANGEBYSCORE myzset 2 (1\n1) \"two\"\nredis> ZREVRANGEBYSCORE myzset (2 (1\n(empty list or set)\n```\n\nReturn a range of members in a sorted set, by score, with scores ordered from high to low\n\n### ZREVRANK\n\n```\nZREVRANK key member\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 2 \"two\"\n(integer) 1\nredis> ZADD myzset 3 \"three\"\n(integer) 1\nredis> ZREVRANK myzset \"one\"\n(integer) 2\nredis> ZREVRANK myzset \"four\"\n(nil)\n```\n\nDetermine the index of a member in a sorted set, with scores ordered from high to low\n\n### ZUNION\n\n```\nZUNION numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX] [WITHSCORES]\n```\n\n#### Example\n\n```shell script\nredis> ZADD zset1 1 \"one\"\n(integer) 1\nredis> ZADD zset1 2 \"two\"\n(integer) 1\nredis> ZADD zset2 1 \"one\"\n(integer) 1\nredis> ZADD zset2 2 \"two\"\n(integer) 1\nredis> ZADD zset2 3 \"three\"\n(integer) 1\nredis> ZUNION 2 zset1 zset2\n1) \"one\"\n2) \"three\"\n3) \"two\"\nredis> ZUNION 2 zset1 zset2 WITHSCORES\n1) \"one\"\n2) \"2\"\n3) \"three\"\n4) \"3\"\n5) \"two\"\n6) \"4\"\n```\n\nAdd multiple sorted sets\n\n### ZMSCORE\n\n```\nZMSCORE key member [member ...]\n```\n\n#### Example\n\n```shell script\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 2 \"two\"\n(integer) 1\nredis> ZMSCORE myzset \"one\" \"two\" \"nofield\"\n1) \"1\"\n2) \"2\"\n3) (nil)\n```\n\nGet the score associated with the given members in a sorted set\n\n### ZUNIONSTORE\n\n```\nZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]\n```\n\n#### Example\n\n```shell script\nredis> ZADD zset1 1 \"one\"\n(integer) 1\nredis> ZADD zset1 2 \"two\"\n(integer) 1\nredis> ZADD zset2 1 \"one\"\n(integer) 1\nredis> ZADD zset2 2 \"two\"\n(integer) 1\nredis> ZADD zset2 3 \"three\"\n(integer) 1\nredis> ZUNIONSTORE out 2 zset1 zset2 WEIGHTS 2 3\n(integer) 3\nredis> ZRANGE out 0 -1 WITHSCORES\n1) \"one\"\n2) \"5\"\n3) \"three\"\n4) \"9\"\n5) \"two\"\n6) \"10\"\n```\n\nAdd multiple sorted sets and store the resulting sorted set in a new key\n"
            },
            {
                "title": "Redis Geo command",
                "content": "\n### GEOADD\n\n```\nGEOADD key longitude latitude member [longitude latitude member ...]\n```\n\n#### Example\n\n```shell script\nredis> GEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\n(integer) 2\nredis> GEODIST Sicily Palermo Catania\n\"166274.1516\"\nredis> GEORADIUS Sicily 15 37 100 km\n1) \"Catania\"\nredis> GEORADIUS Sicily 15 37 200 km\n1) \"Palermo\"\n2) \"Catania\"\n```\n\nAdd one or more geospatial items in the geospatial index represented using a sorted set\n\n### GEOHASH\n\n```\nGEOHASH key member [member ...]\n```\n\n#### Example\n\n```shell script\nredis> GEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\n(integer) 2\nredis> GEOHASH Sicily Palermo Catania\n1) \"sqc8b49rny0\"\n2) \"sqdtr74hyu0\"\n```\n\nReturns members of a geospatial index as standard geohash strings\n\n### GEOPOS\n\n```\nGEOPOS key member [member ...]\n```\n\n#### Example\n\n```shell script\nredis> GEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\n(integer) 2\nredis> GEOPOS Sicily Palermo Catania NonExisting\n1) 1) \"13.36138933897018433\"\n   2) \"38.11555639549629859\"\n2) 1) \"15.08726745843887329\"\n   2) \"37.50266842333162032\"\n3) (nil)\n```\n\nReturns longitude and latitude of members of a geospatial index\n\n### GEODIST\n\n```\nGEODIST key member1 member2 [m|km|ft|mi]\n```\n\n#### Example\n\n```shell script\nredis> GEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\n(integer) 2\nredis> GEODIST Sicily Palermo Catania\n\"166274.1516\"\nredis> GEODIST Sicily Palermo Catania km\n\"166.2742\"\nredis> GEODIST Sicily Palermo Catania mi\n\"103.3182\"\nredis> GEODIST Sicily Foo Bar\n(nil)\n```\n\nReturns the distance between two members of a geospatial index\n\n### GEORADIUS\n\n```\nGEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]\n```\n\n#### Example\n\n```shell script\nredis> GEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\n(integer) 2\nredis> GEORADIUS Sicily 15 37 200 km WITHDIST\n1) 1) \"Palermo\"\n   2) \"190.4424\"\n2) 1) \"Catania\"\n   2) \"56.4413\"\nredis> GEORADIUS Sicily 15 37 200 km WITHCOORD\n1) 1) \"Palermo\"\n   2) 1) \"13.36138933897018433\"\n      2) \"38.11555639549629859\"\n2) 1) \"Catania\"\n   2) 1) \"15.08726745843887329\"\n      2) \"37.50266842333162032\"\nredis> GEORADIUS Sicily 15 37 200 km WITHDIST WITHCOORD\n1) 1) \"Palermo\"\n   2) \"190.4424\"\n   3) 1) \"13.36138933897018433\"\n      2) \"38.11555639549629859\"\n2) 1) \"Catania\"\n   2) \"56.4413\"\n   3) 1) \"15.08726745843887329\"\n      2) \"37.50266842333162032\"\n```\n\nQuery a sorted set representing a geospatial index to fetch members matching a given maximum distance from a point\n\n### GEORADIUSBYMEMBER\n\n```\nGEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]\n```\n\n#### Example\n\n```shell script\nredis> GEOADD Sicily 13.583333 37.316667 \"Agrigento\"\n(integer) 1\nredis> GEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\n(integer) 2\nredis> GEORADIUSBYMEMBER Sicily Agrigento 100 km\n1) \"Agrigento\"\n2) \"Palermo\"\n```\n\nQuery a sorted set representing a geospatial index to fetch members matching a given maximum distance from a member\n\n### GEOSEARCH\n\n```\nGEOSEARCH key [FROMMEMBER member] [FROMLONLAT longitude latitude] [BYRADIUS radius m|km|ft|mi] [BYBOX width height m|km|ft|mi] [ASC|DESC] [COUNT count] [WITHCOORD] [WITHDIST] [WITHHASH]\n```\n\n#### Example\n\n```shell script\nredis> GEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\n(integer) 2\nredis> GEOADD Sicily 12.758489 38.788135 \"edge1\"   17.241510 38.788135 \"edge2\"\n(integer) 2\nredis> GEOSEARCH Sicily FROMLONLAT 15 37 BYRADIUS 200 km ASC\n1) \"Catania\"\n2) \"Palermo\"\nredis> GEOSEARCH Sicily FROMLONLAT 15 37 BYBOX 400 400 km ASC\n1) \"Catania\"\n2) \"Palermo\"\n3) \"edge2\"\n4) \"edge1\"\n```\n\nQuery a sorted set representing a geospatial index to fetch members inside an area of a box or a circle.\n\n### Misc\n\n| -                                                           | -                                                                                                                                             |\n| ----------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| [GEOSEARCHSTORE ](https://redis.io/commands/geosearchstore) | Query a sorted set representing a geospatial index to fetch members inside an area of a box or a circle, and store the result in another key. |\n"
            },
            {
                "title": "Redis Hyperloglog command",
                "content": "\n### PFADD\n\n```\nPFADD key element [element ...]\n```\n\n#### Example\n\n```shell script\nredis> PFADD hll a b c d e f g\n(integer) 1\nredis> PFCOUNT hll\n(integer) 7\n```\n\nAdds the specified elements to the specified HyperLogLog.\n\n### PFCOUNT\n\n```\nPFCOUNT key [key ...]\n```\n\n#### Example\n\n```shell script\nredis> PFADD hll foo bar zap\n(integer) 1\nredis> PFADD hll zap zap zap\n(integer) 0\nredis> PFADD hll foo bar\n(integer) 0\nredis> PFCOUNT hll\n(integer) 3\nredis> PFADD some-other-hll 1 2 3\n(integer) 1\nredis> PFCOUNT hll some-other-hll\n(integer) 6\n```\n\nReturn the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).\n\n### PFMERGE\n\n```\nPFMERGE destkey sourcekey [sourcekey ...]\n```\n\n#### Example\n\n```shell script\nredis> PFADD hll1 foo bar zap a\n(integer) 1\nredis> PFADD hll2 a b c foo\n(integer) 1\nredis> PFMERGE hll3 hll1 hll2\n\"OK\"\nredis> PFCOUNT hll3\n(integer) 6\n```\n\nMerge N different HyperLogLogs into a single one.\n"
            },
            {
                "title": "Redis Server command",
                "content": "\n### COMMAND\n\n```\nCOMMAND\n```\n\n#### Example\n\n```shell script\nredis> COMMAND\n1) 1) \"georadius_ro\"\n     2) (integer) -6\n     3) 1) \"readonly\"\n        2) \"movablekeys\"\n     4) (integer) 1\n     5) (integer) 1\n     6) (integer) 1\n     7) 1) \"@read\"\n        2) \"@geo\"\n        3) \"@slow\"\n  2) 1) \"zpopmin\"\n     2) (integer) -2\n     3) 1) \"write\"\n        2) \"fast\"\n  ........\n```\n\nGet array of Redis command details\n\n### Misc \n\n| -                                                                    | -                                                                                                                                |\n| -------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------- |\n| [ACL LOAD](https://redis.io/commands/acl-load)                       | Reload the ACLs from the configured ACL file                                                                                     |\n| [ACL SAVE](https://redis.io/commands/acl-save)                       | Save the current ACL rules in the configured ACL file                                                                            |\n| [ACL LIST](https://redis.io/commands/acl-list)                       | List the current ACL rules in ACL config file format                                                                             |\n| [ACL USERS](https://redis.io/commands/acl-users)                     | List the username of all the configured ACL rules                                                                                |\n| [ACL GETUSER ](https://redis.io/commands/acl-getuser)                | Get the rules for a specific ACL user                                                                                            |\n| [ACL SETUSER ](https://redis.io/commands/acl-setuser)                | Modify or create the rules for a specific ACL user                                                                               |\n| [ACL DELUSER ](https://redis.io/commands/acl-deluser)                | Remove the specified ACL users and the associated rules                                                                          |\n| [ACL CAT ](https://redis.io/commands/acl-cat)                        | List the ACL categories or the commands inside a category                                                                        |\n| [ACL GENPASS ](https://redis.io/commands/acl-genpass)                | Generate a pseudorandom secure password to use for ACL users                                                                     |\n| [ACL WHOAMI](https://redis.io/commands/acl-whoami)                   | Return the name of the user associated to the current connection                                                                 |\n| [ACL LOG ](https://redis.io/commands/acl-log)                        | List latest events denied because of ACLs in place                                                                               |\n| [ACL HELP](https://redis.io/commands/acl-help)                       | Show helpful text about the different subcommands                                                                                |\n| [BGREWRITEAOF](https://redis.io/commands/bgrewriteaof)               | Asynchronously rewrite the append-only file                                                                                      |\n| [BGSAVE ](https://redis.io/commands/bgsave)                          | Asynchronously save the dataset to disk                                                                                          |\n| [CONFIG GET ](https://redis.io/commands/config-get)                  | Get the value of a configuration parameter                                                                                       |\n| [CONFIG REWRITE](https://redis.io/commands/config-rewrite)           | Rewrite the configuration file with the in memory configuration                                                                  |\n| [CONFIG SET ](https://redis.io/commands/config-set)                  | Set a configuration parameter to the given value                                                                                 |\n| [CONFIG RESETSTAT](https://redis.io/commands/config-resetstat)       | Reset the stats returned by INFO                                                                                                 |\n| [DBSIZE](https://redis.io/commands/dbsize)                           | Return the number of keys in the selected database                                                                               |\n| [DEBUG OBJECT ](https://redis.io/commands/debug-object)              | Get debugging information about a key                                                                                            |\n| [DEBUG SEGFAULT](https://redis.io/commands/debug-segfault)           | Make the server crash                                                                                                            |\n| [FLUSHALL ](https://redis.io/commands/flushall)                      | Remove all keys from all databases                                                                                               |\n| [FLUSHDB ](https://redis.io/commands/flushdb)                        | Remove all keys from the current database                                                                                        |\n| [LOLWUT ](https://redis.io/commands/lolwut)                          | Display some computer art and the Redis version                                                                                  |\n| [LASTSAVE](https://redis.io/commands/lastsave)                       | Get the UNIX time stamp of the last successful save to disk                                                                      |\n| [MEMORY DOCTOR](https://redis.io/commands/memory-doctor)             | Outputs memory problems report                                                                                                   |\n| [MEMORY HELP](https://redis.io/commands/memory-help)                 | Show helpful text about the different subcommands                                                                                |\n| [MEMORY MALLOC-STATS](https://redis.io/commands/memory-malloc-stats) | Show allocator internal stats                                                                                                    |\n| [MEMORY PURGE](https://redis.io/commands/memory-purge)               | Ask the allocator to release memory                                                                                              |\n| [MEMORY STATS](https://redis.io/commands/memory-stats)               | Show memory usage details                                                                                                        |\n| [MEMORY USAGE ](https://redis.io/commands/memory-usage)              | Estimate the memory usage of a key                                                                                               |\n| [MODULE LIST](https://redis.io/commands/module-list)                 | List all modules loaded by the server                                                                                            |\n| [MODULE LOAD ](https://redis.io/commands/module-load)                | Load a module                                                                                                                    |\n| [MODULE UNLOAD ](https://redis.io/commands/module-unload)            | Unload a module                                                                                                                  |\n| [MONITOR](https://redis.io/commands/monitor)                         | Listen for all requests received by the server in real time                                                                      |\n| [SAVE](https://redis.io/commands/save)                               | Synchronously save the dataset to disk                                                                                           |\n| [SHUTDOWN ](https://redis.io/commands/shutdown)                      | Synchronously save the dataset to disk and then shut down the server                                                             |\n| [SLAVEOF ](https://redis.io/commands/slaveof)                        | Make the server a replica of another instance, or promote it as master. Deprecated starting with Redis 5. Use REPLICAOF instead. |\n| [REPLICAOF ](https://redis.io/commands/replicaof)                    | Make the server a replica of another instance, or promote it as master.                                                          |\n| [SLOWLOG ](https://redis.io/commands/slowlog)                        | Manages the Redis slow queries log                                                                                               |\n| [SWAPDB ](https://redis.io/commands/swapdb)                          | Swaps two Redis databases                                                                                                        |\n| [SYNC](https://redis.io/commands/sync)                               | Internal command used for replication                                                                                            |\n| [PSYNC ](https://redis.io/commands/psync)                            | Internal command used for replication                                                                                            |\n| [LATENCY DOCTOR](https://redis.io/commands/latency-doctor)           | Return a human readable latency analysis report.                                                                                 |\n| [LATENCY GRAPH ](https://redis.io/commands/latency-graph)            | Return a latency graph for the event.                                                                                            |\n| [LATENCY HISTORY ](https://redis.io/commands/latency-history)        | Return timestamp-latency samples for the event.                                                                                  |\n| [LATENCY LATEST](https://redis.io/commands/latency-latest)           | Return the latest latency samples for all events.                                                                                |\n| [LATENCY RESET ](https://redis.io/commands/latency-reset)            | Reset latency data for one or more events.                                                                                       |\n| [LATENCY HELP](https://redis.io/commands/latency-help)               | Show helpful text about the different subcommands.                                                                               |\n\n### COMMAND COUNT\n\n```\nCOMMAND COUNT\n```\n\n#### Example\n\n```shell script\nredis> COMMAND COUNT\n(integer) 217\n```\n\nGet total number of Redis commands\n\n### COMMAND GETKEYS\n\n```\nCOMMAND GETKEYS\n```\n\n#### Example\n\n```shell script\nredis> COMMAND GETKEYS MSET a b c d e f\n1) \"a\"\n2) \"c\"\n3) \"e\"\nredis> COMMAND GETKEYS EVAL \"not consulted\" 3 key1 key2 key3 arg1 arg2 arg3 argN\n1) \"key1\"\n2) \"key2\"\n3) \"key3\"\nredis> COMMAND GETKEYS SORT mylist ALPHA STORE outlist\n1) \"mylist\"\n2) \"outlist\"\n```\n\nExtract keys given a full Redis command\n\n### COMMAND INFO\n\n```\nCOMMAND INFO command-name [command-name ...]\n```\n\n#### Example\n\n```shell script\nredis> COMMAND INFO get set eval\n1) 1) \"get\"\n   2) (integer) 2\n   3) 1) \"readonly\"\n      2) \"fast\"\n   4) (integer) 1\n   5) (integer) 1\n   6) (integer) 1\n   7) 1) \"@read\"\n      2) \"@string\"\n      3) \"@fast\"\n2) 1) \"set\"\n   2) (integer) -3\n   3) 1) \"write\"\n      2) \"denyoom\"\n   4) (integer) 1\n   5) (integer) 1\n   6) (integer) 1\n   7) 1) \"@write\"\n      2) \"@string\"\n      3) \"@slow\"\n3) 1) \"eval\"\n   2) (integer) -3\n   3) 1) \"noscript\"\n      2) \"movablekeys\"\n   4) (integer) 0\n   5) (integer) 0\n   6) (integer) 0\n   7) 1) \"@slow\"\n      2) \"@scripting\"\n```\n\nGet array of specific Redis command details\n\n### INFO\n\n```\nINFO [section]\n```\n\n#### Example\n\n```shell script\nredis> INFO\n# Server\nredis_version:6.1.240\nredis_git_sha1:00000000\nredis_git_dirty:0\nredis_build_id:a26db646ea64a07c\nredis_mode:standalone\nos:Linux 5.4.0-1017-aws x86_64\n......\n```\n\nGet information and statistics about the server\n\n### ROLE\n\n```\nROLE\n```\n\n#### Example\n\n```shell script\nredis> ROLE\n1) \"master\"\n2) (integer) 0\n3) (empty list or set)\n```\n\nReturn the role of the instance in the context of replication\n\n### TIME\n\n```\nTIME\n```\n\n#### Example\n\n```shell script\nredis> TIME\n1) \"1609040690\"\n2) \"558952\"\nredis> TIME\n1) \"1609040690\"\n2) \"559206\"\n```\n\nReturn the current server time\n"
            },
            {
                "title": "Redis Generic command",
                "content": "\n### Misc\n\n| -                                             | -                                                                                                            |\n| --------------------------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| [COPY ](https://redis.io/commands/copy)       | Copy a key                                                                                                   |\n| [MIGRATE ](https://redis.io/commands/migrate) | Atomically transfer a key from a Redis instance to another one.                                              |\n| [MOVE ](https://redis.io/commands/move)       | Move a key to another database                                                                               |\n| [OBJECT ](https://redis.io/commands/object)   | Inspect the internals of Redis objects                                                                       |\n| [RESTORE ](https://redis.io/commands/restore) | Create a key using the provided serialized value, previously obtained using DUMP.                            |\n| [SORT ](https://redis.io/commands/sort)       | Sort the elements in a list, set or sorted set                                                               |\n| [WAIT ](https://redis.io/commands/wait)       | Wait for the synchronous replication of all the write commands sent in the context of the current connection |\n| [SCAN ](https://redis.io/commands/scan)       | Incrementally iterate the keys space                                                                         |\n\n### DEL\n\n```\nDEL key [key ...]\n```\n\n#### Example\n\n```shell script\nredis> SET key1 \"Hello\"\n\"OK\"\nredis> SET key2 \"World\"\n\"OK\"\nredis> DEL key1 key2 key3\n(integer) 2\n```\n\nDelete a key\n\n### DUMP\n\n```\nDUMP key\n```\n\n#### Example\n\n```shell script\nredis> SET mykey 10\n\"OK\"\nredis> DUMP mykey\n\"\\u0000\\xC0\\n\\t\\u0000\\xBEm\\u0006\\x89Z(\\u0000\\n\"\n```\n\nReturn a serialized version of the value stored at the specified key.\n\n### EXISTS\n\n```\nEXISTS key [key ...]\n```\n\n#### Example\n\n```shell script\nredis> SET key1 \"Hello\"\n\"OK\"\nredis> EXISTS key1\n(integer) 1\nredis> EXISTS nosuchkey\n(integer) 0\nredis> SET key2 \"World\"\n\"OK\"\nredis> EXISTS key1 key2 nosuchkey\n(integer) 2\n```\n\nDetermine if a key exists\n\n### EXPIRE\n\n```\nEXPIRE key seconds\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"Hello\"\n\"OK\"\nredis> EXPIRE mykey 10\n(integer) 1\nredis> TTL mykey\n(integer) 10\nredis> SET mykey \"Hello World\"\n\"OK\"\nredis> TTL mykey\n(integer) -1\n```\n\nSet a key's time to live in seconds\n\n### EXPIREAT\n\n```\nEXPIREAT key timestamp\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"Hello\"\n\"OK\"\nredis> EXISTS mykey\n(integer) 1\nredis> EXPIREAT mykey 1293840000\n(integer) 1\nredis> EXISTS mykey\n(integer) 0\n```\n\nSet the expiration for a key as a UNIX timestamp\n\n### KEYS\n\n```\nKEYS pattern\n```\n\n#### Example\n\n```shell script\nredis> MSET firstname Jack lastname Stuntman age 35\n\"OK\"\nredis> KEYS *name*\n1) \"firstname\"\n2) \"lastname\"\nredis> KEYS a??\n1) \"age\"\nredis> KEYS *\n1) \"firstname\"\n2) \"age\"\n3) \"lastname\"\n```\n\nFind all keys matching the given pattern\n\n### PERSIST\n\n```\nPERSIST key\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"Hello\"\n\"OK\"\nredis> EXPIRE mykey 10\n(integer) 1\nredis> TTL mykey\n(integer) 10\nredis> PERSIST mykey\n(integer) 1\nredis> TTL mykey\n(integer) -1\n```\n\nRemove the expiration from a key\n\n### PEXPIRE\n\n```\nPEXPIRE key milliseconds\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"Hello\"\n\"OK\"\nredis> PEXPIRE mykey 1500\n(integer) 1\nredis> TTL mykey\n(integer) 1\nredis> PTTL mykey\n(integer) 1499\n```\n\nSet a key's time to live in milliseconds\n\n### PEXPIREAT\n\n```\nPEXPIREAT key milliseconds-timestamp\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"Hello\"\n\"OK\"\nredis> PEXPIREAT mykey 1555555555005\n(integer) 1\nredis> TTL mykey\n(integer) -2\nredis> PTTL mykey\n(integer) -2\n```\n\nSet the expiration for a key as a UNIX timestamp specified in milliseconds\n\n### PTTL\n\n```\nPTTL key\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"Hello\"\n\"OK\"\nredis> EXPIRE mykey 1\n(integer) 1\nredis> PTTL mykey\n(integer) 1000\n```\n\nGet the time to live for a key in milliseconds\n\n### RENAME\n\n```\nRENAME key newkey\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"Hello\"\n\"OK\"\nredis> RENAME mykey myotherkey\n\"OK\"\nredis> GET myotherkey\n\"Hello\"\n```\n\nRename a key\n\n### RENAMENX\n\n```\nRENAMENX key newkey\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"Hello\"\n\"OK\"\nredis> SET myotherkey \"World\"\n\"OK\"\nredis> RENAMENX mykey myotherkey\n(integer) 0\nredis> GET myotherkey\n\"World\"\n```\n\nRename a key, only if the new key does not exist\n\n### TOUCH\n\n```\nTOUCH key [key ...]\n```\n\n#### Example\n\n```shell script\nredis> SET key1 \"Hello\"\n\"OK\"\nredis> SET key2 \"World\"\n\"OK\"\nredis> TOUCH key1 key2\n(integer) 2\n```\n\nAlters the last access time of a key(s). Returns the number of existing keys specified.\n\n### TTL\n\n```\nTTL key\n```\n\n#### Example\n\n```shell script\nredis> SET mykey \"Hello\"\n\"OK\"\nredis> EXPIRE mykey 10\n(integer) 1\nredis> TTL mykey\n(integer) 10\n```\n\nGet the time to live for a key\n\n### TYPE\n\n```\nTYPE key\n```\n\n#### Example\n\n```shell script\nredis> SET key1 \"value\"\n\"OK\"\nredis> LPUSH key2 \"value\"\n(integer) 1\nredis> SADD key3 \"value\"\n(integer) 1\nredis> TYPE key1\n\"string\"\nredis> TYPE key2\n\"list\"\nredis> TYPE key3\n\"set\"\n```\n\nDetermine the type stored at key\n\n### UNLINK\n\n```\nUNLINK key [key ...]\n```\n\n#### Example\n\n```shell script\nredis> SET key1 \"Hello\"\n\"OK\"\nredis> SET key2 \"World\"\n\"OK\"\nredis> UNLINK key1 key2 key3\n(integer) 2\n```\n\nDelete a key asynchronously in another thread. Otherwise it is just as DEL, but non blocking.\n"
            },
            {
                "title": "Redis Connection command",
                "content": "\n### Misc\n\n| -                                                             | -                                                                          |\n| ------------------------------------------------------------- | -------------------------------------------------------------------------- |\n| [AUTH ](https://redis.io/commands/auth)                       | Authenticate to the server                                                 |\n| [CLIENT CACHING ](https://redis.io/commands/client-caching)   | Instruct the server about tracking or not keys in the next request         |\n| [CLIENT KILL ](https://redis.io/commands/client-kill)         | Kill the connection of a client                                            |\n| [CLIENT LIST ](https://redis.io/commands/client-list)         | Get the list of client connections                                         |\n| [CLIENT GETNAME](https://redis.io/commands/client-getname)    | Get the current connection name                                            |\n| [CLIENT GETREDIR](https://redis.io/commands/client-getredir)  | Get tracking notifications redirection client ID if any                    |\n| [CLIENT PAUSE ](https://redis.io/commands/client-pause)       | Stop processing commands from clients for some time                        |\n| [CLIENT REPLY ](https://redis.io/commands/client-reply)       | Instruct the server whether to reply to commands                           |\n| [CLIENT SETNAME ](https://redis.io/commands/client-setname)   | Set the current connection name                                            |\n| [CLIENT TRACKING ](https://redis.io/commands/client-tracking) | Enable or disable server assisted client side caching support              |\n| [CLIENT UNBLOCK ](https://redis.io/commands/client-unblock)   | Unblock a client blocked in a blocking command from a different connection |\n| [HELLO ](https://redis.io/commands/hello)                     | switch Redis protocol                                                      |\n| [QUIT](https://redis.io/commands/quit)                        | Close the connection                                                       |\n| [RESET](https://redis.io/commands/reset)                      | Reset the connection                                                       |\n| [SELECT ](https://redis.io/commands/select)                   | Change the selected database for the current connection                    |\n\n### CLIENT ID\n\n```\nCLIENT ID\n```\n\n#### Example\n\n```shell script\nredis> CLIENT ID\nERR Unknown or disabled command 'CLIENT'\n```\n\nReturns the client ID for the current connection\n\n### CLIENT INFO\n\n```\nCLIENT INFO\n```\n\n#### Example\n\n```shell script\nredis> CLIENT INFO\n\"id=55542 addr=127.0.0.1:58710 laddr=127.0.0.1:6379 fd=8 name= age=114920 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=26 qbuf-free=40928 argv-mem=10 obl=0 oll=0 omem=0 tot-mem=61466 events=r cmd=client user=default redir=-1\\n\"\n```\n\nReturns information about the current client connection.\n\n### ECHO\n\n```\nECHO message\n```\n\n#### Example\n\n```shell script\nredis> ECHO \"Hello World!\"\n\"Hello World!\"\n```\n\nEcho the given string\n\n### PING\n\n```\nPING [message]\n```\n\n#### Example\n\n```shell script\nredis> PING\n\"PONG\"\nredis> PING \"hello world\"\n\"hello world\"\n```\n\nPing the server\n"
            },
            {
                "title": "Redis Stream command",
                "content": "\n### Misc\n\n| -                                                   | -                                                                                                                                                                                  |\n| --------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [XINFO ](https://redis.io/commands/xinfo)           | Get information on streams and consumer groups                                                                                                                                     |\n| [XDEL ](https://redis.io/commands/xdel)             | Removes the specified entries from the stream. Returns the number of items actually deleted, that may be different from the number of IDs passed in case certain IDs do not exist. |\n| [XREAD ](https://redis.io/commands/xread)           | Return never seen elements in multiple streams, with IDs greater than the ones reported by the caller for each stream. Can block.                                                  |\n| [XGROUP ](https://redis.io/commands/xgroup)         | Create, destroy, and manage consumer groups.                                                                                                                                       |\n| [XREADGROUP ](https://redis.io/commands/xreadgroup) | Return new entries from a stream using a consumer group, or access the history of the pending entries for a given consumer. Can block.                                             |\n| [XCLAIM ](https://redis.io/commands/xclaim)         | Changes (or acquires) ownership of a message in a consumer group, as if the message was delivered to the specified consumer.                                                       |\n| [XPENDING ](https://redis.io/commands/xpending)     | Return information and entries from a stream consumer group pending entries list, that are messages fetched but never acknowledged.                                                |\n\n### XADD\n\n```\nXADD key [MAXLEN [=|~] length] [NOMKSTREAM] *|ID field value [field value ...]\n```\n\n#### Example\n\n```shell script\nredis> XADD mystream * name Sara surname OConnor\n\"1609040574632-0\"\nredis> XADD mystream * field1 value1 field2 value2 field3 value3\n\"1609040574632-1\"\nredis> XLEN mystream\n(integer) 2\nredis> XRANGE mystream - +\n1) 1) \"1609040574632-0\"\n   2) 1) \"name\"\n      2) \"Sara\"\n      3) \"surname\"\n      4) \"OConnor\"\n2) 1) \"1609040574632-1\"\n   2) 1) \"field1\"\n      2) \"value1\"\n      3) \"field2\"\n      4) \"value2\"\n      5) \"field3\"\n      6) \"value3\"\n```\n\nAppends a new entry to a stream\n\n### XTRIM\n\n```\nXTRIM key MAXLEN [=|~] length\n```\n\n#### Example\n\n```shell script\nredis> XADD mystream * field1 A field2 B field3 C field4 D\n\"1609040575750-0\"\nredis> XTRIM mystream MAXLEN 2\n(integer) 0\nredis> XRANGE mystream - +\n1) 1) \"1609040575750-0\"\n   2) 1) \"field1\"\n      2) \"A\"\n      3) \"field2\"\n      4) \"B\"\n      5) \"field3\"\n      6) \"C\"\n      7) \"field4\"\n      8) \"D\"\n```\n\nTrims the stream to (approximately if '~' is passed) a certain size\n\n### XRANGE\n\n```\nXRANGE key start end [COUNT count]\n```\n\n#### Example\n\n```shell script\nredis> XADD writers * name Virginia surname Woolf\n\"1609040578002-0\"\nredis> XADD writers * name Jane surname Austen\n\"1609040578002-1\"\nredis> XADD writers * name Toni surname Morrison\n\"1609040578003-0\"\nredis> XADD writers * name Agatha surname Christie\n\"1609040578003-1\"\nredis> XADD writers * name Ngozi surname Adichie\n\"1609040578003-2\"\nredis> XLEN writers\n(integer) 5\nredis> XRANGE writers - + COUNT 2\n1) 1) \"1609040578002-0\"\n   2) 1) \"name\"\n      2) \"Virginia\"\n      3) \"surname\"\n      4) \"Woolf\"\n2) 1) \"1609040578002-1\"\n   2) 1) \"name\"\n      2) \"Jane\"\n      3) \"surname\"\n      4) \"Austen\"\n```\n\nReturn a range of elements in a stream, with IDs matching the specified IDs interval\n\n### XREVRANGE\n\n```\nXREVRANGE key end start [COUNT count]\n```\n\n#### Example\n\n```shell script\nredis> XADD writers * name Virginia surname Woolf\n\"1609040579130-0\"\nredis> XADD writers * name Jane surname Austen\n\"1609040579130-1\"\nredis> XADD writers * name Toni surname Morrison\n\"1609040579130-2\"\nredis> XADD writers * name Agatha surname Christie\n\"1609040579131-0\"\nredis> XADD writers * name Ngozi surname Adichie\n\"1609040579131-1\"\nredis> XLEN writers\n(integer) 5\nredis> XREVRANGE writers + - COUNT 1\n1) 1) \"1609040579131-1\"\n   2) 1) \"name\"\n      2) \"Ngozi\"\n      3) \"surname\"\n      4) \"Adichie\"\n```\n\nReturn a range of elements in a stream, with IDs matching the specified IDs interval, in reverse order (from greater to\nsmaller IDs) compared to XRANGE\n\n### XLEN\n\n```\nXLEN key\n```\n\n#### Example\n\n```shell script\nredis> XADD mystream * item 1\n\"1609040580250-0\"\nredis> XADD mystream * item 2\n\"1609040580250-1\"\nredis> XADD mystream * item 3\n\"1609040580251-0\"\nredis> XLEN mystream\n(integer) 3\n```\n\nReturn the number of entries in a stream\n\n### XACK\n\n```\nXACK key group ID [ID ...]\n```\n\n#### Example\n\n```shell script\nredis> XACK mystream mygroup 1526569495631-0\nERR Unknown or disabled command 'XACK'\n```\n\nMarks a pending message as correctly processed, effectively removing it from the pending entries list of the consumer\ngroup. Return value of the command is the number of messages successfully acknowledged, that is, the IDs we were\nactually able to resolve in the PEL.\n"
            },
            {
                "title": "Miscellaneous",
                "content": "\n### Cluster\n\n| -                                                                                         | -                                                                |\n| ----------------------------------------------------------------------------------------- | ---------------------------------------------------------------- |\n| [CLUSTER ADDSLOTS ](https://redis.io/commands/cluster-addslots)                           | Assign new hash slots to receiving node                          |\n| [CLUSTER BUMPEPOCH](https://redis.io/commands/cluster-bumpepoch)                          | Advance the cluster config epoch                                 |\n| [CLUSTER COUNT-FAILURE-REPORTS ](https://redis.io/commands/cluster-count-failure-reports) | Return the number of failure reports active for a given node     |\n| [CLUSTER COUNTKEYSINSLOT ](https://redis.io/commands/cluster-countkeysinslot)             | Return the number of local keys in the specified hash slot       |\n| [CLUSTER DELSLOTS ](https://redis.io/commands/cluster-delslots)                           | Set hash slots as unbound in receiving node                      |\n| [CLUSTER FAILOVER ](https://redis.io/commands/cluster-failover)                           | Forces a replica to perform a manual failover of its master.     |\n| [CLUSTER FLUSHSLOTS](https://redis.io/commands/cluster-flushslots)                        | Delete a node's own slots information                            |\n| [CLUSTER FORGET ](https://redis.io/commands/cluster-forget)                               | Remove a node from the nodes table                               |\n| [CLUSTER GETKEYSINSLOT ](https://redis.io/commands/cluster-getkeysinslot)                 | Return local key names in the specified hash slot                |\n| [CLUSTER INFO](https://redis.io/commands/cluster-info)                                    | Provides info about Redis Cluster node state                     |\n| [CLUSTER KEYSLOT ](https://redis.io/commands/cluster-keyslot)                             | Returns the hash slot of the specified key                       |\n| [CLUSTER MEET ](https://redis.io/commands/cluster-meet)                                   | Force a node cluster to handshake with another node              |\n| [CLUSTER MYID](https://redis.io/commands/cluster-myid)                                    | Return the node id                                               |\n| [CLUSTER NODES](https://redis.io/commands/cluster-nodes)                                  | Get Cluster config for the node                                  |\n| [CLUSTER REPLICATE ](https://redis.io/commands/cluster-replicate)                         | Reconfigure a node as a replica of the specified master node     |\n| [CLUSTER RESET ](https://redis.io/commands/cluster-reset)                                 | Reset a Redis Cluster node                                       |\n| [CLUSTER SAVECONFIG](https://redis.io/commands/cluster-saveconfig)                        | Forces the node to save cluster state on disk                    |\n| [CLUSTER SET-CONFIG-EPOCH ](https://redis.io/commands/cluster-set-config-epoch)           | Set the configuration epoch in a new node                        |\n| [CLUSTER SETSLOT ](https://redis.io/commands/cluster-setslot)                             | Bind a hash slot to a specific node                              |\n| [CLUSTER SLAVES ](https://redis.io/commands/cluster-slaves)                               | List replica nodes of the specified master node                  |\n| [CLUSTER REPLICAS ](https://redis.io/commands/cluster-replicas)                           | List replica nodes of the specified master node                  |\n| [CLUSTER SLOTS](https://redis.io/commands/cluster-slots)                                  | Get array of Cluster slot to node mappings                       |\n| [READONLY](https://redis.io/commands/readonly)                                            | Enables read queries for a connection to a cluster replica node  |\n| [READWRITE](https://redis.io/commands/readwrite)                                          | Disables read queries for a connection to a cluster replica node |\n\n### Transactions\n\n| -                                            | -                                                                   |\n| -------------------------------------------- | ------------------------------------------------------------------- |\n| [DISCARD](https://redis.io/commands/discard) | Discard all commands issued after MULTI                             |\n| [EXEC](https://redis.io/commands/exec)       | Execute all commands issued after MULTI                             |\n| [MULTI](https://redis.io/commands/multi)     | Mark the start of a transaction block                               |\n| [UNWATCH](https://redis.io/commands/unwatch) | Forget about all watched keys                                       |\n| [WATCH ](https://redis.io/commands/watch)    | Watch the given keys to determine execution of the MULTI/EXEC block |\n\n### Scripting\n\n| -                                                         | -                                                    |\n| --------------------------------------------------------- | ---------------------------------------------------- |\n| [EVAL ](https://redis.io/commands/eval)                   | Execute a Lua script server side                     |\n| [EVALSHA ](https://redis.io/commands/evalsha)             | Execute a Lua script server side                     |\n| [SCRIPT DEBUG ](https://redis.io/commands/script-debug)   | Set the debug mode for executed scripts.             |\n| [SCRIPT EXISTS ](https://redis.io/commands/script-exists) | Check existence of scripts in the script cache.      |\n| [SCRIPT FLUSH](https://redis.io/commands/script-flush)    | Remove all the scripts from the script cache.        |\n| [SCRIPT KILL](https://redis.io/commands/script-kill)      | Kill the script currently in execution.              |\n| [SCRIPT LOAD ](https://redis.io/commands/script-load)     | Load the specified Lua script into the script cache. |\n\n### Pubsub\n\n| -                                                       | -                                                                          |\n| ------------------------------------------------------- | -------------------------------------------------------------------------- |\n| [PSUBSCRIBE ](https://redis.io/commands/psubscribe)     | Listen for messages published to channels matching the given patterns      |\n| [PUBSUB ](https://redis.io/commands/pubsub)             | Inspect the state of the Pub/Sub subsystem                                 |\n| [PUBLISH ](https://redis.io/commands/publish)           | Post a message to a channel                                                |\n| [PUNSUBSCRIBE ](https://redis.io/commands/punsubscribe) | Stop listening for messages posted to channels matching the given patterns |\n| [SUBSCRIBE ](https://redis.io/commands/subscribe)       | Listen for messages published to the given channels                        |\n| [UNSUBSCRIBE ](https://redis.io/commands/unsubscribe)   | Stop listening for messages posted to the given channels                   |"
            }
        ]
    },
    {
        "name": "graphql",
        "title": "GraphQL",
        "tags": [
            "query",
            "API"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#cc44a2",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/graphql.svg",
        "intro": "This quick reference cheat sheet provides a brief overview of GraphQL.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Overview\n\n- An alternative approach to RESTful APIs\n- GraphQL is a query language for APIs\n- Easily describe the shape of the GraphQL API using clear shared terms.\n- Clients issue queries/mutations to read and update data\n- GraphQL syntax can express complex entity relations\n- Libraries to implement GraphQL in [different languages](https://graphql.org/code/)\n\n[GraphQL](https://graphql.org/) \n\n### Schema\n\n|                |                                  |\n| -------------- | -------------------------------- |\n| `schema`       | GraphQL schema definition        |\n| `query`        | Read and traverse data           |\n| `mutation`     | Modify data or trigger an action |\n| `subscription` | Run a query when an event occurs |\n\n### Built-in Scalar Types\n\n|           |                                              |\n| --------- | -------------------------------------------- |\n| `Int`     | Signed 32\u2010bit integer                        |\n| `Float`   | Signed double-precision floating-point value |\n| `String`  | UTF\u20108 character sequence                     |\n| `Boolean` | true or false                                |\n| `ID`      | A Unique identifier                          |\n\n### Type Definitions\n\n|             |                   |\n| ----------- | ----------------- |\n| `scalar`    | Scalar Type       |\n| `type`      | Object Type       |\n| `interface` | Interface Type    |\n| `union`     | Union Type        |\n| `enum`      | Enum Type         |\n| `input`     | Input Object Type |\n\n### Type Modifiers\n\n|              |                                   |\n| ------------ | --------------------------------- |\n| `String`     | Nullable String                   |\n| `String!`    | Non-null String                   |\n| `[String]`   | List of nullable Strings          |\n| `[String]!`  | Non-null list of nullable Strings |\n| `[String!]!` | Non-null list of non-null Strings |\n\n### Input Arguments \n\n#### Basic Input\n\n```js\ntype Query {\n    users(limit: Int): [User]\n}\n```\n\n#### Input with default value\n\n```js\ntype Query {\n    users(limit: Int = 10): [User]\n}\n```\n\n#### Input with multiple arguments\n\n```js\ntype Query {\n    users(limit: Int, sort: String): [User]\n}\n```\n\n#### Input with multiple arguments and default values\n\n```js \ntype Query {\n    users(limit: Int = 10, sort: String): [User]\n}\ntype Query {\n    users(limit: Int, sort: String = \"asc\"): [User]\n}\ntype Query {\n    users(limit: Int = 10, sort: String = \"asc\"): [User]\n}\n```\n\n### Input Types\n\n```js\ninput ListUsersInput {\n    limit: Int\n    since_id: ID\n}\n```\n\n```js\ntype Mutation {\n    users(params: ListUsersInput): [User]!\n}\n```\n\n### Custom Scalars\n\n```js\nscalar Url\ntype User {\n    name: String\n    homepage: Url\n}\n```\n\n### Interfaces\n\n```js\ninterface Foo {\n    is_foo: Boolean\n}\ninterface Goo {\n    is_goo: Boolean\n}\ntype Bar implements Foo {\n    is_foo: Boolean\n    is_bar: Boolean\n}\ntype Baz implements Foo, Goo {\n    is_foo: Boolean\n    is_goo: Boolean\n    is_baz: Boolean\n}\n```\n\nObject implementing one or more Interfaces\n\n### Unions\n\n```js\ntype Foo {\n    name: String\n}\ntype Bar {\n    is_bar: String\n}\nunion SingleUnion = Foo\nunion MultipleUnion = Foo | Bar\ntype Root {\n    single: SingleUnion\n    multiple: MultipleUnion\n}\n```\n\nUnion of one or more Objects\n\n### Enums\n\n```js \nenum USER_STATE {\n    NOT_FOUND\n    ACTIVE\n    INACTIVE\n    SUSPENDED\n}\ntype Root {\n    stateForUser(userID: ID!): USER_STATE!\n    users(state: USER_STATE, limit: Int = 10): [User]\n}\n```\n"
            },
            {
                "title": "Also see",
                "content": "\n- [GraphQL Schema Language Cheat Sheet](https://github.com/sogko/graphql-schema-language-cheat-sheet) _(github.com)_"
            }
        ]
    },
    {
        "name": "perl",
        "title": "Perl",
        "tags": [],
        "categories": [
            "Programming"
        ],
        "background": "#31719d",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/perl.svg",
        "intro": "The perl quick reference cheat sheet that aims at providing help on writing basic syntax and methods.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Unix and Linux Installation\n\n- Open a Web browser and go to https://www.perl.org/get.html.\n\n- Follow the link to download zipped source code available for Unix/Linux.\n\n- Download perl-5.x.y.tar.gz file and issue the following commands at $ prompt.\n\n```shell\n$tar -xzf perl-5.x.y.tar.gz\n$cd perl-5.x.y\n$./Configure -de\n$make\n$make test\n$make install\n```\n\n### Windows Installation\n\n- Follow the link for the Strawberry Perl installation on Windows http://strawberryperl.com\n\n- Download either 32bit or 64bit version of installation.\n\n- Run the downloaded file by double-clicking it in Windows Explorer. This brings up the Perl install wizard, which is really easy to use. Just accept the default settings, wait until the installation is finished, and you're ready to roll!\n\n### Macintosh Installation\n\n- Open a Web browser and go to https://www.perl.org/get.html.\n\n- Follow the link to download zipped source code available for Mac OS X.\n\n- Download perl-5.x.y.tar.gz file and issue the following commands at $ prompt\n\n```shell\n$tar -xzf perl-5.x.y.tar.gz\n$cd perl-5.x.y\n$./Configure -de\n$make\n$make test\n$make install\n```\n\n### Running Perl\n\n```shell\n# Unix/Linux\n$perl  -e <perl code>\n# Windows/DOS\nC:>perl -e <perl code>\n```\n\n### Available command line options\n\n|    Option     |                         Description |\n| :-----------: | ----------------------------------: |\n| -d[:debugger] |         Runs program under debugger |\n|  -Idirectory  |   Specifies @INC/#include directory |\n|      -T       |           Enables tainting warnings |\n|      -U       |            Allows unsafe operations |\n|      -w       |        Enables many useful warnings |\n|      -W       |                Enables all warnings |\n|      -X       |               Disables all warnings |\n|  -e program   | Runs Perl script sent in as program |\n|     file      |  Runs Perl script from a given file |\n\n### Script from the Command-line\n\n```shell\n# Unix/Linux\n$perl  script.pl\n# Windows/DOS\nC:>perl script.pl\n```\n\n### First Perl Program\n\n```shell\n$perl -e 'print \"Hello World\\n\"'\n\n# #!/usr/bin/perl\n\n# This will print \"Hello, World\"\nprint \"Hello, world\\n\";\n$chmod 0755 hello.pl\n$./hello.pl\n\n```\n\n### Comments in Perl\n\n```perl\n# This is a comment in perl\n=begin comment\nThis is all part of multiline comment.\nYou can use as many lines as you like\nThese comments will be ignored by the\ncompiler until the next =cut is encountered.\n=cut\n\n```\n\n### Whitespaces in Perl\n\n```perl\n#!/usr/bin/perl\n\n# This would print with a line break in the middle\nprint \"Hello\n          world\\n\";\n#output\n#Hello\n#         world\n\n```\n\n### Single and Double Quotes in Perl\n\n```perl\n#!/usr/bin/perl\n\nprint \"Hello, world\\n\";\nprint 'Hello, world\\n';\n\n#Hello, world\n#Hello, world\\n$\n```\n"
            },
            {
                "title": "Datatypes",
                "content": "\n### Creating Variables\n\n```perl\n$age = 25;             # An integer assignment\n$name = \"John Paul\";   # A string\n$salary = 1445.50;     # A floating point\n```\n\n### Scalar Variables\n\n```perl\n#!/usr/bin/perl\n\n$age = 25;             # An integer assignment\n$name = \"John Paul\";   # A string\n$salary = 1445.50;     # A floating point\n\nprint \"Age = $age\\n\";\nprint \"Name = $name\\n\";\nprint \"Salary = $salary\\n\";\n```\n\n### Array Variables\n\n```perl\n#!/usr/bin/perl\n\n@ages = (25, 30, 40);\n@names = (\"John Paul\", \"Lisa\", \"Kumar\");\n\nprint \"\\$ages[0] = $ages[0]\\n\";\nprint \"\\$ages[1] = $ages[1]\\n\";\nprint \"\\$ages[2] = $ages[2]\\n\";\nprint \"\\$names[0] = $names[0]\\n\";\nprint \"\\$names[1] = $names[1]\\n\";\nprint \"\\$names[2] = $names[2]\\n\";\n```\n\n### Hash Variables\n\n```perl\n#!/usr/bin/perl\n\n%data = ('John Paul', 45, 'Lisa', 30, 'Kumar', 40);\n\nprint \"\\$data{'John Paul'} = $data{'John Paul'}\\n\";\nprint \"\\$data{'Lisa'} = $data{'Lisa'}\\n\";\nprint \"\\$data{'Kumar'} = $data{'Kumar'}\\n\";\n```\n\n### Variable Context\n\n```perl\n#!/usr/bin/perl\n\n@names = ('John Paul', 'Lisa', 'Kumar');\n\n@copy = @names;\n$size = @names;\n\nprint \"Given names are : @copy\\n\";\nprint \"Number of names are : $size\\n\";\n```\n\n### Numeric Scalars\n\n```perl\n#!/usr/bin/perl\n\n$integer = 200;\n$negative = -300;\n$floating = 200.340;\n$bigfloat = -1.2E-23;\n\n# 377 octal, same as 255 decimal\n$octal = 0377;\n\n# FF hex, also 255 decimal\n$hexa = 0xff;\n\nprint \"integer = $integer\\n\";\nprint \"negative = $negative\\n\";\nprint \"floating = $floating\\n\";\nprint \"bigfloat = $bigfloat\\n\";\nprint \"octal = $octal\\n\";\nprint \"hexa = $hexa\\n\";\n```\n\n### String Scalars\n\n```perl\n#!/usr/bin/perl\n\n$var = \"This is string scalar!\";\n$quote = 'I m inside single quote - $var';\n$double = \"This is inside single quote - $var\";\n\n$escape = \"This example of escape -\\tHello, World!\";\n\nprint \"var = $var\\n\";\nprint \"quote = $quote\\n\";\nprint \"double = $double\\n\";\nprint \"escape = $escape\\n\";\n```\n\n### Scalar Operations\n\n```perl\n#!/usr/bin/perl\n\n$str = \"hello\" . \"world\";       # Concatenates strings.\n$num = 5 + 10;                  # adds two numbers.\n$mul = 4 * 5;                   # multiplies two numbers.\n$mix = $str . $num;             # concatenates string and number.\n\nprint \"str = $str\\n\";\nprint \"num = $num\\n\";\nprint \"mul = $mul\\n\";\nprint \"mix = $mix\\n\";\n```\n\n### Multiline Strings\n\n```perl\n#!/usr/bin/perl\n\n$string = 'This is\na multiline\nstring';\n\nprint \"$string\\n\";\n\n##########################\nprint <<EOF;\nThis is\na multiline\nstring\nEOF\n```\n\n### V-Strings\n\n```perl\n#!/usr/bin/perl\n\n$smile  = v9786;\n$foo    = v102.111.111;\n$martin = v77.97.114.116.105.110;\n\nprint \"smile = $smile\\n\";\nprint \"foo = $foo\\n\";\nprint \"martin = $martin\\n\";\n```\n\n### Special Literals\n\n```perl\n#!/usr/bin/perl\n\nprint \"File name \". __FILE__ . \"\\n\";\nprint \"Line Number \" . __LINE__ .\"\\n\";\nprint \"Package \" . __PACKAGE__ .\"\\n\";\n\n# they can not be interpolated\nprint \"__FILE__ __LINE__ __PACKAGE__\\n\";\n```\n\n### Sequential Number Arrays\n\n```perl\n#!/usr/bin/perl\n\n@var_10 = (1..10);\n@var_20 = (10..20);\n@var_abc = (a..z);\n\nprint \"@var_10\\n\";   # Prints number from 1 to 10\nprint \"@var_20\\n\";   # Prints number from 10 to 20\nprint \"@var_abc\\n\";  # Prints number from a to z\n```\n\n### Array Size\n\n```perl\n#!/usr/bin/perl\n\n@array = (1,2,3);\n$array[50] = 4;\n\n$size = @array;\n$max_index = $#array;\n\nprint \"Size:  $size\\n\";\nprint \"Max Index: $max_index\\n\";\n```\n"
            },
            {
                "title": "Array oparationns",
                "content": "\n### Adding and Removing Elements in Array\n\n| types                |                                                  Description                                                  |\n| :------------------- | :-----------------------------------------------------------------------------------------------------------: |\n| push @ARRAY, LIST    |                           Pushes the values of the list onto the end of the array.                            |\n| pop @ARRAY           |                               Pops off and returns the last value of the array.                               |\n| shift @ARRAY         | Shifts the first value of the array off and returns it, shortening the array by 1 and moving everything down. |\n| unshift @ARRAY, LIST |         Prepends list to the front of the array, and returns the number of elements in the new array.         |\n\n### Array oparations\n\n```perl\n#!/usr/bin/perl\n\n# create a simple array\n\n@coins = (\"Quarter\",\"Dime\",\"Nickel\");\nprint \"1. \\@coins = @coins\\n\";\n\n# add one element at the end of the array\n\npush(@coins, \"Penny\");\nprint \"2. \\@coins = @coins\\n\";\n\n# add one element at the beginning of the array\n\nunshift(@coins, \"Dollar\");\nprint \"3. \\@coins = @coins\\n\";\n\n# remove one element from the last of the array.\n\npop(@coins);\nprint \"4. \\@coins = @coins\\n\";\n\n# remove one element from the beginning of the array.\n\nshift(@coins);\nprint \"5. \\@coins = @coins\\n\";\n\n```\n\n### Slicing Array Elements\n\n```perl\n#!/usr/bin/perl\n\n@days = qw/Mon Tue Wed Thu Fri Sat Sun/;\n\n@weekdays = @days[3,4,5];\n\nprint \"@weekdays\\n\";\n```\n\n### Replacing Array Elements\n\n```perl\n#!/usr/bin/perl\n\n@nums = (1..20);\nprint \"Before - @nums\\n\";\n\nsplice(@nums, 5, 5, 21..25);\nprint \"After - @nums\\n\";\n```\n\n### Transform Strings to Arrays\n\n```perl\n#!/usr/bin/perl\n\n# define Strings\n\n$var_string = \"Rain-Drops-On-Roses-And-Whiskers-On-Kittens\";\n$var_names = \"Larry,David,Roger,Ken,Michael,Tom\";\n\n# transform above strings into arrays.\n\n@string = split('-', $var_string);\n@names = split(',', $var_names);\n\nprint \"$string[3]\\n\";  # This will print Roses\nprint \"$names[4]\\n\"; # This will print Michael\n```\n\n### Transform Arrays to Strings\n\n```perl\n#!/usr/bin/perl\n\n# define Strings\n$var_string = \"Rain-Drops-On-Roses-And-Whiskers-On-Kittens\";\n$var_names = \"Larry,David,Roger,Ken,Michael,Tom\";\n\n# transform above strings into arrays.\n@string = split('-', $var_string);\n@names  = split(',', $var_names);\n\n$string1 = join( '-', @string );\n$string2 = join( ',', @names );\n\nprint \"$string1\\n\";\nprint \"$string2\\n\";\n```\n\n### Sorting Arrays\n\n```perl\n#!/usr/bin/perl\n\n# define an array\n@foods = qw(pizza steak chicken burgers);\nprint \"Before: @foods\\n\";\n\n# sort this array\n@foods = sort(@foods);\nprint \"After: @foods\\n\";\n```\n\n### The $[ Special Variable\n\n```perl\n#!/usr/bin/perl\n\n# define an array\n@foods = qw(pizza steak chicken burgers);\nprint \"Foods: @foods\\n\";\n\n# Let's reset first index of all the arrays.\n$[ = 1;\n\nprint \"Food at \\@foods[1]: $foods[1]\\n\";\nprint \"Food at \\@foods[2]: $foods[2]\\n\";\n```\n\n### Merging Arrays\n\n```perl\n#!/usr/bin/perl\n\n@odd = (1,3,5);\n@even = (2, 4, 6);\n\n@numbers = (@odd, @even);\n\nprint \"numbers = @numbers\\n\";\n```\n\n### Selecting Elements from Lists\n\n```perl\n#!/usr/bin/perl\n\n@list = (5,4,3,2,1)[1..3];\n\nprint \"Value of list = @list\\n\";\n```\n\n### Accessing Hash Elements\n\n```perl\n#!/usr/bin/perl\n\n%data = ('John Paul' => 45, 'Lisa' => 30, 'Kumar' => 40);\n\nprint \"$data{'John Paul'}\\n\";\nprint \"$data{'Lisa'}\\n\";\nprint \"$data{'Kumar'}\\n\";\n```\n\n### Extracting Slices\n\n```perl\n#!/uer/bin/perl\n\n\n%data = (-JohnPaul => 45, -Lisa => 30, -Kumar => 40);\n\n@array = @data{-JohnPaul, -Lisa};\n\nprint \"Array : @array\\n\";\n```\n\n### Extracting Keys and Values\n\n```perl\n#!/usr/bin/perl\n\n%data = ('John Paul' => 45, 'Lisa' => 30, 'Kumar' => 40);\n\n@names = keys %data;\n\nprint \"$names[0]\\n\";\nprint \"$names[1]\\n\";\nprint \"$names[2]\\n\";\n```\n\n### Getting Hash Size\n\n```perl\n#!/usr/bin/perl\n\n%data = ('John Paul' => 45, 'Lisa' => 30, 'Kumar' => 40);\n\n@keys = keys %data;\n$size = @keys;\nprint \"1 - Hash size:  is $size\\n\";\n\n@values = values %data;\n$size = @values;\nprint \"2 - Hash size:  is $size\\n\";\n```\n\n### Add and Remove Elements in Hashes\n\n```perl\n#!/usr/bin/perl\n\n%data = ('John Paul' => 45, 'Lisa' => 30, 'Kumar' => 40);\n@keys = keys %data;\n$size = @keys;\nprint \"1 - Hash size:  is $size\\n\";\n\n# adding an element to the hash;\n$data{'Ali'} = 55;\n@keys = keys %data;\n$size = @keys;\nprint \"2 - Hash size:  is $size\\n\";\n\n# delete the same element from the hash;\ndelete $data{'Ali'};\n@keys = keys %data;\n$size = @keys;\nprint \"3 - Hash size:  is $size\\n\";\n```\n"
            },
            {
                "title": "Control Flow",
                "content": "\n### if-else\n\n```perl\n#!/usr/bin/perl\n\n# Perl program to illustrate\n# Decision-Making statements\n\n$a = 10;\n$b = 15;\n\n# if condition to check\n# for even number\nif($a % 2 == 0 )\n{\n\tprintf \"Even Number\";\n}\n\n# if-else condition to check\n# for even number or odd number\nif($b % 2 == 0 )\n{\n\tprintf \"\\nEven Number\";\n}\nelse\n{\n\tprintf \"\\nOdd Number\";\n}\n```\n\n### The ? : Operator\n\n```perl\n#!/usr/local/bin/perl\n\n$name = \"Ali\";\n$age = 10;\n\n$status = ($age > 60 )? \"A senior citizen\" : \"Not a senior citizen\";\n\nprint \"$name is  - $status\\n\";\n```\n\n### for loop\n\n```perl\n#!/usr/bin/perl\n\n# Perl program to illustrate\n# the use of for Loop\n\n# for loop\nprint(\"For Loop:\\n\");\nfor ($count = 1 ; $count <= 3 ; $count++)\n{\n\tprint \"GeeksForGeeks\\n\"\n}\n```\n\n### foreach loop\n\n```perl\n#!/usr/bin/perl\n\n# Perl program to illustrate\n# the use of foreach Loop\n\n# Array\n@data = ('GEEKS', 4, 'GEEKS');\n\n# foreach loop\nprint(\"For-each Loop:\\n\");\nforeach $word (@data)\n{\n\tprint (\"$word \");\n}\n\n```\n\n### while and do-while\n\n```perl\n#!/usr/bin/perl\n\n# Perl program to illustrate\n# the use of foreach Loop\n\n# while loop\n$count = 3;\n\nprint(\"While Loop:\\n\");\nwhile ($count >= 0)\n{\n\t$count = $count - 1;\n\tprint \"GeeksForGeeks\\n\";\n}\n\nprint(\"\\ndo...while Loop:\\n\");\n$a = 10;\n\n# do..While loop\ndo {\n\n\tprint \"$a \";\n\t$a = $a - 1;\n} while ($a > 0);\n\n```\n"
            },
            {
                "title": "Object Oriented Programming",
                "content": "\n### Class and object\n\n```perl\n#!/usr/bin/perl\n\n# Perl Program for creation of a\n# Class and its object\nuse strict;\nuse warnings;\n\npackage student;\n\n# constructor\nsub student_data\n{\n\n\t# shift will take package name 'student'\n\t# and assign it to variable 'class'\n\tmy $class_name = shift;\n\tmy $self = {\n\t\t\t\t'StudentFirstName' => shift,\n\t\t\t\t'StudentLastName' => shift\n\t\t\t};\n\t# Using bless function\n\tbless $self, $class_name;\n\n\t# returning object from constructor\n\treturn $self;\n}\n\n# Object creating and constructor calling\nmy $Data = student_data student(\"Geeks\", \"forGeeks\");\n\n# Printing the data\nprint \"$Data->{'StudentFirstName'}\\n\";\nprint \"$Data->{'StudentLastName'}\\n\";\n\n```\n\n### Subroutines\n\n```perl\n#!/usr/bin/perl\n\n# Perl Program to demonstrate the\n# subroutine declaration and calling\n\n# defining subroutine\nsub ask_user\n{\n\tprint \"Hello Geeks!\\n\";\n}\n\n# calling subroutine\n# you can also use\n# &ask_user();\nask_user();\n```\n\n### Modules and Packages\n\n```perl\n#!/usr/bin/perl\n\n# Using the Package 'Calculator'\nuse Calculator;\n\nprint \"Enter two numbers to multiply\";\n\n# Defining values to the variables\n$a = 5;\n$b = 10;\n\n# Subroutine call\nCalculator::multiplication($a, $b);\n\nprint \"\\nEnter two numbers to divide\";\n\n# Defining values to the variables\n$a = 45;\n$b = 5;\n\n# Subroutine call\nCalculator::division($a, $b);\n```\n\n### References\n\n```perl\n# Perl program to illustrate the\n# Referencing and Dereferencing\n# of an Array\n\n# defining an array\n@array = ('1', '2', '3');\n\n# making an reference to an array variable\n$reference_array = \\@array;\n\n# Dereferencing\n# printing the value stored\n# at $reference_array by prefixing\n# @ as it is a array reference\nprint @$reference_array;\n```\n\n### Regular Expression\n\n```perl\n# Perl program to demonstrate\n# the m// and =~ operators\n\n# Actual String\n$a = \"GEEKSFORGEEKS\";\n\n# Prints match found if\n# its found in $a\nif ($a =~ m[GEEKS])\n{\n\tprint \"Match Found\\n\";\n}\n\n# Prints match not found\n# if its not found in $a\nelse\n{\n\tprint \"Match Not Found\\n\";\n}\n```\n\n### File Handling\n\n```perl\n# Opening the file\nopen(fh, \"GFG2.txt\") or die \"File '$filename' can't be opened\";\n\n# Reading First line from the file\n$firstline = <fh>;\nprint \"$firstline\\n\";\n```\n\n### File Test Operators\n\n```perl\n#!/usr/bin/perl\n\n# Using predefined modules\nuse warnings;\nuse strict;\n\n# Providing path of file to a variable\nmy $filename = 'C:\\Users\\GeeksForGeeks\\GFG.txt';\n\n# Checking for the file existence\nif(-e $filename)\n{\n\n\t# If File exists\n\tprint(\"File $filename exists\\n\");\n}\n\nelse\n{\n\n\t# If File doesn't exists\n\tprint(\"File $filename does not exists\\n\");\n}\n```\n\n### Working with Excel Files\n\n```perl\n#!/usr/bin/perl\nuse Excel::Writer::XLSX;\n\nmy $Excelbook = Excel::Writer::XLSX->new( 'GFG_Sample.xlsx' );\nmy $Excelsheet = $Excelbook->add_worksheet();\n\n$Excelsheet->write( \"A1\", \"Hello!\" );\n$Excelsheet->write( \"A2\", \"GeeksForGeeks\" );\n$Excelsheet->write( \"B1\", \"Next_Column\" );\n\n$Excelbook->close;\n```\n\n### Reading from an Excel File:\n\n```perl\nuse 5.016;\nuse Spreadsheet::Read qw(ReadData);\nmy $book_data = ReadData (\u2018new_excel.xlsx');\nsay 'A2: ' . $book_data->[1]{A2};\n\n```\n\n### Error Handling\n\n```perl\nif(open(DATA, $file)) {\n   ...\n} else {\n   die \"Error: Couldn't open the file - $!\"\n}\n#example\nopen(DATA, $file) || die \"Error: Couldn't open the file $!\";"
            },
            {
                "title": "example",
                "content": "unless(chdir(\"/etc\")) {\n   die \"Error: Can't change directory - $!\";\n}\n##example\nprint(exists($hash{value}) ? 'There' : 'Missing',\"\\n\");\n\n```\n\n### The warn Function\n\n```perl\nchdir('/etc') or warn \"Can't change directory\";\n\n\n```\n\n### The die function\n\n```perl\nchdir('/etc') or die \"Can't change directory\";\n\n```\n\n### Errors within Modules\n\n```perl\npackage T;\n\nrequire Exporter;\n@ISA = qw/Exporter/;\n@EXPORT = qw/function/;\nuse Carp;\n\nsub function {\n   warn \"Error in module!\";\n}\n1;\n#use T;\n#function();\n# all below code call the funtion\n\n```\n\n### The carp Function\n\n```perl\npackage T;\n\nrequire Exporter;\n@ISA = qw/Exporter/;\n@EXPORT = qw/function/;\nuse Carp;\n\nsub function {\n   carp \"Error in module!\";\n}\n1;\n\n```\n\n### The cluck Function\n\n```perl\npackage T;\n\nrequire Exporter;\n@ISA = qw/Exporter/;\n@EXPORT = qw/function/;\nuse Carp qw(cluck);\n\nsub function {\n   cluck \"Error in module!\";\n}\n1;\n\n```\n\n### The croak Function\n\n```perl\npackage T;\n\nrequire Exporter;\n@ISA = qw/Exporter/;\n@EXPORT = qw/function/;\nuse Carp;\n\nsub function {\n   croak \"Error in module!\";\n}\n1;\n\n```\n\n### The confess Function\n\n```perl\npackage T;\n\nrequire Exporter;\n@ISA = qw/Exporter/;\n@EXPORT = qw/function/;\nuse Carp;\n\nsub function {\n   confess \"Error in module!\";\n}\n1;\n```\n"
            },
            {
                "title": "Date and Time",
                "content": "\n### Current Date and Time\n\n```perl\n#!/usr/local/bin/perl\n\n@months = qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );\n@days = qw(Sun Mon Tue Wed Thu Fri Sat Sun);\n\n($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();\nprint \"$mday $months[$mon] $days[$wday]\\n\";\n#or\n#!/usr/local/bin/perl\n\n$datestring = localtime();\nprint \"Local date and time $datestring\\n\";\n```\n\n### GMT Time\n\n```perl\n#!/usr/local/bin/perl\n\n$datestring = gmtime();\nprint \"GMT date and time $datestring\\n\";\n```\n\n### Format Date and Time\n\n```perl\n#!/usr/local/bin/perl\n\n($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();\n\nprintf(\"Time Format - HH:MM:SS\\n\");\nprintf(\"%02d:%02d:%02d\", $hour, $min, $sec);\n```\n\n### Epoch time\n\n```perl\n#!/usr/local/bin/perl\n\n$epoc = time();\n\nprint \"Number of seconds since Jan 1, 1970 - $epoc\\n\";\n#or\n#!/usr/local/bin/perl\n\n$datestring = localtime();\nprint \"Current date and time $datestring\\n\";\n\n$epoc = time();\n$epoc = $epoc - 24 * 60 * 60;   # one day before of current date.\n\n$datestring = localtime($epoc);\nprint \"Yesterday's date and time $datestring\\n\";\n```\n\n### POSIX Function strftime()\n\n| Specifier | Replaced by                                                                                                    |         Example          |\n| :-------- | :------------------------------------------------------------------------------------------------------------- | :----------------------: |\n| %a        | Abbreviated weekday name                                                                                       |           Thu            |\n| %A        | Full weekday name                                                                                              |         Thursday         |\n| %b        | Abbreviated month name                                                                                         |           Aug            |\n| %B        | Full month name                                                                                                |          August          |\n| %c        | Date and time representation                                                                                   | Thu Aug 23 14:55:02 2001 |\n| %C        | Year divided by 100 and truncated to integer (00-99)                                                           |            20            |\n| %d        | Day of the month, zero-padded (01-31)                                                                          |            23            |\n| %D        | Short MM/DD/YY date, equivalent to %m/%d/%y                                                                    |         08/23/01         |\n| %e        | Day of the month, space-padded ( 1-31)                                                                         |            23            |\n| %F        | Short YYYY-MM-DD date, equivalent to %Y-%m-%d                                                                  |        2001-08-23        |\n| %g        | Week-based year, last two digits (00-99)                                                                       |            01            |\n| %G        | Week-based year                                                                                                |           2001           |\n| %h        | Abbreviated month name (same as %b)                                                                            |           Aug            |\n| %H        | Hour in 24h format (00-23)                                                                                     |            14            |\n| %I        | Hour in 12h format (01-12)                                                                                     |            02            |\n| %j        | Day of the year (001-366)                                                                                      |           235            |\n| %m        | Month as a decimal number (01-12)                                                                              |            08            |\n| %M        | Minute (00-59)                                                                                                 |            55            |\n| %n        | New-line character ('\\n')                                                                                      |\n| %p        | AM or PM designation                                                                                           |            PM            |\n| %r        | 12-hour clock time                                                                                             |       02:55:02 pm        |\n| %R        | 24-hour HH:MM time, equivalent to %H:%M                                                                        |          14:55           |\n| %S        | Second (00-61)                                                                                                 |            02            |\n| %t        | Horizontal-tab character ('\\t')                                                                                |\n| %T        | ISO 8601 time format (HH:MM:SS), equivalent to %H:%M:%S                                                        |          14:55           |\n| %u        | ISO 8601 weekday as number with Monday as 1 (1-7)                                                              |            4             |\n| %U        | Week number with the first Sunday as the first day of week one (00-53)                                         |            33            |\n| %V        | ISO 8601 week number (00-53)                                                                                   |            34            |\n| %w        | Weekday as a decimal number with Sunday as 0 (0-6)                                                             |            4             |\n| %W        | Week number with the first Monday as the first day of week one (00-53)                                         |            34            |\n| %x        | Date representation                                                                                            |         08/23/01         |\n| %X        | Time representation                                                                                            |         14:55:02         |\n| %y        | Year, last two digits (00-99)                                                                                  |            01            |\n| %Y        | Year                                                                                                           |           2001           |\n| %z        | ISO 8601 offset from UTC in timezone (1 minute = 1, 1 hour = 100)If timezone cannot be termined, no characters |           +100           |\n| %Z        | Timezone name or abbreviation If timezone cannot be termined, no characters                                    |           CDT            |\n| %%        | A % sign                                                                                                       |            %             |\n\n```perl\n#!/usr/local/bin/perl\nuse POSIX qw(strftime);\n\n$datestring = strftime \"%a %b %e %H:%M:%S %Y\", localtime;\nprintf(\"date and time - $datestring\\n\");\n\n# or for GMT formatted appropriately for your locale:\n$datestring = strftime \"%a %b %e %H:%M:%S %Y\", gmtime;\nprintf(\"date and time - $datestring\\n\");\n```"
            }
        ]
    },
    {
        "name": "react",
        "title": "React",
        "tags": [
            "react",
            "web"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#1289D8",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/react.svg",
        "intro": "A React cheat sheet with the most important concepts, functions, methods, and more. A complete quick reference for beginners.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### JSX\n\nJSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file.\n\n```javascript\nlet element = <h1>Hello, world!</h1>;\n\nlet emptyHeading = <h1 />;\n```\n\n### JSX Expressions\n\n```javascript\nlet name = \"Josh Perez\";\nlet element = <h1>Hello, {name}</h1>;\n\nfunction fullName(firstName, lastName) {\n  return firstName + \" \" + lastName;\n}\nlet element = <h1>Hello, {fullName(\"Julie\", \"Johnson\")}</h1>;\n```\n\n### JSX Attributes\n\n```javascript\nconst element = <img src={user.avatarUrl} />;\nconst element = <button className=\"btn\">Click me</button>;\n```\n\n### JSX Functions\n\n```javascript\nname() {\n  return \"Julie\";\n}\n\nreturn (\n  <h1>\n    Hi {name()}!\n  </h1>\n)\n```\n\n### JSX Conditional Rendering \n\n```javascript\nimport React from \"react\";\nexport default function Weather(props) {\n  if (props.temperature >= 20) {\n    return (\n      <p>\n        It is {props.temperature}\u00b0C (Warm) in {props.city}\n      </p>\n    );\n  } else {\n    return (\n      <p>\n        It is {props.temperature}\u00b0C in {props.city}\n      </p>\n    );\n  }\n}\n```\n\nNote: A component must always return something.\n"
            },
            {
                "title": "Components",
                "content": "\n### Functional Component\n\n```javascript\nimport React from \"react\";\n\nexport default function UserProfile() {\n  return (\n    <div className=\"UserProfile\">\n      <div>Hello</div>\n      <div>World</div>\n    </div>\n  );\n}\n```\n\nNote: Every component needs one root element\n\n### Embed an internal Component\n\n```javascript\nimport React from \"react\";\nimport UserAvatar from \"./UserAvatar\";\n\nexport default function UserProfile() {\n  return (\n    <div className=\"UserProfile\">\n      <UserAvatar />\n      <UserAvatar />\n    </div>\n  );\n}\n```\n\nNote: Assuming UserAvatar is declared in UserAvatar.js\n\n### Embed an external Component\n\n```javascript\nimport React from \"react\";\nimport ComponentName from \"component-name\";\n\nexport default function UserProfile() {\n  return (\n    <div className=\"UserProfile\">\n      <ComponentName />\n    </div>\n  );\n}\n```\n\nNote: External components are found on npmjs.com and need to be imported first.\n\n### Advanced Functional Components\n\n```javascript\nimport React from \"react\";\n\nexport default function Hello(props) {\n  function fullName() {\n    return `${props.firstName} ${props.lastName}`;\n  }\n  return <p>{fullName()}</p>;\n}\n\n<Hello firstName=\"Matt\" lastName=\"Delac\" />;\n```\n"
            },
            {
                "title": "Properties",
                "content": "\n### Passing Properties to a Component\n\n\n```javascript\n<Student\n  firstName=\"Julie\"\n  lastName=\"Johnson\"\n  age={23}\n  pro={true}\n/>\n```\n\n### Assigning the Properties from a Component\n\n```javascript\nimport React from \"react\";\n\nexport default function Student(props) {\n  return (\n    <h1>\n      {props.firstName} {props.lastName} is {props.age}.\n    </h1>\n  );\n}\n```\n"
            },
            {
                "title": "States",
                "content": "\n### React State\n\n```javascript\nimport React, { useState } from \"react\";\n\nexport default function Hello(props) {\n  let [name, setName] = useState(\"Julie\");\n  function updateName() {\n    let newName = prompt(\"What is your name?\");\n    setName(newName);\n  }\n\n  return (\n    <div>\n      <h1>{name}</h1>\n      <button onClick={updateName}>Update name</button>\n    </div>\n  );\n}\n```\n"
            },
            {
                "title": "Events",
                "content": "\n### Event Listener\n\n```javascript\nimport React from \"react\";\n\nexport default function Hello() {\n  function handleClick(event) {\n    event.preventDefault();\n    alert(\"Hello World\");\n  }\n\n  return (\n    <a href=\"/\" onClick={handleClick}>\n      Say Hi\n    </a>\n  );\n}\n```\n\nNote: The most common event listeners are onClick for links/buttons and onSubmit for forms.\n"
            },
            {
                "title": "Loops",
                "content": "\n### Looping through an Array\n\n```javascript\nlet elements = [\"one\", \"two\", \"three\"];\n\nreturn (\n  <ul>\n    {elements.map(function (value, index) {\n      return <li key={index}>{value}</li>;\n    })}\n  </ul>\n);\n```\n\nNote: Each list item inside a map loop needs a key attribute with a unique value which is generally the index.\n\n### Looping through an Array of Objects\n\n```javascript\nlet elements = [\n  {\n    name: \"one\",\n    value: 1,\n  },\n  {\n    name: \"two\",\n    value: 2,\n  },\n  {\n    name: \"three\",\n    value: 3,\n  },\n];\nreturn (\n  <ul>\n    {elements.map(function (element, index) {\n      return (\n        <li key={index}>\n          The value for {element.name} is {element.value}\n        </li>\n      );\n    })}\n  </ul>\n);\n```\n\nNote: Each list item inside a map loop needs a key attribute with a unique value which is generally the index.\n"
            },
            {
                "title": "Forms",
                "content": "\n### React Forms\n\n```javascript\nimport React, { useState } from \"react\";\n\nexport default function LoginForm() {\n  let [username, setUsername] = useState(\"\");\n  let [password, setPassword] = useState(\"\");\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    alert(`Loging in with ${username} and ${password}`);\n  }\n\n  function updateUsername(event) {\n    setUsername(event.target.value);\n  }\n\n  function updatePassword(event) {\n    setPassword(event.target.value);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" placeholder=\"Username\" onChange={updateUsername} />\n      <input type=\"password\" placeholder=\"Password\" onChange={updatePassword} />\n      <input type=\"submit\" value=\"Login\" />\n    </form>\n  );\n}\n```\n"
            },
            {
                "title": "CSS",
                "content": "\n### CSS in a React Component\n\n```javascript\nimport React from \"react\";\nimport \"./Student.css\";\n\nexport default function Student() {\n  return <div className=\"Student\">Julie Johnson</div>;\n}\n```\n\nNote: You'll then have to crate a css file called Student.css\n"
            },
            {
                "title": "AJAX",
                "content": "\n### AJAX Request with Axios\n\n```javascript\nimport React from \"react\";\nimport axios from \"axios\";\n\nexport default function Weather(props) {\n  function handleResponse(response) {\n    console.log(response);\n  }\n\n  if (notifications) {\n    return <p>notifications</p>;\n  } else {\n    let url = `https://notifications.com`;\n    axios.get(url).then(handleResponse);\n    return <p>Loading notifications..</p>;\n  }\n}\n```\n\nNote: Make sure to import Axios first to your project.\n"
            },
            {
                "title": "Hooks",
                "content": "\n### useState Hook\n\n```javascript\nimport React, { useState } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n\nexport default Counter;\n```\n\nNote: The useState Hook is a built-in React Hook that allows functional components to manage local state. It provides a\nway to declare state variables and update them within a functional component. Example code illustrating how to use it\n\n### Multiple State Variable Declaration\n\n```javascript\nimport React, { useState } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const [name, setName] = useState(\"\");\n  const [isCompleted, setIsCompleted] = useState(false);\n\n  const handleIncrement = () => {\n    setCount(count + 1);\n  };\n\n  const handleNameChange = (event) => {\n    setName(event.target.value);\n  };\n\n  const toggleCompletion = () => {\n    setIsCompleted(!isCompleted);\n  };\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={handleIncrement}>Increment</button>\n\n      <input type=\"text\" value={name} onChange={handleNameChange} placeholder=\"Enter your name\" />\n\n      <label>\n        <input type=\"checkbox\" checked={isCompleted} onChange={toggleCompletion} />\n        Completed\n      </label>\n    </div>\n  );\n}\n\nexport default Counter;\n```\n\nNote: You can declare multiple state variables using the useState Hook by calling it multiple times in a functional\ncomponent. Each call to useState manages a separate piece of state.\n\n### Input State Management\n\n```javascript\nimport { useState } from \"react\";\n\nfunction FormExample() {\n  const [formData, setFormData] = useState({ name: \"\", email: \"\", message: \"\" });\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    alert(`Name: ${formData.name}, Email: ${formData.email}, Message: ${formData.message}`);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"name\">Name:</label>\n      <input type=\"text\" id=\"name\" name=\"name\" value={formData.name} onChange={handleChange} />\n\n      <label htmlFor=\"email\">Email:</label>\n      <input type=\"email\" id=\"email\" name=\"email\" value={formData.email} onChange={handleChange} />\n\n      <label htmlFor=\"message\">Message:</label>\n      <textarea id=\"message\" name=\"message\" value={formData.message} onChange={handleChange} />\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nexport default FormExample;\n```\n\n### useEffect Hook\n\n```javascript\nimport React, { useState, useEffect } from \"react\";\n\nfunction Timer() {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds((prevSeconds) => prevSeconds + 1);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return <div>Seconds: {seconds}</div>;\n}\n\nexport default Timer;\n```\n\nNote: The useEffect Hook in React is used for performing side effects in functional components. It allows you to execute\ncode based on component lifecycle events like mounting, updating, and unmounting.\n\n### Fetch API using useEffect\n\n```javascript\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction UserList() {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => {\n        setUsers(response.data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching users:\", error);\n      });\n  }, []);\n\n  return (\n    <div>\n      <h2>User List</h2>\n      <ul>\n        {users.map((user) => (\n          <li key={user.id}>{user.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default UserList;\n```\n\nNote: Make sure to import Axios first to your project.\n\n### Custom Hook creation useLocalStorage\n\n```javascript\nimport { useState, useEffect } from \"react\";\n\nfunction useLocalStorage(key, initialValue) {\n  const [value, setValue] = useState(() => {\n    const storedValue = localStorage.getItem(key);\n    return storedValue !== null ? JSON.parse(storedValue) : initialValue;\n  });\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n}\n\nexport default useLocalStorage;\n```\n\nNote: Custom Hooks are reusable functions in React that contain logic shared across multiple components. They allow you\nto extract stateful logic from components into standalone functions.\n\n### Creating Refs in Class Components\n```javascript\nimport React, { Component } from \"react\";\n\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    console.log(this.myRef.current); // Access the DOM element\n  }\n\n  render() {\n    return <div ref={this.myRef}>Hello, world!</div>;\n  }\n}\n\nexport default MyComponent;\n```\n\n### Using Refs in Functional Components\n```javascript\n\nimport React, { useRef, useEffect } from \"react\";\n\nfunction MyComponent() {\n  const myRef = useRef(null);\n\n  useEffect(() => {\n    console.log(myRef.current); // Access the DOM element\n  }, []);\n\n  return <div ref={myRef}>Hello, world!</div>;\n}\n\nexport default MyComponent;\n```\n\n### Callback Refs\n```javascript\n\nimport React, { Component } from \"react\";\n\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = null;\n    this.setRef = element => {\n      this.myRef = element;\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.myRef); // Access the DOM element\n  }\n\n  render() {\n    return <div ref={this.setRef}>Hello, world!</div>;\n  }\n}\n\nexport default MyComponent;\n```\n\n### Forwarding Refs\n```javascript\nCopy code\nimport React from \"react\";\n\nconst FancyButton = React.forwardRef((props, ref) => (\n  <button ref={ref} className=\"FancyButton\">\n    {props.children}\n  </button>\n));\n\n// Usage\nconst ref = React.createRef();\n<FancyButton ref={ref}>Click me!</FancyButton>;\n```\n\n### Accessing DOM Elements with Refs\n### Refs are often used to access and interact with DOM elements directly. Here's an example where we focus an input element using a ref:\n\n```javascript\n\nimport React, { useRef, useEffect } from \"react\";\n\nfunction FocusInput() {\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    // Focus the input element when the component mounts\n    inputRef.current.focus();\n  }, []);\n\n  return <input ref={inputRef} type=\"text\" />;\n}\n\nexport default FocusInput;\n```\n\n### Managing Focus with Refs\n### You can also manage focus between multiple elements using refs:\n\n```javascript\n\nimport React, { useRef } from \"react\";\n\nfunction Form() {\n  const firstInputRef = useRef(null);\n  const secondInputRef = useRef(null);\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      secondInputRef.current.focus();\n    }\n  };\n\n  return (\n    <div>\n      <input ref={firstInputRef} type=\"text\" onKeyDown={handleKeyDown} />\n      <input ref={secondInputRef} type=\"text\" />\n    </div>\n  );\n}\n\nexport default Form;\n```"
            }
        ]
    },
    {
        "name": "css3",
        "title": "CSS 3",
        "tags": [
            "web",
            "css",
            "style"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#3473b5",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/css3.svg",
        "intro": "This is a quick reference cheat sheet for CSS goodness, listing selector syntax, properties, units and other useful bits of information.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Introduction \n\nCSS is rich in capabilities and is more than simply laying out pages.\n\n#### External stylesheet\n\n```html \n<link href=\"./path/to/stylesheet/style.css\" rel=\"stylesheet\" type=\"text/css\" />\n```\n\n#### Internal stylesheet\n\n```html\n<style>\n  body {\n    background-color: linen;\n  }\n</style>\n```\n\n#### Inline styles\n\n```html \n<h2 style=\"text-align: center;\">Centered text</h2>\n\n<p style=\"color: blue; font-size: 18px;\">Blue, 18-point text</p>\n```\n\n### Add class\n\n```html\n<div class=\"classname\"></div>\n<div class=\"class1 ... classn\"></div>\n```\n\nSupport multiple classes on one element.\n\n### !important\n\n```css\n.post-title {\n  color: blue !important;\n}\n```\n\nOverrides all previous styling rules.\n\n### Selector\n\n```css\nh1 { }\n#job-title { }\ndiv.hero { }\ndiv > p { }\n```\n\n\n\n### Text color\n\n```css\ncolor: #2a2aff;\ncolor: green;\ncolor: rgb(34, 12, 64, 0.6);\ncolor: hsla(30 100% 50% / 0.6);\n```\n\n\n\n### Background\n\n```css\nbackground-color: blue;\nbackground-image: url(\"nyan-cat.gif\");\nbackground-image: url(\"../image.png\");\n```\n\n\n\n### Font\n\n```css\n.page-title {\n  font-weight: bold;\n  font-size: 30px;\n  font-family: \"Courier New\";\n}\n```\n\n\n\n### Position\n\n```css\n.box {\n  position: relative;\n  top: 20px;\n  left: 20px;\n}\n```\n\nSee also: [Position](https://learn-the-web.algonquindesign.ca/topics/css-layout-cheat-sheet/)\n\n### Animation\n\n```css\nanimation: 300ms linear 0s infinite;\n\nanimation: bounce 300ms linear infinite;\n```\n\n\n\n### Comment\n\n```css\n/* This is a single line comment */\n\n/* This is a \n   multi-line comment */\n```\n\n### Flex layout\n\n```css\ndiv {\n  display: flex;\n  justify-content: center;\n}\ndiv {\n  display: flex;\n  justify-content: flex-start;\n}\n```\n\n | [Flex Tricks](#css-flexbox-tricks)\n\n### Grid layout\n\n```css\n#container {\n  display: grid;\n  grid: repeat(2, 60px) / auto-flow 80px;\n}\n\n#container > div {\n  background-color: #8ca0ff;\n  width: 50px;\n  height: 50px;\n}\n```\n\n\n\n### Variable & Counter\n\n```css\ncounter-set: subsection;\ncounter-increment: subsection;\ncounter-reset: subsection 0;\n\n:root {\n  --bg-color: brown;\n}\nelement {\n  background-color: var(--bg-color);\n}\n```\n\n\n"
            },
            {
                "title": "CSS Selectors",
                "content": "\n### Examples \n\n#### Groups Selector\n\n```css\nh1,\nh2 {\n  color: red;\n}\n```\n\n#### Chaining Selector\n\n```css\nh3.section-heading {\n  color: blue;\n}\n```\n\n#### Attribute Selector\n\n```css\ndiv[attribute=\"SomeValue\"] {\n  background-color: red;\n}\n```\n\n#### First Child Selector\n\n```css\np:first-child {\n  font-weight: bold;\n}\n```\n\n#### No Children Selector\n\n```css\n.box:empty {\n  background: lime;\n  height: 80px;\n  width: 80px;\n}\n```\n\n### Basic\n\n|              |                             |\n| ------------ | --------------------------- |\n| `*`          | All elements                |\n| `div`        | All div tags                |\n| `.classname` | All elements with class     |\n| `#idname`    | Element with ID             |\n| `div,p`      | All divs and paragraphs     |\n| `#idname *`  | All elements inside #idname |\n\nSee also: [Type](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors) / [Class](https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors) / [ID](https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors) / [Universal](https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors) selectors\n\n### Combinators\n\n| Selector        | Description                           |\n| --------------- | ------------------------------------- |\n| `div.classname` | Div with certain classname            |\n| `div#idname`    | Div with certain ID                   |\n| `div p`         | Paragraphs inside divs                |\n| `div > p`       | All p tags<br>_one level deep in div_ |\n| `div + p`       | P tags immediately after div          |\n| `div ~ p`       | P tags preceded by div                |\n\nSee also: [Adjacent](https://developer.mozilla.org/en-US/docs/Web/CSS/Adjacent_sibling_combinator) / [Sibling](https://developer.mozilla.org/en-US/docs/Web/CSS/General_sibling_combinator) / [Child](https://developer.mozilla.org/en-US/docs/Web/CSS/Child_combinator) selectors\n\n### Attribute selectors\n\n|                      |                                    |\n| -------------------- | ---------------------------------- | ---------------------------- |\n| `a[target]`          | With a <yel>target</yel> attribute |\n| `a[target=\"_blank\"]` | Open in new tab                    |\n| `a[href^=\"/index\"]`  | Starts with <yel>/index</yel>      |\n| `[class              | =\"chair\"]`                         | Starts with <yel>chair</yel> |\n| `[class*=\"chair\"]`   | containing <yel>chair</yel>        |\n| `[title~=\"chair\"]`   | Contains the word <yel>chair</yel> |\n| `a[href$=\".doc\"]`    | Ends with <yel>.doc</yel>          |\n| `[type=\"button\"]`    | Specified type                     |\n\nSee also: [Attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors)\n\n### User action pseudo classes\n\n|              |                         |\n| ------------ | ----------------------- |\n| `a:link    ` | Link in normal state    |\n| `a:active  ` | Link in clicked state   |\n| `a:hover   ` | Link with mouse over it |\n| `a:visited ` | Visited link            |\n\n### Pseudo classes\n\n|                   |                                                                                         |\n| ----------------- | --------------------------------------------------------------------------------------- |\n| `p::after`        | Add content after p                                                                     |\n| `p::before`       | Add content before p                                                                    |\n| `p::first-letter` | First letter in p                                                                       |\n| `p::first-line`   | First line in p                                                                         |\n| `::selection`     | Selected by user                                                                        |\n| `::placeholder`   | [Placeholder](https://developer.mozilla.org/en-US/docs/Web/CSS/::placeholder) attribute |\n| `:root`           | Documents root element                                                                  |\n| `:target`         | Highlight active anchor                                                                 |\n| `div:empty`       | Element with no children                                                                |\n| `p:lang(en)`      | P with en language attribute                                                            |\n| `:not(span)`      | Element that's not a span                                                               |\n\n### Input pseudo classes\n\n|                       |                                                                                             |\n| --------------------- | ------------------------------------------------------------------------------------------- |\n| `input:checked`       | Checked inputs                                                                              |\n| `input:disabled`      | Disabled inputs                                                                             |\n| `input:enabled`       | Enabled inputs                                                                              |\n| `input:focus`         | Input has focus                                                                             |\n| `input:in-range`      | Value in range                                                                              |\n| `input:out-of-range`  | Input value out of range                                                                    |\n| `input:valid`         | Input with valid value                                                                      |\n| `input:invalid`       | Input with invalid value                                                                    |\n| `input:optional`      | No required attribute                                                                       |\n| `input:required`      | Input with required attribute                                                               |\n| `input:read-only`     | With readonly attribute                                                                     |\n| `input:read-write`    | No readonly attribute                                                                       |\n| `input:indeterminate` | With [indeterminate](https://developer.mozilla.org/en-US/docs/Web/CSS/:indeterminate) state |\n\n### Structural pseudo classes\n\n|                         |                            |\n| ----------------------- | -------------------------- |\n| `p:first-child`         | First child                |\n| `p:last-child`          | Last child                 |\n| `p:first-of-type`       | First of some type         |\n| `p:last-of-type`        | Last of some type          |\n| `p:nth-child(2)`        | Second child of its parent |\n| `p:nth-child(3n42)`     | Nth-child (an + b) formula |\n| `p:nth-last-child(2)`   | Second child from behind   |\n| `p:nth-of-type(2)`      | Second p of its parent     |\n| `p:nth-last-of-type(2)` | ...from behind             |\n| `p:only-of-type`        | Unique of its parent       |\n| `p:only-child`          | Only child of its parent   |\n"
            },
            {
                "title": "CSS Fonts",
                "content": "\n### Properties \n\n| Property          | Description     |\n| ----------------- | --------------- |\n| `font-family:`    | \\<font> <fontN> |\n| `font-size:`      | \\<size>         |\n| `letter-spacing:` | \\<size>         |\n| `line-height:`    | \\<number>       |\n\n| `font-weight:` | \\<number> / bold / normal |\n| `font-style:` | italic / normal |\n| `text-decoration:` | underline / none |\n\n| `text-align:` | left / right<br>center / justify |\n| `text-transform:` | capitalize / uppercase / lowercase |\n\n\nSee also: [Font](https://developer.mozilla.org/en-US/docs/Web/CSS/font)\n\n### Shorthand \n\n|         | style    | weight | size (required) |     | line-height | family            |\n| ------- | -------- | ------ | --------------- | --- | ----------- | ----------------- |\n| `font:` | `italic` | `400`  | `14px`          | `/` | `1.5`       | `sans-serif`      |\n|         | style    | weight | size (required) |     | line-height | family (required) |\n\n### Example\n\n```css\nfont-family: Arial, sans-serif;\nfont-size: 12pt;\nletter-spacing: 0.02em;\n```\n\n### Case \n\n```css\n/* Hello */\ntext-transform: capitalize;\n\n/* HELLO */\ntext-transform: uppercase;\n\n/* hello */\ntext-transform: lowercase;\n```\n\n### @font-face\n\n```css\n@font-face {\n  font-family: \"Glegoo\";\n  src: url(\"../Glegoo.woff\");\n}\n```\n"
            },
            {
                "title": "CSS Colors",
                "content": "\n### Named color\n\n```css\ncolor: red;\ncolor: orange;\ncolor: tan;\ncolor: rebeccapurple;\n```\n\n### Hexadecimal color\n\n```css\ncolor: #090;\ncolor: #009900;\ncolor: #090a;\ncolor: #009900aa;\n```\n\n### rgb() Colors\n\n```css\ncolor: rgb(34, 12, 64, 0.6);\ncolor: rgba(34, 12, 64, 0.6);\ncolor: rgb(34 12 64 / 0.6);\ncolor: rgba(34 12 64 / 0.3);\ncolor: rgb(34 12 64 / 60%);\ncolor: rgba(34.6 12 64 / 30%);\n```\n\n### HSL Colors\n\n```css\ncolor: hsl(30, 100%, 50%, 0.6);\ncolor: hsla(30, 100%, 50%, 0.6);\ncolor: hsl(30 100% 50% / 0.6);\ncolor: hsla(30 100% 50% / 0.6);\ncolor: hsl(30 100% 50% / 60%);\ncolor: hsla(30.2 100% 50% / 60%);\n```\n\n### Other\n\n```css\ncolor: inherit;\ncolor: initial;\ncolor: unset;\ncolor: transparent;\n\ncolor: currentcolor; /* keyword */\n```\n"
            },
            {
                "title": "CSS Backgrounds",
                "content": "\n### Properties \n\n| Property      | Description   |\n| ------------- | ------------- |\n| `background:` | _(Shorthand)_ |\n\n| `background-color:` |  |\n| `background-image:` | url(...) |\n| `background-position:` | left/center/right<br/>top/center/bottom |\n| `background-size:` | cover X Y |\n| `background-clip:` | border-box<br/>padding-box<br/>content-box |\n| `background-repeat:` | no-repeat<br/>repeat-x<br/>repeat-y |\n| `background-attachment:` | scroll/fixed/local |\n\n\n### Shorthand \n\n|               | color  | image        | positionX | positionY |     | size           | repeat      | attachment |\n| ------------- | ------ | ------------ | --------- | --------- | --- | -------------- | ----------- | ---------- |\n| `background:` | `#ff0` | `url(a.jpg)` | `left`    | `top`     | `/` | `100px` `auto` | `no-repeat` | `fixed;`   |\n| `background:` | `#abc` | `url(b.png)` | `center`  | `center`  | `/` | `cover`        | `repeat-x`  | `local;`   |\n|               | color  | image        | posX      | posY      |     | size           | repeat      | attach..   |\n\n### Examples \n\n```css \nbackground: url(img_man.jpg) no-repeat center;\n\nbackground: url(img_flwr.gif) right bottom no-repeat, url(paper.gif) left top\n    repeat;\n\nbackground: rgb(2, 0, 36);\nbackground: linear-gradient(\n  90deg,\n  rgba(2, 0, 36, 1) 0%,\n  rgba(13, 232, 230, 1) 35%,\n  rgba(0, 212, 255, 1) 100%\n);\n```\n"
            },
            {
                "title": "CSS The Box Model",
                "content": "\n### Maximums/Minimums\n\n```css\n.column {\n  max-width: 200px;\n  width: 500px;\n}\n```\n\nSee also: [max-width](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width) / [min-width](https://developer.mozilla.org/en-US/docs/Web/CSS/min-width) / [max-height](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height) / [min-height](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height)\n\n### Margin / Padding\n\n```css\n.block-one {\n  margin: 20px;\n  padding: 10px;\n}\n```\n\nSee also: [Margin](https://developer.mozilla.org/en-US/docs/Web/CSS/margin) / [Padding](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)\n\n### Box-sizing\n\n```css\n.container {\n  box-sizing: border-box;\n}\n```\n\nSee also: [Box-sizing](https://developer.mozilla.org/en-US/docs/Web/CSS/Box-sizing)\n\n### Visibility\n\n```css\n.invisible-elements {\n  visibility: hidden;\n}\n```\n\nSee also: [Visibility](https://developer.mozilla.org/en-US/docs/Web/CSS/visibility)\n\n### Auto keyword\n\n```css\ndiv {\n  margin: auto;\n}\n```\n\nSee also: [Margin](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)\n\n### Overflow\n\n```css\n.small-block {\n  overflow: scroll;\n}\n```\n\nSee also: [Overflow](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow)\n"
            },
            {
                "title": "CSS Animation",
                "content": "\n### Shorthand {.col-span-5 .secondary}\n\n|              | name     | duration | timing-function | delay   | count      | direction           | fill-mode | play-state |\n| ------------ | -------- | -------- | --------------- | ------- | ---------- | ------------------- | --------- | ---------- |\n| `animation:` | `bounce` | `300ms`  | `linear`        | `100ms` | `infinite` | `alternate-reverse` | `both`    | `reverse`  |\n|              | name     | duration | timing-function | delay   | count      | direction           | fill-mode | play-state |\n\n### Properties \n\n| Property                     | Value                                                  |\n| ---------------------------- | ------------------------------------------------------ |\n| `animation:`                 | _(shorthand)_                                          |\n| `animation-name:`            | \\<name>                                                |\n| `animation-duration:`        | \\<time>ms                                              |\n| `animation-timing-function:` | ease / linear / ease-in / ease-out / ease-in-out       |\n| `animation-delay:`           | \\<time>ms                                              |\n| `animation-iteration-count:` | infinite / \\<number>                                   |\n| `animation-direction:`       | normal / reverse / alternate / alternate-reverse       |\n| `animation-fill-mode:`       | none / forwards / backwards / both / initial / inherit |\n| `animation-play-state:`      | normal / reverse / alternate / alternate-reverse       |\n\n\n\nSee also: [Animation](https://developer.mozilla.org/en-US/docs/Web/CSS/animation)\n\n### Example \n\n```css\n/* @keyframes duration | timing-function | delay |\n   iteration-count | direction | fill-mode | play-state | name */\nanimation: 3s ease-in 1s 2 reverse both paused slidein;\n\n/* @keyframes duration | timing-function | delay | name */\nanimation: 3s linear 1s slidein;\n\n/* @keyframes duration | name */\nanimation: 3s slidein;\n\nanimation: 4s linear 0s infinite alternate move_eye;\nanimation: bounce 300ms linear 0s infinite normal;\nanimation: bounce 300ms linear infinite;\nanimation: bounce 300ms linear infinite alternate-reverse;\nanimation: bounce 300ms linear 2s infinite alternate-reverse forwards normal;\n```\n\n### Javascript Event \n\n```js\n.one('webkitAnimationEnd oanimationend msAnimationEnd animationend')\n```\n"
            },
            {
                "title": "CSS Flexbox",
                "content": "\n### Simple example\n\n```css\n.container {\n  display: flex;\n}\n```\n\n```css\n.container > div {\n  flex: 1 1 auto;\n}\n```\n\n### Container \n\n.container {\n\n```css\ndisplay: flex;\ndisplay: inline-flex;\n```\n\n```css\nflex-direction: row; /* ltr - default */\nflex-direction: row-reverse; /* rtl */\nflex-direction: column; /* top-bottom */\nflex-direction: column-reverse; /* bottom-top */\n```\n\n```css\nflex-wrap: nowrap; /* one-line */\nflex-wrap: wrap; /* multi-line */\n```\n\n```css\nalign-items: flex-start; /* vertical-align to top */\nalign-items: flex-end; /* vertical-align to bottom */\nalign-items: center; /* vertical-align to center */\nalign-items: stretch; /* same height on all (default) */\n```\n\n```css\njustify-content: flex-start; /* [xxx        ] */\njustify-content: center; /* [    xxx    ] */\njustify-content: flex-end; /* [        xxx] */\njustify-content: space-between; /* [x    x    x] */\njustify-content: space-around; /* [ x   x   x ] */\njustify-content: space-evenly; /* [  x  x  x  ] */\n```\n\n}\n\n### Child\n\n.container > div {\n\n```css\n/* This: */\nflex: 1 0 auto;\n\n/* Is equivalent to this: */\nflex-grow: 1;\nflex-shrink: 0;\nflex-basis: auto;\n```\n\n```css\norder: 1;\n```\n\n```css\nalign-self: flex-start; /* left */\nmargin-left: auto; /* right */\n```\n\n}\n"
            },
            {
                "title": "CSS Flexbox Tricks",
                "content": "\n### Vertical center\n\n```css\n.container {\n  display: flex;\n}\n\n.container > div {\n  width: 100px;\n  height: 100px;\n  margin: auto;\n}\n```\n\n### Vertical center (2)\n\n```css\n.container {\n  display: flex;\n\n  /* vertical */\n  align-items: center;\n\n  /* horizontal */\n  justify-content: center;\n}\n```\n\n### Reordering\n\n```css\n.container > .top {\n  order: 1;\n}\n\n.container > .bottom {\n  order: 2;\n}\n```\n\n### Mobile layout\n\n```css\n.container {\n  display: flex;\n  flex-direction: column;\n}\n\n.container > .top {\n  flex: 0 0 100px;\n}\n\n.container > .content {\n  flex: 1 0 auto;\n}\n```\n\nA fixed-height top bar and a dynamic-height content area.\n\n### Table-like \n\n```css\n.container {\n  display: flex;\n}\n\n/* the 'px' values here are just suggested percentages */\n.container > .checkbox {\n  flex: 1 0 20px;\n}\n.container > .subject {\n  flex: 1 0 400px;\n}\n.container > .date {\n  flex: 1 0 120px;\n}\n```\n\nThis creates columns that have different widths, but size accordingly according\nto the circumstances.\n\n### Vertical\n\n```css\n.container {\n  align-items: center;\n}\n```\n\nVertically-center all items.\n\n### Left and right \n\n```css\n.menu > .left {\n  align-self: flex-start;\n}\n.menu > .right {\n  align-self: flex-end;\n}\n```\n"
            },
            {
                "title": "CSS Grid Layout",
                "content": "\n### Grid Template Columns\n\n```css\n#grid-container {\n  display: grid;\n  width: 100px;\n  grid-template-columns: 20px 20% 60%;\n}\n```\n\n### fr Relative Unit\n\n```css\n.grid {\n  display: grid;\n  width: 100px;\n  grid-template-columns: 1fr 60px 1fr;\n}\n```\n\n### Grid Gap\n\n```css\n/*The distance between rows is 20px*/\n/*The distance between columns is 10px*/\n#grid-container {\n  display: grid;\n  grid-gap: 20px 10px;\n}\n```\n\n### CSS Block Level Grid\n\n```css\n#grid-container {\n  display: block;\n}\n```\n\n### CSS grid-row\n\nCSS syntax:\n\n- grid-row: grid-row-start / grid-row-end;\n\n#### Example\n\n```css\n.item {\n  grid-row: 1 / span 2;\n}\n```\n\n### CSS Inline Level Grid\n\n```css\n#grid-container {\n  display: inline-grid;\n}\n```\n\n### minmax() Function\n\n```css \n.grid {\n  display: grid;\n  grid-template-columns: 100px minmax(100px, 500px) 100px;\n}\n```\n\n### grid-row-start & grid-row-end\n\nCSS syntax:\n\n- grid-row-start: auto|row-line;<br>\n- grid-row-end: auto|row-line|span n;\n\n#### Example\n\n```css\ngrid-row-start: 2;\ngrid-row-end: span 2;\n```\n\n### CSS grid-row-gap\n\n```css\ngrid-row-gap: length;\n```\n\nAny legal length value, like px or %. 0 is the default value\n\n### CSS grid-area\n\n```css\n.item1 {\n  grid-area: 2 / 1 / span 2 / span 3;\n}\n```\n\n### Justify Items\n\n```css\n#container {\n  display: grid;\n  justify-items: center;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 1fr 1fr;\n  grid-gap: 10px;\n}\n```\n\n### CSS grid-template-areas\n\n```css\n.item {\n  grid-area: nav;\n}\n.grid-container {\n  display: grid;\n  grid-template-areas:\n    \"nav nav . .\"\n    \"nav nav . .\";\n}\n```\n\n### Justify Self\n\n```css\n#grid-container {\n  display: grid;\n  justify-items: start;\n}\n\n.grid-items {\n  justify-self: end;\n}\n```\n\nThe grid items are positioned to the right (end) of the row.\n\n### Align Items\n\n```css\n#container {\n  display: grid;\n  align-items: start;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 1fr 1fr;\n  grid-gap: 10px;\n}\n```\n"
            },
            {
                "title": "CSS Dynamic Content",
                "content": "\n### Variable\n\nDefine CSS Variable\n\n```css\n:root {\n  --first-color: #16f;\n  --second-color: #ff7;\n}\n```\n\nVariable Usage\n\n```css\n#firstParagraph {\n  background-color: var(--first-color);\n  color: var(--second-color);\n}\n```\n\nSee also: [CSS Variable](https://developer.mozilla.org/en-US/docs/Web/CSS/--*)\n\n### Counter\n\n```css\n/* Set \"my-counter\" to 0 */\ncounter-set: my-counter;\n```\n\n```css\n/* Increment \"my-counter\" by 1 */\ncounter-increment: my-counter;\n```\n\n```css\n/* Decrement \"my-counter\" by 1 */\ncounter-increment: my-counter -1;\n```\n\n```css\n/* Reset \"my-counter\" to 0 */\ncounter-reset: my-counter;\n```\n\nSee also: [Counter set](https://developer.mozilla.org/en-US/docs/Web/CSS/counter-set)\n\n### Using counters\n\n```css\nbody {\n  counter-reset: section;\n}\n\nh3::before {\n  counter-increment: section;\n  content: \"Section.\" counter(section);\n}\n```\n\n```css\nol {\n  counter-reset: section;\n  list-marker-type: none;\n}\n\nli::before {\n  counter-increment: section;\n  content: counters(section, \".\") \" \";\n}\n```\n"
            },
            {
                "title": "Css 3 tricks",
                "content": "\n### Scrollbar smooth\n\n```css\nhtml {\n  scroll-behavior: smooth;\n}\n```\n\n[Click me](#css-getting-started), the page will scroll smoothly to Getting started\n"
            },
            {
                "title": "Modern CSS",
                "content": "\n### container queries(size)\n\n```css\n.element-wrap {\n  container: element / inline-size;\n}\n@container element (min-inline-size: 300px) {\n  .element {\n    display: flex;\n    gap: 1rem;\n  }\n}\n```\n\n### container qeries(style)\n\n```css\n.container {\n  --variant: 1;\n\n  &.variant2 {\n    --variant: 2;\n  }\n}\n\n@container style(--variant: 1) {\n  button {\n  } /* You can't style .container, but can select inside it */\n  .other-things {\n  }\n}\n\n@container style(--variant: 2) {\n  button {\n  }\n  .whatever {\n  }\n}\n```\n\n### container units\n\n- The units are cqw (\u201ccontainer query width\u201d),\n- cqh (\u201ccontainer query height\u201d),\n- cqi (\u201ccontainer query inline\u201d),\n- cqb (\u201ccontainer query block\u201d),\n- cqmin (smaller of cqi and cqb),\n- and cqmax (larger of cqi and cqb)\n\n```css\n.card {\n  padding: 5cqi;\n  font-size: 4cqi;\n  border: 1cqi solid brown;\n  height: 100%;\n}\n\nh2 {\n  font-size: 10cqi;\n  margin-block: 0 3cqi;\n}\n```\n\n### the :has() pseudo selector\n\n```css\nfigure:has(figcaption) {\n  border: 1px solid black;\n  padding: 0.5rem;\n}\n```\n\n### nesting\n\n```css\n.cards {\n  .card {\n    & .card-description {\n      color: blue;\n    }\n    & .card-title {\n      color: red;\n    }\n  }\n}\n```\n\n###\n\n### scoping\n\n```css\n@scope {\n  :scope {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 1rem;\n    padding: 1rem;\n    border: 1px solid black;\n  }\n  .card {\n    padding: 1rem;\n    border: 1px solid black;\n    background: lightgray;\n    h2 {\n      margin: 0 0 1rem 0;\n    }\n  }\n}\n```\n\n### cascade layers\n\n```css\n/* Specify the order to apply styles in cascade */\n@layer legacyCard, newCard;\n\n/* Imagine you have a lot of styles */\n@layer newCard {\n  .card {\n    background-color: red;\n  }\n}\n@layer legacyCard {\n  .card {\n    background-color: green;\n  }\n}\n```\n\n### logical properties\n\n```css\nbutton {\n  background-color: #4caf50;\n  border: none;\n  color: white;\n  padding: 0.5rem 1.5rem;\n  text-decoration: none;\n  font: inherit;\n  border-radius: 4px;\n  .icon {\n    position: relative;\n    top: 0.125em;\n    fill: white;\n    width: 1em;\n    aspect-ratio: 1;\n    margin-inline-end: 0.25rem;\n  }\n}\n```\n\n### p3 colors\n\n```html\n<div class=\"container\">\n  <div class=\"swatch\">\n    <style contenteditable>\n      @scope {\n        :scope {\n          background-color: color(display-p3 1 0.5 0);\n        }\n      }\n    </style>\n  </div>\n  <div class=\"swatch\">\n    <style contenteditable>\n      @scope {\n        :scope {\n          background-color: oklch(61.88% 0.286 342.4);\n        }\n      }\n    </style>\n  </div>\n  <div class=\"swatch\">\n    <style contenteditable>\n      @scope {\n        :scope {\n          background-color: oklab(0.73 0.15 0.16);\n        }\n      }\n    </style>\n  </div>\n\n  <div class=\"swatch\">\n    <style contenteditable>\n      @scope {\n        :scope {\n          background-image: linear-gradient(to right in oklch, red, blue);\n        }\n      }\n    </style>\n  </div>\n\n  <div class=\"swatch\">\n    <style contenteditable>\n      @scope {\n        :scope {\n          background-image: linear-gradient(to right in oklab, red, blue);\n        }\n      }\n    </style>\n  </div>\n\n  <div class=\"swatch\">\n    <style contenteditable>\n      @scope {\n        :scope {\n          background-image: linear-gradient(to right in srgb, red, blue);\n        }\n      }\n    </style>\n  </div>\n</div>\n```\n\n### color mixing\n\n```css\n.swatch {\n  color: white;\n  width: 100px;\n  aspect-ratio: 1;\n  display: grid;\n  place-items: center;\n  text-align: center;\n\n  &:nth-child(1) {\n    background-color: var(--bg);\n  }\n  &:nth-child(2) {\n    background-color: color-mix(in oklch, var(--bg), black 30%);\n  }\n  &:nth-child(3) {\n    background-color: color-mix(in oklch, var(--bg), white 30%);\n  }\n}\n```\n\n### margin trim\n\n```css\n.container {\n  /* prevent \"extra\" margin at the end of the element */\n  margin-trim: block-end;\n\n  /* an element like this might be the culprit, but it could be anything */\n  > p {\n    margin-block-end: 1rem;\n  }\n}\n```\n\n### text wrapping\n\n```css\n.balance {\n  text-wrap: balance;\n}\n.pretty {\n  text-wrap: pretty;\n}\n\nhtml {\n  font-family: system-ui, sans-serif;\n}\n\nmain {\n  max-inline-size: 60ch;\n  margin-inline: auto;\n}\n```\n\n### subgrid\n\n```css\n.grid {\n  display: grid;\n  grid-template-columns: repeat(9, 1fr);\n  grid-template-rows: repeat(4, minmax(100px, auto));\n}\n\n.item {\n  display: grid;\n  grid-column: 2 / 7;\n  grid-row: 2 / 4;\n  grid-template-columns: subgrid;\n  grid-template-rows: repeat(3, 80px);\n}\n\n.subitem {\n  grid-column: 3 / 6;\n  grid-row: 1 / 3;\n}\n```\n"
            },
            {
                "title": "Also see",
                "content": "\n- [frontendmasters.com ](https://frontendmasters.com/blog/what-you-need-to-know-about-modern-css-spring-2024-edition/)\n- [CSS selectors cheatsheet](https://frontend30.com/css-selectors-cheatsheet/) _(frontend30.com)_\n- [MDN: Using CSS flexbox](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes)\n- [Ultimate flexbox cheatsheet](http://www.sketchingwithcss.com/samplechapter/cheatsheet.html)\n- [GRID: A simple visual cheatsheet](http://grid.malven.co/)\n- [CSS Tricks: A Complete Guide to Grid](https://css-tricks.com/snippets/css/complete-guide-grid/)\n- [Browser support](https://caniuse.com/#feat=css-grid)"
            }
        ]
    },
    {
        "name": "sass",
        "title": "Sass",
        "tags": [
            "css"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#ba6993",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/sass.svg",
        "intro": "This is a quick reference cheat sheet that lists the most useful features of [SASS](https://sass-lang.com).\n",
        "sections": [
            {
                "title": "Sass Basics",
                "content": "\n### Introduction\n\n- [Documentation](https://sass-lang.com/documentation) _(sass-lang.com)_\n- [Learn X in Y minutes](https://learnxinyminutes.com/docs/sass/) _(learnxinyminutes.com)_\n\n### Variables\n\n```scss\n$defaultLinkColor: #46eac2;\n\na {\n  color: $defaultLinkColor;\n}\n```\n\n### String interpolation\n\n```scss\n$wk: -webkit-;\n\n.rounded-box {\n  #{$wk}border-radius: 4px;\n}\n```\n\n### Comments\n\n```scss\n/*\n Block comments\n Block comments\n Block comments\n*/\n\n// Line comments\n```\n\n### Mixins\n\n```scss\n@mixin heading-font {\n  font-family: sans-serif;\n  font-weight: bold;\n}\nh1 {\n  @include heading-font;\n}\n```\n\n\n\n### Nesting \n\n```scss\n.markdown-body {\n  a {\n    color: blue;\n    &:hover {\n      color: red;\n    }\n  }\n}\n```\n\n#### to properties\n\n```scss\ntext: {\n  // like text-align: center\n  align: center;\n  // like text-transform: uppercase\n  transform: uppercase;\n}\n```\n\n### Extend\n\n```scss\n.button {\n    \u00b7\u00b7\u00b7\n}\n```\n\n```scss\n.push-button {\n  @extend .button;\n}\n```\n\n### @import\n\n```scss\n@import \"./other_sass_file\";\n@import \"/code\", \"lists\";\n\n// Plain CSS @imports\n@import \"theme.css\";\n@import url(theme);\n```\n\nThe `.sass` or `.sass` extension is optional.\n"
            },
            {
                "title": "Sass Mixins",
                "content": "\n### Parameters\n\n```scss\n@mixin font-size($n) {\n  font-size: $n * 1.2em;\n}\n```\n\n```scss\nbody {\n  @include font-size(2);\n}\n```\n\n### Default values\n\n```scss\n@mixin pad($n: 10px) {\n  padding: $n;\n}\n```\n\n```scss\nbody {\n  @include pad(15px);\n}\n```\n\n### Default variable\n\n```scss\n$default-padding: 10px;\n\n@mixin pad($n: $default-padding) {\n  padding: $n;\n}\n\nbody {\n  @include pad(15px);\n}\n```\n"
            },
            {
                "title": "Sass Color functions",
                "content": "\n### rgba\n\n```scss\nrgb(100, 120, 140)\nrgba(100, 120, 140, .5)\nrgba($color, .5)\n```\n\n### Mixing\n\n```scss\nmix($a, $b, 10%)   // 10% a, 90% b\n```\n\n### Modifying HSLA\n\n```scss\ndarken($color, 5%)\nlighten($color, 5%)\n```\n\n```scss\nsaturate($color, 5%)\ndesaturate($color, 5%)\ngrayscale($color)\n```\n\n```scss\nadjust-hue($color, 15deg)\ncomplement($color)    // like adjust-hue(_, 180deg)\ninvert($color)\n```\n\n```scss\nfade-in($color, .5)   // aka opacify()\nfade-out($color, .5)  // aka transparentize()\nrgba($color, .5)      // sets alpha to .5\n```\n\n### Getting individual values\n\n#### HSLA\n\n```scss\nhue($color)         // 0deg..360deg\nsaturation($color)  // 0%..100%\nlightness($color)   // 0%..100%\nalpha($color)       // 0..1 (aka opacity())\n```\n\n#### RGB\n\n```scss\nred($color)         // 0..255\ngreen($color)\nblue($color)\n```\n\nSee: [hue()](http://sass-lang.com/documentation/Sass/Script/Functions.html#hue-instance_method),\n[red()](http://sass-lang.com/documentation/Sass/Script/Functions.html#red-instance_method)\n\n### Adjustments\n\n```scss\n// Changes by fixed amounts\nadjust-color($color, $blue: 5)\nadjust-color($color, $lightness: -30%) // darken(_, 30%)\nadjust-color($color, $alpha: -0.4)     // fade-out(_, .4)\nadjust-color($color, $hue: 30deg)      // adjust-hue(_, 15deg)\n```\n\n```scss\n// Changes via percentage\nscale-color($color, $lightness: 50%)\n```\n\n```scss\n// Changes one property completely\nchange-color($color, $hue: 180deg)\nchange-color($color, $blue: 250)\n```\n\nSupported: `$red`, `$green`, `$blue`, `$hue`, `$saturation`, `$lightness`, `$alpha`\n"
            },
            {
                "title": "Sass Other functions",
                "content": "\n### Strings\n\n```scss\nunquote('hello')\nquote(hello)\n```\n\n```scss\nto-upper-case(hello)\nto-lower-case(hello)\n```\n\n```scss\nstr-length(hello world)\nstr-slice(hello, 2, 5)     // \"ello\" - it's 1-based, not 0-based\nstr-insert(\"abcd\", \"X\", 1) // \"Xabcd\"\n```\n\n### Units\n\n```scss\nunit(3em)        // 'em'\nunitless(100px)  // false\n```\n\n### Numbers\n\n```scss\nfloor(3.5)\nceil(3.5)\nround(3.5)\nabs(3.5)\n```\n\n```scss\nmin(1, 2, 3)\nmax(1, 2, 3)\n```\n\n```scss\npercentage(.5)   // 50%\nrandom(3)        // 0..3\n```\n\n### Misc\n\n```scss\nvariable-exists(red)    // checks for $red\nmixin-exists(red-text)  // checks for @mixin red-text\nfunction-exists(redify)\n```\n\n```scss\nglobal-variable-exists(red)\n```\n\n```scss\nselector-append('.menu', 'li', 'a')   // .menu li a\nselector-nest('.menu', '&:hover li')  // .menu:hover li\nselector-extend(...)\nselector-parse(...)\nselector-replace(...)\nselector-unify(...)\n```\n"
            },
            {
                "title": "Sass Feature checks",
                "content": "\n### Feature check\n\n```scss\nfeature-exists(global-variable-shadowing)\n```\n\n### Features\n\n- global-variable-shadowing\n- extend-selector-pseudoclass\n- units-level-3\n- at-error\n"
            },
            {
                "title": "Sass Loops",
                "content": "\n### For loops\n\n```scss\n@for $i from 1 through 4 {\n  .item-#{$i} {\n    left: 20px * $i;\n  }\n}\n```\n\n### Each loops (simple)\n\n```scss\n$menu-items: home about contact;\n\n@each $item in $menu-items {\n  .photo-#{$item} {\n    background: url(\"#{$item}.jpg\");\n  }\n}\n```\n\n### Each loops (nested)\n\n```scss\n$backgrounds: (home, \"home.jpg\"), (about, \"about.jpg\");\n\n@each $id, $image in $backgrounds {\n  .photo-#{$id} {\n    background: url($image);\n  }\n}\n```\n\n### While loops\n\n```scss\n$i: 6;\n@while $i > 0 {\n  .item-#{$i} {\n    width: 2em * $i;\n  }\n  $i: $i - 2;\n}\n```\n"
            },
            {
                "title": "Sass Other features",
                "content": "\n### Conditionals \n\n```scss\n@if $position == \"left\" {\n  position: absolute;\n  left: 0;\n} @else if $position == \"right\" {\n  position: absolute;\n  right: 0;\n} @else {\n  position: static;\n}\n```\n\n### Interpolation\n\n```scss\n.#{$klass} { ... }      // Class\ncall($function-name)    // Functions\n\n@media #{$tablet}\nfont: #{$size}/#{$line-height}\nurl(\"#{$background}.jpg\")\n```\n\n### Lists\n\n```scss\n$list: (a b c);\n\nnth($list, 1)  // starts with 1\nlength($list)\n\n@each $item in $list { ... }\n```\n\n### Maps \n\n```scss\n$map: (key1: value1, key2: value2, key3: value3);\n\nmap-get($map, key1)\n```"
            }
        ]
    },
    {
        "name": "hook",
        "title": "Hook",
        "tags": [
            "script",
            "interpret"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#1131e2",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/hook.svg",
        "intro": "The [Hook](https://github.com/hook-lang/hook/) cheat sheet is a one-page reference sheet for the Hook programming language.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Introduction\n\n- [GitHub](https://github.com/hook-lang/hook)\n- [Playground](https://hook-lang.github.io/hook-playground)\n- [Examples](https://github.com/hook-lang/hook/tree/main/examples)\n- [VSCode Extension](https://marketplace.visualstudio.com/items?itemName=fabiosvm.hook)\n\n### What does Hook look like?\n\n```rs\nfn factorial(n) {\n  if (n == 0)\n    return 1;\n  return n * factorial(n - 1);\n}\n```\n\nHook features a modern syntax similar to `C`.\n\n### Hello, world!\n\n```js\nprintln(\"Hello, World!\");\n// Hello, World!\n```\n\nThe `Hello, World!` program in Hook.\n\n### Installing with Homebrew\n\n```text\nbrew tap hook-lang/hook\nbrew install hook\nhook --help\n```\n\nThe interpreter is available on [`Homebrew`](https://brew.sh).\n\n### Installing on Windows \n\n```text\ncd %tmp%\ncurl -sSLO https://raw.githubusercontent.com/hook-lang/hook/main/scripts/install.bat\ninstall\n```\n\nThis is how you can install it on `Windows`.\n"
            },
            {
                "title": "Types and Values",
                "content": "\n### Basic Types\n\n|          |           |\n| -------- | :-------- |\n| `Nil`    | `Bool`    |\n| `Number` | `String`  |\n| `Range`  | `Array`   |\n| `Record` | `Closure` |\n\nList of basic types.\n\n### Bool\n\n```js\nlet x = true;\nlet y = false;\n```\n\nBool is a boolean type. So, it can be `true` or `false`.\n\n### Numbers\n\n```js\nlet x = 0;\nlet degree = 45; // integer number\nlet pi = 3.14; // floating-point number\n```\n\nNumbers can be integers or floating-point.\n\n### Strings\n\n```js\nlet empty = \"\";\n\nlet name = \"John\";\n\nlet message = 'Hello, \"John\"!';\n```\n\nStrings can be single or double-quoted.\n\n### Ranges\n\n```js\nlet range = 1..5;\n\nprintln(range);\n// 1..5\n```\n\nRanges are a sequence of integers.\n\n### Arrays\n\n```js\nlet fruits = [\"apple\", \"banana\", \"cherry\"];\n\nprintln(fruits);\n// [\"apple\", \"banana\", \"cherry\"]\n```\n\nArrays are a sequence of elements.\n\n### Records\n\n```js\nlet p = { x: 5, y: 10 };\n\nprintln(p);\n// {x: 5, y: 10}\n```\n\nRecords maps fields to values.\n\n### The **nil** value\n\n```swift\nlet x = nil;\nvar y;\n```\n\n```js\nprintln(x); // nil\nprintln(y); // nil\n```\n\n`nil` is the absence of a value.\n\n### Falsy values\n\n```swift\nif (nil) \"true\" else \"false\";   // false\nif (false) \"true\" else \"false\"; // false\nif (true) \"true\" else \"false\";  // true\nif (0) \"true\" else \"false\";     // true\nif (1) \"true\" else \"false\";     // true\nif (\"\") \"true\" else \"false\";    // true\nif ([]) \"true\" else \"false\";    // true\nif ({}) \"true\" else \"false\";    // true\n```\n\nJust `nil` and `false` are falsy.\n"
            },
            {
                "title": "Syntax",
                "content": "\n### Comments\n\n```js\n// This is a single-line comment.\n\n// And this is\n// a multi-line\n// comment. ;)\n```\n\nHook supports single-line comments only. Sorry!\n\n### Semi-colons \n\n\n```js\nprintln(1) ; println(2) ; println(3) ;\nprintln(4) ; println(5)\n; println(6) ;\n;                                      // error: unexpected token `;`\n```\n\nSemi-colons are required and empty statements are not allowed.\n\n### Blocks\n\n```js\n{\n  println(\"Hello\");\n  {\n    println(\"World\");\n  }\n}\n```\n\nBlocks are used to define a scope.\n\n### Reserved words\n\n|         |          |            |         |\n| ------- | :------- | :--------- | :------ |\n| `as`    | `break`  | `continue` | `do`    |\n| `else`  | `false`  | `fn`       | `for`   |\n| `from`  | `if`     | `import`   | `in`    |\n| `inout` | `let`    | `loop`     | `match` |\n| `nil`   | `return` | `struct`   | `trait` |\n| `true`  | `var`    | `while`    |         |\n\nThere are few reserved words.\n\n### Identifiers\n\n```php\nvar lowercase;\nvar CAPS_LOCK;\nvar camelCase;\nvar PascalCase;\nvar snake_case;\nvar _123;\n```\n\nIdentifiers are case-sensitive.\n"
            },
            {
                "title": "Variables",
                "content": "\n### Variables\n\n```js\nvar x; // x contains nil\nx = 5; // now, x contains a number\nx = \"foo\"; // a string\n\nprintln(x);\n```\n\nValues have types, but variables don't.\n\n### Immutable variables \n\n```js\nlet x = 5;\n\nx = 10; // error: cannot assign to immutable variable `x`\n\nlet y; // error: unexpected token `;`\n```\n\nImmutable variables must be initialized when declared.\n\n### Scopes \n\n```js\nlet x = 5;\n{\n  let y = 15;\n  println(x); // 10\n  println(y); // 15\n}\nprintln(x); // 5\nprintln(y); // error: variable `y` is used but not defined\n```\n\nWhen a heap-allocated variable goes out of scope, it is automatically deallocated.\n\n### Shadowing\n\n```js\nlet x = 5;\n{\n  let x = 10; // shadows the outer `x`\n  println(x); // 10\n}\nprintln(x); // 5\n```\n\nVariables can be shadowed.\n"
            },
            {
                "title": "Operators and Expressions",
                "content": "\n### Arithmetic\n\n```js\nprintln(5 + 10); // 15\nprintln(5 - 10); // -5\nprintln(5 * 10); // 50\nprintln(5 / 10); // 0.5\nprintln(5 % 10); // 5\nprintln(-5); // -5\n```\n\nThe basic arithmetic operators.\n\n### Comparison\n\n```js\nprintln(5 == 10); // false\nprintln(5 != 10); // true\nprintln(5 < 10); // true\nprintln(5 > 10); // false\nprintln(5 <= 10); // true\nprintln(5 >= 10); // false\n```\n\nThe comparison operators.\n\n### Logical\n\n```js\nprintln(true && false); // false\nprintln(true || false); // true\nprintln(!true); // false\n```\n\nThe logical operators.\n\n### Bitwise and shift\n\n```js\nprintln(5 & 10); // 0\nprintln(5 | 10); // 15\nprintln(5 ^ 10); // 15\nprintln(~5); // -6\nprintln(5 << 1); // 10\nprintln(5 >> 1); // 2\n```\n\nThe bitwise and shift operators.\n\n### Assignments\n\n```js\nvar x = 5; // 5\nx += 10; // 15\nx -= 10; // 5\nx *= 10; // 50\nx /= 10; // 5\nx %= 10; // 5\nx &= 10; // 0\nx |= 10; // 10\nx ^= 5; // 15\nx <<= 5; // 480\nx >>= 5; // 15\nx++; // 16\nx--; // 15\n```\n\nThe assignment operators.\n\n### Teh ternary operator\n\n```js\nlet x = 5;\nlet y = if (x > 5) 10 else 20;\n\nprintln(y);\n// 20\n```\n\nIn Hook, the ternary operator is `if else`.\n"
            },
            {
                "title": "Branching",
                "content": "\n### If\n\n```js\nlet x = 10;\n\nif (x > 5) {\n  println(\"x is greater than 5\");\n}\n// x is greater than 5\n```\n\nThe `if` statement.\n\n### If else\n\n```js\nlet x = 11;\n\nif (x == 5) {\n  println(\"x is 5\");\n} else if (x == 10) {\n  println(\"x is 10\");\n} else {\n  println(\"x is neither 5 nor 10\");\n}\n// x is neither 5 nor 10\n```\n\nThe `if else` statement.\n\n### Match\n\n```rs\nlet x = 5;\n\nmatch (x) {\n  1 => println(\"one\");\n  2 => println(\"two\");\n  3 => println(\"three\");\n  _ => println(\"other\");\n}\n// other\n```\n\nThe `match` statement.\n"
            },
            {
                "title": "Looping",
                "content": "\n### While\n\n```js\nvar x = 0;\n\nwhile (x < 5) {\n  print(x);\n  x += 1;\n}\n// 01234\n```\n\nThe `while` loop.\n\n### Do while\n\n```js\nvar x = 0;\n\ndo {\n  print(x);\n  x += 1;\n} while (x < 5);\n// 01234\n```\n\nThe `do while` loop.\n\n### For\n\n```js\nfor (var i = 0; i < 5; i++) {\n  print(i);\n}\n// 01234\n```\n\nThe classic `for` loop.\n\n### Loop\n\n```rs\nloop {\n  println(\"Press Ctrl+C to stop\");\n}\n```\n\nThe unconditional `loop`.\n\n### Break\n\n```js\nvar i = 0;\n```\n\n```rs\nloop {\n  if (i == 5) break;\n\n  print(i);\n  i += 1;\n}\n// 01234\n```\n\nUse `break` to exit a loop.\n\n### Continue\n\n```js\nvar i = 0;\n```\n\n```rs\nloop {\n  i += 1;\n  if (i % 2 == 0) continue;\n\n  print(i);\n\nif (i == 5) break;\n}\n// 135\n```\n\nUse `continue` to skip the rest of the loop body.\n"
            },
            {
                "title": "Strings",
                "content": "\n### Indexing a string\n\n```js\nlet s = \"Hello\";\n\nprintln(s[0]); // H\nprintln(s[1]); // e\nprintln(s[4]); // o\n```\n\nIndexing a string returns a 1-character string.\n\n### Slicing a string\n\n```js\nlet s = \"Hello, World!\";\n\nprintln(s[0..5]);        // Hello,\nprintln(s[7..12]);       // World!\n```\n\nPass a range to slice a string.\n\n### Concatening strings\n\n```js\nlet greeting = \"Hi\" + \" there!\";\n\nprintln(greeting);\n// Hi there!\n```\n\nUse the `+` operator to concatenate strings.\n"
            },
            {
                "title": "Arrays",
                "content": "\n### Indexing an array\n\n```js\nlet a = [1, 2, 3];\n\nprintln(a[0]); // 1\nprintln(a[1]); // 2\nprintln(a[2]); // 3\n```\n\nIndexing an array returns an element.\n\n### Slicing an array\n\n```js\nlet a = [1, 2, 3, 4];\n\nprintln(a[0..2]);            // [1, 2, 3]\nprintln(a[1..3]);            // [2, 3, 4]\nprintln(a[2 .. len(a) - 1]); // [3, 4]\n```\n\nArrays are zero-indexed.\n\n### Appending an element\n\n```js\nvar a = [1, 2];\n\na[] = 3;\n\nprintln(a);\n// [1, 2, 3]\n```\n\nArrays are mutable. Use `[]` to append an element.\n\n### Element assignment\n\n```js\nvar a = [1, 2, 3];\n\na[0] = 4;\n\nprintln(a);\n// [4, 2, 3]\n```\n\nUpdate an element in an array.\n\n### Concatening arrays\n\n```js\nlet a = [1, 2];\nlet b = [3];\nlet c = a + b;\n\nprintln(c);\n// [1, 2, 3]\n```\n\nUse the `+` operator to concatenate arrays.\n\n### Subtracting arrays\n\n```js\nlet a = [1, 2, 2, 3];\nlet b = [2];\nlet c = a - b;\n\nprintln(c);\n// [1, 3]\n```\n\nGet the difference between two arrays.\n"
            },
            {
                "title": "Functions and Closures",
                "content": "\n### Function declaration\n\n```rs\nfn sum(a, b) {\n  return a + b;\n}\n\nprintln(sum(5, 10));\n// 15\n```\n\nFunctions are first-class citizens.\n\n### Function call\n\n```rs\nfn greet(name) {\n  println(\"Hi, \" + name + \"!\");\n}\n\ngreet(\"John\", \"Doe\");\n// Hi, John!\n```\n\nThe number of arguments is adjusted.\n\n### Anonymous functions\n\n```js\nlet sum = |a, b| {\n  return a + b;\n};\n\nprintln(sum(5, 10));\n// 15\n```\n\nAnonymous functions are also supported.\n\n### Closures\n\n```js\nlet pi = 3.14;\n```\n\n```rs\nfn area(r) {\n  return pi * r * r;\n}\n\nprintln(area(5));\n// 78.5\n```\n\nClosures in Hook capture values only.\n\n### Higher-order functions\n\n```rs\nfn apply(f, x) {\n  return f(x);\n}\n\nfn double(x) {\n  return x * 2;\n}\n\nprintln(apply(double, 5));\n// 10\n```\n\nFunctions can be passed as arguments or returned.\n\n### Syntax sugar for functions\n\n```rs\nfn factorial(n) =>\n  if (n == 0) 1\n  else n * factorial(n - 1);\n\nprintln(factorial(5));\n// 120\n```\n\nUse `=>` when the body is a single expression.\n\n### Recursion\n\n```rs\nfn fib(n) {\n  if (n < 2)\n    return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\nprintln(fib(10));\n// 55\n```\n\nRecursion is supported.\n\n### Built-in functions\n\n```js\nprintln(type(5));\n// number\nprintln(\"1\" + to_string(2));\n// 12\nprintln(len(\"foo\"));\n// 3\n```\n\nThere are many built-in functions.\n\n### More built-in functions\n\n|             |           |             |\n| ----------- | :-------- | :---------- |\n| `print`     | `println` | `type`      |\n| `is_nil`    | `is_bool` | `to_number` |\n| `to_string` | `hex`     | `len`       |\n| `exit`      | `assert`  | `panic`     |\n\nSee: [Built-in Functions](https://github.com/hook-lang/hook/blob/main/docs/built-in.md)\n"
            },
            {
                "title": "Structs",
                "content": "\n### Structs\n\n```rs\nstruct Point {\n  x, y\n}\n```\n\n```js\nlet p = Point { 5, 10 };\n\nprintln(p);\n// {x: 5, y: 10}\n```\n\nA struct is a prototype for a record.\n\n### Accessing fields\n\n```js\nprintln(p.x); // 5\nprintln(p.y); // 10\n```\n\nUse `.` to access a field in a record.\n\n### Field assignment\n\n```js\np.x = 10;\np.y = 20;\n\nprintln(p);\n// {x: 10, y: 20}\n```\n\nUpdate a value of a field in a record.\n"
            },
            {
                "title": "Destructuring",
                "content": "\n### Destructuring an array\n\n```js\nlet a = [1, 2];\nlet [x, y] = a;\n\nprintln(x); // 1\nprintln(y); // 2\n```\n\nVaruables are declared and assigned.\n\n### Destructuring a record\n\n```js\nlet p = { x: 5, y: 10 };\nlet { x } = p;\n\nprintln(x);\n// 5\n```\n\nUse `{}` to destructure a record.\n\n### Placeholder\n\n```js\nlet a = [1, 2];\nlet [x] = a;\nlet [_, y] = a;\n\nprintln(x); // 1\nprintln(y); // 2\n```\n\nUse `_` skip leading or middle elements.\n"
            },
            {
                "title": "Modularity",
                "content": "\n### Importing a module\n\n```js\nimport math;\n```\n\n```js\nprintln(math.sqrt(25));\n// 5\n```\n\nUse `import` to bring a module into scope.\n\n### Exporting symbols\n\n```rs\n// my_module.hk\nfn useful_fn() {\n  return \"Nothing\";\n}\n\nreturn { useful: useful_fn };\n```\n\nReturn a record with the symbols to export.\n\n### Importing local modules\n\n```python\nimport \"./my_module.hk\" as my;\n```\n\n```js\nprintln(my.useful());\n// Nothing\n```\n\nSpecify the path to the local module.\n\n### Selective import\n\n```js\nimport { pow, sqrt } from math;\n\nlet [ b, c ] = [ 4, 3 ];\nlet a = sqrt(pow(b, 2) + pow(c, 2));\n\nprintln(a);\n// 5\n```\n\nUse `{}` to import specific symbols.\n\n### Core modules\n\n|            |          |        |           |\n| ---------- | :------- | :----- | :-------- |\n| `math`     | `os`     | `io`   | `numbers` |\n| `strings`  | `arrays` | `utf8` | `hashing` |\n| `encoding` | `socket` | `json` | `lists`   |\n\nSee: [Core Modules](https://github.com/hook-lang/hook/blob/main/docs/core-modules.md)\n\n### Extension modules\n\n|           |           |         |           |\n| --------- | :-------- | :------ | :-------- |\n| `bigint`  | `crypto`  | `curl`  | `fastcgi` |\n| `geohash` | `leveldb` | `mysql` | `redis`   |\n| `regex`   | `sqlite`  | `uuid`  | `zeromq`  |\n\nThis is a list of extension modules.\n\n### **io** module\n\n```js\nimport { stderr, writeln } from io;\n\nwriteln(stderr, \"Something went wrong\");\n// Something went wrong\n```\n\nPrinting to `stderr` using `io` module.\n\n### **hashing** module\n\n```python\nimport hashing as h;\n```\n\n```js\nlet d = h.sha256(\"Hello, world!\");\n\nprintln(hex(d));\n// 315f5bdb76d078c43b8ac0064e4a...\n```\n\n`hashing` module provides hash functions.\n\n### **json** module\n\n```js\nimport json;\n```\n\n```js\nlet j = '{\"x\": 1, \"y\": 2}';\nlet p = json.decode(j);\n\nprintln(p.x); // 1\n\nlet k = json.encode(p);\nprintln(type(k)); // string\n```\n\nUse `json` module for working with JSON.\n"
            },
            {
                "title": "Error Handling",
                "content": "\n### Errors \n\n```js\nprintln(to_int(\"foo\"));\n\n// runtime error: type error: argument #1 is not a convertible string\n//   at to_int() in <native>\n//   at main() in example.hk:1\n```\n\nHook uses panic mode for error handling. When an error occurs, the interpreter stops.\n\n### Syntax error\n\n```js\nprintln(\"Hello, World!\");\n\n// syntax error: unexpected end of file\n//   at main() in example.hk:1,25\n```\n\nHook has a strict syntax.\n\n### Panic\n\n```js\npanic(\"Something went wrong\");\n\n// panic: Something went wrong\n//   at main() in example.hk:1\n```\n\nUse the `panic` built-in function to raise an error.\n\n### Assert \n\n```js\nassert(5 > 10, \"5 is not greater than 10\");\n\n// assert: 5 is not greater than 10\n//   at main() in example.hk:1\n```\n\nUse the `assert` built-in function to check a condition.\n\n### Returning errors \n\n```rs\nfn divide(a, b) {\n  if (b == 0)\n    return [nil, \"division by zero\"];\n  return a / b;\n}\n\nif (let [ok, err] = divide(5, 0); ok) {\n  println(ok);\n} else {\n  println(err);\n}\n// division by zero\n```\n\nUse a pair to return a value and an error.\n\n### Passing errors\n\n```rs\nif (let [ok, err] = divide(5, 0); err) {\n  return [nil, err];\n}\n```\n\nPass an error without handling it."
            }
        ]
    },
    {
        "name": "nim",
        "title": "Nim",
        "tags": [],
        "categories": [
            "Programming"
        ],
        "background": "#eed547",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/nim.svg",
        "intro": "The Nim quick reference cheat sheet that aims at providing help on writing basic syntax and methods.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Helloworld.nim\n\n```nim\necho \"Hello World!\"\n#---------------------------#\n# This is a comment\necho \"What's your name? \"\nvar name: string = readLine(stdin)\necho \"Hi, \", name, \"!\"\n```\n\n#### Compiling and Running\n\n```shell\n$ nim c helloworld.nim\n# if os is windows then\n$ helloworld.exe\n# if os is linux then\n$ ./Hello_World\n# output\nHello, World!\n\n# There is also a possibility\n# to both compile and run the\n# program with just one command.\n# We need to type:\n$ nim c -r helloworld.nim\n\n```\n\n### comment\n\n```nim\n# This is a comment\n\n\n#[\n  This is a multiline comment.\n  In Nim, multiline comments can be nested, beginning with #[\n  ... and ending with ]#\n]#\n\n```\n\n### Variable declaration\n\n```nim\n\nvar\n  letter: char = 'n'\n  lang = \"N\" & \"im\"\n  nLength: int = len(lang)\n  boat: float\n  truth: bool = false\n  b = 7\n  c = -11\n  d = \"Hello\"\n  e = '!'\n```\n\n### Let\n\n```nim\n# Use let to declare and bind variables\nlet\n  legs = 400\n #legs is immutable.\n  arms = 2_000\n  # are ignored and are useful for long numbers.\n  aboutPi = 3.15\n  let input = readLine(stdin)  # works\n```\n\n### Const\n\n```nim\n# Constants are computed at compile\nconst\n  debug = true\n   # performance and is useful in compile time expressions.\n  compileBadCode = false\n```\n\nBasic data types\n\n---\n\n### Integers\n\n```nim\net\n  a = 11\n  b = 4\n\necho \"a + b = \", a + b\necho \"a - b = \", a - b\necho \"a * b = \", a * b\necho \"a / b = \", a / b\necho \"a div b = \", a div b\necho \"a mod b = \", a mod b\n#output\n#a + b = 15\n#a - b = 7\n#a * b = 44\n#a / b = 2.75\n#a div b = 2\n#a mod b = 3\n```\n\n### Floats\n\n```nim\nlet\n  c = 6.75\n  d = 2.25\n\necho \"c + d = \", c + d\necho \"c - d = \", c - d\necho \"c * d = \", c * d\necho \"c / d = \", c / d\n#output\n#c + d = 9.0\n#c - d = 4.5\n#c * d = 15.1875\n#c / d = 3.0\n```\n\n### Strings\n\n```nim\n#Strings can be described\n#as a series of characters.\n#Their content is written between two double quotes (\").\nlet\n  m = \"word\"\n  n = \"A sentence with interpunction.\"\n  o = \"\"\n  p = \"32\"\n  q = \"!\"\n```\n\n### Characters\n\n```nim\n#Characters are single\n#characters. They are\n#written between two single quotes (').\nlet\n  h = 'z'\n  i = '+'\n  j = '2'\n  k = '35' # error\n  l = 'xy' # error\n```\n\n### Special characters\n\n```nim\n#\\n is a newline character\n#\\t is a tab character\n#\\\\ is a backslash (since one \\ is used as the escape character)\n\necho \"some\\nim\\tips\"\necho \"some\\\\nim\\\\tips\"\necho r\"some\\nim\\tips\"\n#output\n#some\n#im\tips\n#some\\nim\\tips\n#some\\nim\\tips\n```\n\n### Boolean\n\n```nim\n#A boolean (or just bool)\n# data type can only have\n#two values: true or false.\nlet isEmpty = true\nlet isFull = false\n```\n\n### Converting floats and integers\n\n```nim\nlet\n  e = 5\n  f = 23.987\necho e + f   # error\necho float(e)\necho int(f)\n\necho float(e) + f\necho e + int(f)\n#output\n#5.0\n#23\n#28.987\n#28\n```\n\n### String concatenation\n\n```nim\nvar\n  p = \"abc\"\n  q = \"xy\"\n  r = 'z'\n\np.add(\"def\")\necho \"p is now: \", p\n\nq.add(r)\necho \"q is now: \", q\n\necho \"concat: \", p & q\n\necho \"p is still: \", p\necho \"q is still: \", q\n#output\n#p is now: abcdef\n#q is now: xyz\n#concat: abcdefxyz\n#p is still: abcdef\n#q is still: xyz\n```\n"
            },
            {
                "title": "Opatators",
                "content": "\n### Relational operators\n\n```nim\nlet\n  g = 31\n  h = 99\n\necho \"g is greater than h: \", g > h\necho \"g is smaller than h: \", g < h\necho \"g is equal to h: \", g == h\necho \"g is not equal to h: \", g != h\necho \"g is greater or equal to h: \", g >= h\necho \"g is smaller or equal to h: \", g <= h\n#output\ng is greater than h: false\ng is smaller than h: true\ng is equal to h: false\ng is not equal to h: true\ng is greater or equal to h: false\ng is smaller or equal to h: true\n\n#example\nlet\n  i = 'a'\n  j = 'd'\n  k = 'Z'\n\necho i < j\necho i < k\n\nlet\n  m = \"axyb\"\n  n = \"axyz\"\n  o = \"ba\"\n  p = \"ba \"\n\necho m < n\necho n < o\necho o < p\n#output\n#false\n#true\n#true\n#true\n#true\n```\n\n### Logical operators\n\n```nim\necho \"T and T: \", true and true\necho \"T and F: \", true and false\necho \"F and F: \", false and false\necho \"---\"\necho \"T or T: \", true or true\necho \"T or F: \", true or false\necho \"F or F: \", false or false\necho \"---\"\necho \"T xor T: \", true xor true\necho \"T xor F: \", true xor false\necho \"F xor F: \", false xor false\necho \"---\"\necho \"not T: \", not true\necho \"not F: \", not false\n#output\n#T and T: true\n#T and F: false\n#F and F: false\n---\n#T or T: true\n#T or F: true\n#F or F: false\n---\n#T xor T: false\n#T xor F: true\n#F xor F: false\n---\n#not T: false\n#not F: true\n```\n"
            },
            {
                "title": "Control flow",
                "content": "\n### If statement\n\n```nim\nlet\n  a = 11\n  b = 22\n  c = 999\n\nif a < b:\n  echo \"a is smaller than b\"\n  if 10*a < b:\n    echo \"not only that, a is *much* smaller than b\"\n\nif b < c:\n  echo \"b is smaller than c\"\n  if 10*b < c:\n    echo \"not only that, b is *much* smaller than c\"\n\nif a+b > c:\n  echo \"a and b are larger than c\"\n  if 1 < 100 and 321 > 123:\n    echo \"did you know that 1 is smaller than 100?\"\n    echo \"and 321 is larger than 123! wow!\"\n#output\n#a is smaller than b\n#b is smaller than c\n#not only that, b is *much* smaller than c\n```\n\n### Case statement\n\n```nim\nlet name = readLine(stdin)\ncase name\nof \"\":\n  echo \"Poor soul, you lost your name?\"\nof \"name\":\n  echo \"Very funny, your name is name.\"\nof \"Dave\", \"Frank\":\n  echo \"Cool name!\"\nelse:\n  echo \"Hi, \", name, \"!\"\n\n```\n\n### While statement\n\n```nim\necho \"What's your name? \"\nvar name = readLine(stdin)\nwhile name == \"\":\n  echo \"Please tell me your name: \"\n  name = readLine(stdin) # no `var`, because we do not declare a new variable here\n```\n\n### For statement\n\n```nim\necho \"Counting to ten: \"\nfor i in countup(1, 10):\n  echo i\n# --> Outputs 1 2 3 4 5 6 7 8 9 10 on different lines\n```\n\n### Scopes and the block statement\n\n```nim\nwhile false:\n  var x = \"hi\"\necho x # does not work\n#-----------------------#\nblock myblock:\n  var x = \"hi\"\necho x # does not work either\n```\n\n### Break statement\n\n```nim\nblock myblock:\n  echo \"entering block\"\n  while true:\n    echo \"looping\"\n    break # leaves the loop, but not the block\n  echo \"still in block\"\necho \"outside the block\"\n\n```\n\n### Continue statement\n\n```nim\nfor i in 1 .. 5:\n  if i <= 3: continue\n  echo i # will only print 4 and 5\n```\n\n### When statement\n\n```nim\n  when system.hostOS == \"windows\":\n  echo \"running on Windows!\"\nelif system.hostOS == \"linux\":\n  echo \"running on Linux!\"\nelif system.hostOS == \"macosx\":\n  echo \"running on Mac OS X!\"\nelse:\n  echo \"unknown operating system\"\n```\n\n### Statements and indentation\n\n```nim\n# no indentation needed for single-assignment statement:\nif x: x = false\n\n# indentation needed for nested if statement:\nif x:\n  if y:\n    y = false\n  else:\n    y = true\n\n# indentation needed, because two statements follow the condition:\nif x:\n  x = false\n  y = false\n```\n\n### Procedures\n\n```nim\nproc yes(question: string): bool =\n  echo question, \" (y/n)\"\n  while true:\n    case readLine(stdin)\n    of \"y\", \"Y\", \"yes\", \"Yes\": return true\n    of \"n\", \"N\", \"no\", \"No\": return false\n    else: echo \"Please be clear: yes or no\"\n\nif yes(\"Should I delete all your important files?\"):\n  echo \"I'm sorry Dave, I'm afraid I can't do that.\"\nelse:\n  echo \"I think you know what the problem is just as well as I do.\"\n```\n\n### Result variable\n\n```nim\nproc sumTillNegative(x: varargs[int]): int =\n  for i in x:\n    if i < 0:\n      return\n    result = result + i\n\necho sumTillNegative() # echoes 0\necho sumTillNegative(3, 4, 5) # echoes 12\necho sumTillNegative(3, 4 , -1 , 6) # echoes 7\n```\n\n### Parameters\n\n```nim\nproc printSeq(s: seq, nprinted: int = -1) =\n  var nprinted = if nprinted == -1: s.len else: min(nprinted, s.len)\n  for i in 0 ..< nprinted:\n    echo s[i]\n#------------------- #\nproc divmod(a, b: int; res, remainder: var int) =\n  res = a div b        # integer division\n  remainder = a mod b  # integer modulo operation\n\nvar\n  x, y: int\ndivmod(8, 5, x, y) # modifies x and y\necho x\necho y\n```\n\n### Discard statement\n\n```nim\ndiscard yes(\"May I ask a pointless question?\")\n\nproc p(x, y: int): int {.discardable.} =\n  return x + y\n\np(3, 4) # now valid\n```\n\n### Named arguments\n\n```nim\nproc createWindow(x, y, width, height: int; title: string;  show: bool): Window = ...\n\nvar w = createWindow(show = true, title = \"My Application\", x = 0, y = 0, height = 600, width = 800)\n\nvar w = createWindow(0, 0, title = \"My Application\",\n                     height = 600, width = 800, true)\n```\n\n### Default values\n\n```nim\nproc createWindow(x = 0, y = 0, width = 500, height = 700,\n                  title = \"unknown\",\n                  show = true): Window =\n\n\nvar w = createWindow(title = \"My Application\", height = 600, width = 800)\n```\n\n### Overloaded procedures\n\n```nim\nproc toString(x: int): string =\n  result =\n    if x < 0: \"negative\"\n    elif x > 0: \"positive\"\n    else: \"zero\"\n\nproc toString(x: bool): string =\n  result =\n    if x: \"yep\"\n    else: \"nope\"\n\nassert toString(13) == \"positive\"\n # calls the toString(x: int) proc\nassert toString(true) == \"yep\"\n # calls the toString(x: bool) proc\n```\n\n### Forward declarations\n\n```nim\nproc odd(n: int): bool =\n  assert(n >= 0) # makes sure we don't run into negative recursion\n  if n == 0: false\n  else:\n    n == 1 or even(n-1)\n\nproc even(n: int): bool =\n  assert(n >= 0) # makes sure we don't run into negative recursion\n  if n == 1: false\n  else:\n    n == 0 or odd(n-1)\n```\n\n### Iterators\n\n```nim\necho \"Counting to ten: \"\nfor i in countup(1, 10):\n  echo i\n\nproc countup(a, b: int): int =\n  var res = a\n  while res <= b:\n    return res\n    inc(res)\n\niterator countup(a, b: int): int =\n  var res = a\n  while res <= b:\n    yield res\n    inc(res)\n```\n\n### Type Conversion\n\n```nim\nvar\n  x: int32 = 1.int32   # same as calling int32(1)\n  y: int8  = int8('a') # 'a' == 97'i8\n  z: float = 2.5       # int(2.5) rounds down to 2\n  sum: int = int(x) + int(y) + int(z) # sum == 100\n```\n\n### Internal type representation\n\n```nim\nvar\n  myBool = true\n  myCharacter = 'n'\n  myString = \"nim\"\n  myInteger = 42\n  myFloat = 3.14\necho myBool, \":\", repr(myBool)\n# --> true:true\necho myCharacter, \":\", repr(myCharacter)\n# --> n:'n'\necho myString, \":\", repr(myString)\n# --> nim:0x10fa8c050\"nim\"\necho myInteger, \":\", repr(myInteger)\n# --> 42:42\necho myFloat, \":\", repr(myFloat)\n# --> 3.14:3.14\n```\n\n### Enumerations\n\n```nim\ntype\n  Direction = enum\n    north, east, south, west\n\nvar x = south\n# `x` is of type `Direction`; its value is `south`\n#prints \"south\"\necho x\n```\n\n### Ordinal types\n\n| Operation  |                            Comment                            |\n| :--------- | :-----------------------------------------------------------: |\n| ord(x)     | returns the integer value that is used to represent x's value |\n| inc(x)     |                      increments x by one                      |\n| inc(x, n)  |              increments x by n; n is an integer               |\n| dec(x)     |                      decrements x by one                      |\n| dec(x, n)  |              decrements x by n; n is an integer               |\n| succ(x)    |                  returns the successor of x                   |\n| succ(x, n) |                returns the n'th successor of x                |\n| pred(x)    |                 returns the predecessor of x                  |\n| pred(x, n) |               returns the n'th predecessor of x               |\n\n### Subranges\n\n```nim\ntype\n  MySubrange = range[0..5]\n```\n\n### Sets\n\n```nim\n  var s: set[int64]\n  # Error: set is too large; use `std/sets` for ordinal types\n  # with more than 2^16 elements\n type\n  CharSet = set[char]\nvar\n  x: CharSet\nx = {'a'..'z', '0'..'9'}\n # This constructs a set that contains the\n # letters from 'a' to 'z' and the digits\n # from '0' to '9'\n```\n\n### Bit fields\n\n```nim\ntype\n MyFlag* {.size: sizeof(cint).} = enum\n   A\n   B\n   C\n   D\n MyFlags = set[MyFlag]\n\nproc toNum(f: MyFlags): int = cast[cint](f)\nproc toFlags(v: int): MyFlags = cast[MyFlags](v)\n\nassert toNum({}) == 0\nassert toNum({A}) == 1\nassert toNum({D}) == 8\nassert toNum({A, C}) == 5\nassert toFlags(0) == {}\nassert toFlags(7) == {A, B, C}\n```\n\n### Arrays\n\n```nim\ntype\n  IntArray = array[0..5, int] # an array that is indexed with 0..5\nvar\n  x: IntArray\nx = [1, 2, 3, 4, 5, 6]\nfor i in low(x) .. high(x):\n  echo x[i]\n```\n\n### Sequences\n\n```nim\n  var\n  x: seq[int] # a reference to a sequence of integers\nx = @[1, 2, 3, 4, 5, 6] # the @ turns the array into a sequence allocated on the heap\nfor value in @[3, 4, 5]:\n  echo value\n# --> 3\n# --> 4\n# --> 5\n\nfor i, value in @[3, 4, 5]:\n  echo \"index: \", $i, \", value:\", $value\n# --> index: 0, value:3\n# --> index: 1, value:4\n# --> index: 2, value:5\n```\n\n### Open arrays\n\n```nim\nvar\n  fruits:   seq[string]\n # reference to a sequence of strings that is initialized with '@[]'\n  capitals: array[3, string]\n\n # array of strings with a fixed size\n\ncapitals = [\"New York\", \"London\", \"Berlin\"]\n # array 'capitals' allows assignment of only three elements\nfruits.add(\"Banana\")\n # sequence 'fruits' is dynamically expandable during runtime\nfruits.add(\"Mango\")\n\nproc openArraySize(oa: openArray[string]): int =\n  oa.len\n\nassert openArraySize(fruits) == 2\n  # procedure accepts a sequence as parameter\nassert openArraySize(capitals) == 3\n  # but also an array type\n```\n\n### Varargs\n\n```nim\nproc myWriteln(f: File, a: varargs[string]) =\n  for s in items(a):\n    write(f, s)\n  write(f, \"\\n\")\n\nmyWriteln(stdout, \"abc\", \"def\", \"xyz\")\n# is transformed by the compiler to:\nmyWriteln(stdout, [\"abc\", \"def\", \"xyz\"])\n```\n\n### Slices\n\n```nim\nvar\n  a = \"Nim is a programming language\"\n  b = \"Slices are useless.\"\n\necho a[7 .. 12] # --> 'a prog'\nb[11 .. ^2] = \"useful\"\necho b # --> 'Slices are useful.'\n```\n\n### Objects\n\n```nim\ntype\n  Person = object\n    name: string\n    age: int\n\nvar person1 = Person(name: \"Peter\", age: 30)\n\necho person1.name # \"Peter\"\necho person1.age  # 30\n\nvar person2 = person1 # copy of person 1\n\nperson2.age += 14\n\necho person1.age # 30\necho person2.age # 44\n\n\n# the order may be changed\nlet person3 = Person(age: 12, name: \"Quentin\")\n\n# not every member needs to be specified\nlet person4 = Person(age: 3)\n# unspecified members will be initialized with their default\n# values. In this case it is the empty string.\ndoAssert person4.name == \"\"\n```\n\n### Tuples\n\n```nim\ntype\n  Person = tuple\n    name: string\n    age: int\n\n  PersonX = tuple[name: string, age: int]\n\n  PersonY = (string, int)\n\nvar\n  person: Person\n  personX: PersonX\n  personY: PersonY\n\nperson = (name: \"Peter\", age: 30)\n# Person and PersonX are equivalent\npersonX = person\n\n# Create a tuple with anonymous fields:\npersonY = (\"Peter\", 30)\n\nperson = personY\npersonY = person\n\nperson = (\"Peter\", 30)\n\necho person.name # \"Peter\"\necho person.age  # 30\n\necho person[0] # \"Peter\"\necho person[1] # 30\n\nvar building: tuple[street: string, number: int]\nbuilding = (\"Rue del Percebe\", 13)\necho building.street\n\n```\n\n### Reference and pointer types\n\n```nim\ntype\n  Node = ref object\n    le, ri: Node\n    data: int\n\nvar n = Node(data: 9)\necho n.data\n# no need to write n[].data; in fact n[].data is highly discouraged!\n```\n\n### Procedural type\n\n```nim\nproc greet(name: string): string =\n  \"Hello, \" & name & \"!\"\n\nproc bye(name: string): string =\n  \"Goodbye, \" & name & \".\"\n\nproc communicate(greeting: proc (x: string): string, name: string) =\n  echo greeting(name)\n\ncommunicate(greet, \"John\")\ncommunicate(bye, \"Mary\")\n```\n\n### Modules\n\n```nim\n# Module A\nvar\n  x*, y: int\n\nproc `*` *(a, b: seq[int]): seq[int] =\n  # allocate a new sequence:\n  newSeq(result, len(a))\n  # multiply two int sequences:\n  for i in 0 ..< len(a): result[i] = a[i] * b[i]\n\nwhen isMainModule:\n  # test the new `*` operator for sequences:\n  assert(@[1, 2, 3] * @[1, 2, 3] == @[1, 4, 9])\n\n\n```\n\n### Excluding symbols\n\n```nim\nimport mymodule except y\n\n# From statement\nfrom mymodule import x, y, z\nfrom mymodule import x, y, z\n\nx()\n  # use x without any qualification\n\n#Include statement\ninclude fileA, fileB, fileC\n\n```\n\n### Inheritance\n\n```nim\ntype\n  Person = ref object of RootObj\n    name*: string  # the * means that `name` is accessible from other modules\n    age: int       # no * means that the field is hidden from other modules\n\n  Student = ref object of Person # Student inherits from Person\n    id: int                      # with an id field\n\nvar\n  student: Student\n  person: Person\nassert(student of Student) # is true\n# object construction:\nstudent = Student(name: \"Anton\", age: 5, id: 2)\necho student[]\n```\n\n### Mutually recursive types\n\n```nim\ntype\n  Node = ref object\n # a reference to an object with the following field:\n    le, ri: Node\n   # left and right subtrees\n    sym: ref Sym\n  # leaves contain a reference to a Sym\n\n  Sym = object\n    # a symbol\n    name: string\n     # the symbol's name\n    line: int\n   # the line the symbol was declared in\n    code: Node\n    # the symbol's abstract syntax tree\n```\n\n### Object variants\n\n```nim\n# This is an example how an abstract syntax tree could be modelled in Nim\ntype\n  NodeKind = enum  # the different node types\n    nkInt,          # a leaf with an integer value\n    nkFloat,        # a leaf with a float value\n    nkString,       # a leaf with a string value\n    nkAdd,          # an addition\n    nkSub,          # a subtraction\n    nkIf            # an if statement\n  Node = ref object\n    case kind: NodeKind  # the `kind` field is the discriminator\n    of nkInt: intVal: int\n    of nkFloat: floatVal: float\n    of nkString: strVal: string\n    of nkAdd, nkSub:\n      leftOp, rightOp: Node\n    of nkIf:\n      condition, thenPart, elsePart: Node\n\nvar n = Node(kind: nkFloat, floatVal: 1.0)\n# the following statement raises an `FieldDefect` exception, because\n# n.kind's value does not fit:\nn.strVal = \"\"\n```\n\n### Method call syntax\n\n```nim\nimport std/strutils\n\necho \"abc\".len # is the same as echo len(\"abc\")\necho \"abc\".toUpperAscii()\necho({'a', 'b', 'c'}.card)\nstdout.writeLine(\"Hallo\") # the same as writeLine(stdout, \"Hallo\")\n##############################\nimport std/[strutils, sequtils]\n\nstdout.writeLine(\"Give a list of numbers (separated by spaces): \")\nstdout.write(stdin.readLine.splitWhitespace.map(parseInt).max.`$`)\nstdout.writeLine(\" is the maximum!\")\n```\n\n### Properties\n\n```nim\ntype\n  Socket* = ref object of RootObj\n    h: int # cannot be accessed from the outside of the module due to missing star\n\nproc `host=`*(s: var Socket, value: int) {.inline.} =\n  ## setter of host address\n  s.h = value\n\nproc host*(s: Socket): int {.inline.} =\n  ## getter of host address\n  s.h\n\nvar s: Socket\nnew s\ns.host = 34  # same as `host=`(s, 34)\n\ntype\n  Vector* = object\n    x, y, z: float\n\nproc `[]=`* (v: var Vector, i: int, value: float) =\n  # setter\n  case i\n  of 0: v.x = value\n  of 1: v.y = value\n  of 2: v.z = value\n  else: assert(false)\n\nproc `[]`* (v: Vector, i: int): float =\n  # getter\n  case i\n  of 0: result = v.x\n  of 1: result = v.y\n  of 2: result = v.z\n  else: assert(false)\n```\n\n### Dynamic dispatch\n\n```nim\ntype\n  Expression = ref object of RootObj ## abstract base class for an expression\n  Literal = ref object of Expression\n    x: int\n  PlusExpr = ref object of Expression\n    a, b: Expression\n\n# watch out: 'eval' relies on dynamic binding\nmethod eval(e: Expression): int {.base.} =\n  # override this base method\n  quit \"to override!\"\n\nmethod eval(e: Literal): int = e.x\nmethod eval(e: PlusExpr): int = eval(e.a) + eval(e.b)\n\nproc newLit(x: int): Literal = Literal(x: x)\nproc newPlus(a, b: Expression): PlusExpr = PlusExpr(a: a, b: b)\n\necho eval(newPlus(newPlus(newLit(1), newLit(2)), newLit(4)))\n```\n\n### Raise statement\n\n```nim\nvar\n  e: ref OSError\nnew(e)\ne.msg = \"the request to the OS failed\"\nraise e\n\nraise newException(OSError, \"the request to the OS failed\")\n```\n\n### Try statement\n\n```nim\nfrom std/strutils import parseInt\n\n# read the first two lines of a text file that should contain numbers\n# and tries to add them\nvar\n  f: File\nif open(f, \"numbers.txt\"):\n  try:\n    let a = readLine(f)\n    let b = readLine(f)\n    echo \"sum: \", parseInt(a) + parseInt(b)\n  except OverflowDefect:\n    echo \"overflow!\"\n  except ValueError:\n    echo \"could not convert string to integer\"\n  except IOError:\n    echo \"IO error!\"\n  except CatchableError:\n    echo \"Unknown exception!\"\n    # reraise the unknown exception:\n    raise\n  finally:\n    close(f)\n```\n\n### Annotating procs with raised exceptions\n\n```nim\nproc complexProc() {.raises: [IOError, ArithmeticDefect].} =\n\n\nproc simpleProc() {.raises: [].} =\n  ...\n```\n\n### Generics\n\n```nim\n type\n  BinaryTree*[T] = ref object # BinaryTree is a generic type with\n                              # generic param `T`\n    le, ri: BinaryTree[T]     # left and right subtrees; may be nil\n    data: T                   # the data stored in a node\n\nproc newNode*[T](data: T): BinaryTree[T] =\n  # constructor for a node\n  new(result)\n  result.data = data\n\nproc add*[T](root: var BinaryTree[T], n: BinaryTree[T]) =\n  # insert a node into the tree\n  if root == nil:\n    root = n\n  else:\n    var it = root\n    while it != nil:\n      # compare the data items; uses the generic `cmp` proc\n      # that works for any type that has a `==` and `<` operator\n      var c = cmp(it.data, n.data)\n      if c < 0:\n        if it.le == nil:\n          it.le = n\n          return\n        it = it.le\n      else:\n        if it.ri == nil:\n          it.ri = n\n          return\n        it = it.ri\n\nproc add*[T](root: var BinaryTree[T], data: T) =\n  # convenience proc:\n  add(root, newNode(data))\n\niterator preorder*[T](root: BinaryTree[T]): T =\n  # Preorder traversal of a binary tree.\n  # This uses an explicit stack (which is more efficient than\n  # a recursive iterator factory).\n  var stack: seq[BinaryTree[T]] = @[root]\n  while stack.len > 0:\n    var n = stack.pop()\n    while n != nil:\n      yield n.data\n      add(stack, n.ri)  # push right subtree onto the stack\n      n = n.le          # and follow the left pointer\n\nvar\n  root: BinaryTree[string] # instantiate a BinaryTree with `string`\nadd(root, newNode(\"hello\")) # instantiates `newNode` and `add`\nadd(root, \"world\")          # instantiates the second `add` proc\nfor str in preorder(root):\n  stdout.writeLine(str)\n```\n\n### Templates\n\n```nim\ntemplate `!=` (a, b: untyped): untyped =\n  # this definition exists in the System module\n  not (a == b)\n\nassert(5 != 6) # the compiler rewrites that to: assert(not (5 == 6))\n#############################################\nconst\n  debug = true\n\nproc log(msg: string) {.inline.} =\n  if debug: stdout.writeLine(msg)\n\nvar\n  x = 4\nlog(\"x has the value: \" & $x)\n####################################\ntemplate withFile(f: untyped, filename: string, mode: FileMode,\n                  body: untyped) =\n  let fn = filename\n  var f: File\n  if open(f, fn, mode):\n    try:\n      body\n    finally:\n      close(f)\n  else:\n    quit(\"cannot open: \" & fn)\n\nwithFile(txt, \"ttempl3.txt\", fmWrite):\n  txt.writeLine(\"line 1\")\n  txt.writeLine(\"line 2\")\n\n```\n\n### Static Arguments\n\n```nim\nimport std/macros\n\nmacro myMacro(arg: static[int]): untyped =\n  echo arg # just an int (7), not `NimNode`\n\nmyMacro(1 + 2 * 3)\n```\n\n### Code Blocks as Arguments\n\n```nim\necho \"Hello \":\n  let a = \"Wor\"\n  let b = \"ld!\"\n  a & b\n```\n\n### The Syntax Tree\n\n```nim\ndumpTree:\n  var mt: MyType = MyType(a:123.456, b:\"abcdef\")\n\n# output:\n#   StmtList\n#     VarSection\n#       IdentDefs\n#         Ident \"mt\"\n#         Ident \"MyType\"\n#         ObjConstr\n#           Ident \"MyType\"\n#           ExprColonExpr\n#             Ident \"a\"\n#             FloatLit 123.456\n#           ExprColonExpr\n#             Ident \"b\"\n#             StrLit \"abcdef\"\n```\n\n### Custom Semantic Checking\n\n```nim\nmacro myAssert(arg: untyped): untyped =\n  arg.expectKind nnkInfix\n```\n\n### Generating Code\n\n```nim\nimport std/macros\n\ntype\nMyType = object\n  a: float\n  b: string\n\nmacro myMacro(arg: untyped): untyped =\nvar mt: MyType = MyType(a:123.456, b:\"abcdef\")\n\n#\n\nlet mtLit = newLit(mt)\n\nresult = quote do:\n  echo `arg`\n  echo `mtLit`\n\nmyMacro(\"Hallo\")\n```\n\n### Building Your First Macro\n\n```nim\nimport std/macros\n\nmacro myAssert(arg: untyped): untyped =\n  # all node kind identifiers are prefixed with \"nnk\"\n  arg.expectKind nnkInfix\n  arg.expectLen 3\n  # operator as string literal\n  let op  = newLit(\" \" & arg[0].repr & \" \")\n  let lhs = arg[1]\n  let rhs = arg[2]\n\n  result = quote do:\n    if not `arg`:\n      raise newException(AssertionDefect,$`lhs` & `op` & $`rhs`)\n\nlet a = 1\nlet b = 2\n\nmyAssert(a != b)\nmyAssert(a == b)\n\n```\n"
            },
            {
                "title": "Also see",
                "content": "\n- [Nim Cheat sheet](https://narimiran.github.io/nim-basics/) _(https://narimiran.github.io)_"
            }
        ]
    },
    {
        "name": "ocaml",
        "title": "OCaml",
        "tags": [
            "scientific",
            "functional"
        ],
        "categories": [
            "Programming"
        ],
        "background": "#ec670f",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/ocaml.svg",
        "intro": "The [OCaml](https://www.ocaml.org/) cheat sheet is a one-page reference sheet for the OCaml programming language.\n",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### hello.ml\n\n```ml\nlet () =\n  let message = \"Hello, World!\" in\n  Printf.printf \"%s\\n\" message\n```\n\n#### Compile and Run\n\n```bash\n$ ocamlc -o hello.byte hello.ml\n$ ./hello.byte\n```\n\n#### Build and Run with Dune\n\n```bash\n$ dune build hello.exe\n$ _build/default/hello.exe\n\n# you can also just run\n$ dune exec ./hello.exe\n```\n\nSee the [dune](https://dune.build/) documentation for more info.\n\n### Imports\n\nInstall modules with opam\n\n```bash\n$ opam install hex\n```\n\n#### Global Open\n\n```ml\nopen Hex \n```\n\n#### Local Open\n\n```ml\nHex.of_string \"hex string\"\n\nlet open Hex in \n  of_string \"to hex\"\n```\n\n### Comments\n\n#### Line & Block Comments\n\n```ml\n(* A single line comment *)\n\n(* A multi-line comment\n* where we want to explain \n* something complex *)\n\n(* Outer comment\n   (* Nested comment *)\n   End of outer comment *)\n```\n\n#### Documentation Comments\n\n```ml\nval sum : int -> int -> int\n(** [sum x y] returns the sum\n of two integers [x] and [y] *)\n```\n"
            },
            {
                "title": "Data Types",
                "content": "\n### Predefined Types\n\n#### Unit\n\nNote: `#` Indicates execution at the toplevel followed by the output\n\n```ml\n# ();; (* equivalent to void in C *)\n- : unit = ()\n```\n\n#### Basic Types\n\n```ml\n# 5 ;; (* integer *)\n- : int = 5\n\n# 3.14 ;;  (* float *)\n- : float = 3.14\n\n# true ;; (* bool *)\n- : bool = true\n\n# false ;;\n- : bool = false\n\n# 'a' ;; (* char *)\n- : char = 'a'\n\n# \"a string\" ;; (* string *)\n- : string = \"a string\"\n\n# String.to_bytes \"hello\" ;; (* bytes *)\n- : bytes = Bytes.of_string \"hello\"\n\n# (3, 5);; (* tuple *)\n- : int * int = (3, 5)\n\n# ref 0;; (* reference *)\n- : int ref = {contents = 0}\n```\n\n#### Options & Results\n\n```ml\n# Some 42;;\n- : int option = Some 42\n\n# Ok 42;;\n- : (int, 'a) result = Ok 42\n\n# Error \"404\";;\n- : ('a, int) result = Error 404\n```\n\n### Arrays & Lists\n\n#### Arrays\n\n```ml\n# [|0; 1; 2; 3|];; (* create an array *)\n- : int array = [|0; 1; 2; 3|]\n\n# [|'u'; 's'; 'c'|].(1);; (* array access *)\n- char = 's'\n```\n\nArrays are mutable\n\n```ml\nlet scores = [|97; 85; 99|];;\n- : int array = [|97; 85; 99|]\n\n# scores.(2) <- 89;; (* update an element *)\n- unit = ()\n\n# scores;;\n- : int array = [|97; 85; 89|]\n```\n\n#### Lists\n\n```ml\n# [1; 2; 3];;\n- : int list = [1; 2; 3;]\n\n# [\"a\"; \"str\"; \"lst\"];;\n- : string list = [\"a\"; \"str\"; \"lst\"]\n```\n\nLists are immutable\n\n```ml\n# let lst = [1; 2; 3];;\n- : int list = [1; 2; 3]\n\n# let new_lst =  0 :: lst;; (* prepend to a new list *)\n- : int list = [0; 1; 2; 3]\n\n# new_lst @ [4;5;6];; (* combine two lists *)\n- : int list = [0; 1; 2; 3; 4; 5; 6]\n```\n\n### User-Defined Types\n\n#### Records\n\nBundle related data\n\n```ml\ntype person = { \n  name: string;\n  age: int\n}\n\n# let zeno = {name = \"Zeno\"; age = 30};;\nval zeno : person = {name = \"Zeno\"; age = 30}\n```\n\n#### Variants\n\nSeveral different, but related types\n\n```ml\ntype shape = \n  | Circle of float\n  | Rectangle of float * float\n\n# let my_shape = Circle 5.0;;\n- : shape = Circle 5.\n```\n\n#### Aliases\n\nProvide meaningful name\nto complex or commonly used types\n\n```ml\ntype point = float * float\n\n# let origin: point = (0.0, 0.0);;\nval origin : point = (0., 0.)\n```\n"
            },
            {
                "title": "Functions",
                "content": "\n### Functions\n\n#### Single parameter\n\n```ml\nlet add_one x = \n  let result = x + 1 in\n  result\n\n# add_one 1;;\n- : int = 2\n```\n\n#### Multiple parameters\n\n```ml\nlet sum x y =\n  let result = x + y in\n  result\n\n# sum 1 2;;\n- : int = 3\n```\n\n#### Tuple parameter\n\n```ml\nlet str_concat (x, y) =\n  x ^ \" \" ^ y \n\n# str_concat (\"Hello\", \"OCaml\") ;;\n- : string = \"Hello Ocaml\"  \n```\n\n### Recursive Functions\n\n#### rec keyword\n\nAll recusive functions use the rec keyword\n\n```ml\nlet rec factorial n = \n  if n < 1 then 1 else n * factorial (n - 1)\n```\n\nThe above can cause stackoverflow.\n\n#### Tail Recursion\n\nMakes use of a helper function and the acc argument.\n\n```ml\nlet rec factorial_helper n acc = \n  if n = 0 then acc\n  else factorial_helper (n - 1) (n * acc)\n```\n\nNotice the last call is the recursive function.\n\n```ml\nlet factorial n = factorial_helper n 1\n```\n\n### Chaining\n\n#### Application Operator\n\nRead from right to left, the first operation is `sum 2 3`\n\n```ml\n(* find log(2 + 3) *)\n# log @@ float_of_int @@ sum 2 3 ;;\n- : float = 1.609...\n```\n\n#### Pipeline\n\n```ml\n(* find log((x + y)!) *)\n# sum 2 3 \n  |> factorial\n  |> float_of_int\n  |> log ;;\n- : float = 4.787...\n```\n\n`|>` takes the output of the function and passes it as input to the next function in the pipeline\n"
            },
            {
                "title": "Control Flow",
                "content": "\n### If Statements\n\n#### If Statement\n\n```ml\nlet is_pos x = \n  if x > 0 then \"positive\" else \"negative\"\n```\n\n#### If else if\n\n```ml\nlet f x = \n  if x > 3 then \"gt 3\"\n  else if x < 3 then \"lt 3\"\n  else \"eq 3\" \n```\n\n#### Pattern Matching\n\n```ml\nlet is_pos x = \n  match x > 0 with \n  | true  -> \"positive\"\n  | false -> \"negative\" \n```\n\n### Loops\n\n#### For loop\n\n```ml\nfor i = 1 to 5 do\n  print_int i \ndone\n```\n\n#### While loop\n\nNotice the `ref` is needed to have the while condition eventually become false.\n\n```ml\nlet i = ref 0 in \n  while !i < 5 do\n    print_int !i;\n    i := !i + 1\n  done\n```\n\n### Operators\n\n#### Comparison Operators\n\n```ml\n=         (* equal to *)\n<>        (* not equal to *)\n>         (* greater than *)\n<         (* less than *)\n>=        (* greater than or eq to *)\n<=        (* less than or eq to *)\n```\n\n#### Arithmatic Operators\n\n```ml\n(* int operator   float operator *)\n+                 +.  (* addition *) \n-                 -.  (* subtraction *)\n*                 *.  (* multiplication *)\n/                 /.  (* division *)\n                  **  (* power *)\n```\n"
            },
            {
                "title": "Useful Tools",
                "content": "\n### List\n\n#### Searching & Filtering\n\n```ml\n# let lst = [1; 2; 3];;\nval lst : int list = [1; 2; 3]\n\n# List.filter (fun x -> x mod 2 = 0) lst;;\n- : int list = [2]\n\n# List.find (fun x -> x = 4) lst;;\nException: Not_found\n\n# List.sort compare [2; 1; 3];;\n- : int list = [1; 2; 3]\n```\n\n#### Applying Transformations\n\n```ml\n(* Loop over list and apply fun f *)\nList.iter f lst\n\n(* map a function to each elem *)\n(* Ex. double each element x in lst *)\nList.map (fun x -> x + x) lst\n\n(* Apply an operator between elements *)\n(* Ex. 1 + 2 + 3 *)\nList.fold_left (+) 0 lst\n```\n\n### Associaton Lists\n\n#### Definition and Access\n\n```ml\nlet scores = \n  [(\"math\", 91); (\"phil\", 89); (\"stats\", 94)]\n\n# List.assoc \"stats\" scores;;\n- : int = 94\n\n# List.mem_assoc \"math\" scores;;\n- : bool = true\n```\n\n#### Split and Combine\n\n```ml\n# List.split scores;;\n- : string list * int list = ([\"math\"; \"phil\"; \"stats\"], [91; 89; 94])\n\n# List.combine [1;2;3] [4; 5; 6];;\n- : (int * int) list = [(1, 4); (2, 5); (3, 6)]\n```\n\nAssociation lists are similar to dictionaries or hashmaps\n\n### Hash Tables\n\nHash Tables are mutable.\n\n#### Initialize & Add Data\n\n```ml\n\n# let my_htable = Hashtbl.create 3;;\nval my_htable : ('_weak1, '_weak2) Hashtbl.t = <abstr>\n\n# Hashtbl.add my_htable \"A\" \"John\";\n  Hashtbl.add my_htable \"A\" \"Jane\";\n  Hashtbl.add my_htable \"B\" \"Max\";;\n```\n\n#### Find Data\n\n```ml\n# Hashtbl.find my_htable \"A\";;\n- : string = \"Jane\"\n\n(* find all *)\n# Hashtbl.find_all my_htable \"A\";;\n- : string list = [\"Jane\"; \"John\"]\n```\n\n### Maps\n\nMaps are immutable key-value association tables.\n\n#### Initialization & Add Data\n\n```ml\n(* the Map.Make functor creates the custom map module *)\n# module StringMap = Map.Make(String);;\n\nlet books = \n  StringMap.empty\n  |> StringMap.add \"Dune\" (\"Herbet\", 1965)\n  |> StringMap.add \"Neuromancer\" (\"Gibson\", 1984)\n```\n\n#### Finding Entries\n\n```ml\n(* find_opt returns assoc val wrapped in an option else None *)\n# StringMap.find_opt \"Dune\" books;;\n- : (string * int) option = Some (\"Herbet\", 1965)\n\n(* find returns the association else Not_Found *)\n# StringMap.find \"Dune\" books;;\n- : string * int = (\"Herbet\", 1965)\n```\n\n#### Adding & Removing Entries\n\nCreates a new map since maps are immutable\n\n```ml\nlet more_books = books \n  |> StringMap.add \"Foundation\" (\"Isaac Asimov\", 1951)\n\nlet less_books = \n  |> StringMap.remove \"Dune\"\n```\n\nFiltering\n\n```ml\nlet eighties_books = \n    StringMap.filter\n      (fun _ (_, year) -> year > 1980 & number < 1990) books\n```\n\n#### Printing Data\n\n```ml\nlet print_books map =\n  StringMap.iter (fun title (author, year) ->\n    Printf.printf \"Title: %s, Author: %s, Year: %d\\n\" title author year\n  ) map\n\n# let () = print_books eighties_books;;\nTitle: Neuromancer, Author: Gibson, Year: 1984\n```"
            }
        ]
    },
    {
        "name": "github-actions",
        "title": "Github Actions",
        "tags": [
            "Github",
            "CICD"
        ],
        "categories": [
            "Toolkit"
        ],
        "background": "#808080",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/github-actions.svg",
        "intro": "A quick reference to Github Actions for the automation of software workflows, allowing developers to build, test, and deploy code right from their GitHub repositories.",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Introduction\n\n[GitHub Actions](https://docs.github.com/en/actions) is a CI/CD platform that enables automation of software workflows,\nallowing developers to build, test, and deploy code right from their GitHub repositories.\n\n---\n\n### Workflow Files\n\nGithub Action Workflows are defined in special YAML files, typically stored in a `.github/workflows` directory in the\ngithub repository.\n\n```yaml\nname: hello-world\non: push\njobs:\n  hello-world-job:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Hello World\n        run: echo \"Hello World!\"\n```\n\n**Viewing your workflow runs**\n\n- On GitHub.com, navigate to the main page of the repository.\n- Under your repository name, click `Actions`.\n- In the left sidebar, click the workflow you want to display, in this example \"hello-world\"\n\n---\n\n### Workflow Syntax\n\n```yaml\nname: learn-github-actions\nrun-name: ${{ github.actor }} is learning GitHub Actions\non: [push]\njobs:\n  check-bats-version:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"14\"\n      - run: npm install -g bats\n      - run: bats -v\n```\n\n### Workflow Syntax Descriptions\n\n| Line                  | Description                                                                                                                                                                   |\n| :-------------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `name:`               | Sets the name of the GitHub Actions workflow. It's a label used for identifying the workflow in the repository.                                                               |\n| `run-name:`           | Sets a custom name for the run, using a GitHub context `${{ github.actor }}` to include the name of the user who initiated the run.                                           |\n| `on:`                 | Specifies the event that triggers the workflow. In this case, the workflow is triggered on any `push` event to the repository.                                                |\n| `jobs:`               | Defines a group of jobs that will be executed as part of the workflow. Each job runs independently in the workflow.                                                           |\n| `check-bats-version:` | Identifier for a specific job within the workflow. This job is named `check-bats-version`.                                                                                    |\n| `runs-on:`            | Specifies the type of machine to run the job on. Here, it's set to run on the latest version of Ubuntu.                                                                       |\n| `steps:`              | Contains a sequence of tasks (steps) that will be executed as part of the job.                                                                                                |\n| `uses:`               | Used to specify an action to include as part of a step. For example, `actions/checkout@v4` checks out the repository, and `actions/setup-node@v3` sets up a Node environment. |\n| `with:`               | Specifies additional parameters for the action. It's used in conjunction with `uses` to configure the action.                                                                 |\n| `node-version:`       | Contains parameter under `with`, specifying the version of Node.js to be set up by the `setup-node` action. In this case, it's set to version '14'.                           |\n\n### Events\n\n```yaml\nname: Event-trigger-on-push-example\n\non: [push] # event is defined here\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run a script\n        run: echo \"This workflow runs on every push to the repository.\"\n```\n\n**Event Triggers**\n\n| Event Name                    | Description                                     |\n| :---------------------------- | :---------------------------------------------- |\n| `push`                        | Triggers on a push to the repository.           |\n| `pull_request`                | Triggers on pull request events.                |\n| `pull_request_review`         | Triggers on pull request review events.         |\n| `pull_request_review_comment` | Triggers on comments on pull request reviews.   |\n| `pull_request_target`         | For workflows in forked repositories.           |\n| `fork`                        | Triggers when a repository is forked.           |\n| `issue_comment`               | Triggers on issue and PR comments.              |\n| `issues`                      | Triggers on issue events.                       |\n| `label`                       | Triggers on label events.                       |\n| `milestone`                   | Triggers on milestone events.                   |\n| `deployment`                  | Triggers on deployment.                         |\n| `deployment_status`           | Triggers on deployment status updates.          |\n| `public`                      | Triggers when repo goes from private to public. |\n| `repository_dispatch`         | Triggers on a custom repository event.          |\n| `schedule`                    | Triggers on a defined schedule.                 |\n| `workflow_dispatch`           | Allows manual triggering of the workflow.       |\n| `workflow_run`                | Triggers on the completion of another workflow. |\n| `create`                      | Triggers when a branch or tag is created.       |\n| `delete`                      | Triggers when a branch or tag is deleted.       |\n| `page_build`                  | Triggers on GitHub Pages build events.          |\n| `release`                     | Triggers on release events.                     |\n| `watch`                       | Triggers when someone stars the repo.           |\n| `registry_package`            | Triggers on registry package events.            |\n| `status`                      | Triggers on status updates to a Git commit.     |\n| `project`                     | Triggers on project board events.               |\n| `project_card`                | Triggers on project card events.                |\n| `project_column`              | Triggers on project column events.              |\n| `member`                      | Triggers on collaborator events.                |\n| `gollum`                      | Triggers on wiki page updates.                  |\n\n### Jobs\n\nSingle Job:\n\n```yaml\nname: Single Job\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run a build script\n        run: script/build\n```\n\nMultiple Jobs:\n\n```yaml\nname: CI Workflow\n\non: [push]\n\njobs:\n  job-1:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Runs job 1\n        run: echo \"Running Job 1\"\n\n  job-2:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Runs job 2\n        run: echo \"Running Job 2\"\n\n  job-3:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Runs job 3\n        run: echo \"Running Job 3\"\n```\n\n### Steps\n\n```yaml\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      # step 1\n      - name: Check out repository\n        uses: actions/checkout@v2\n\n      # step 2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: \"14\"\n\n      # step 3\n      - name: Install dependencies\n        run: npm install\n\n      # step 4\n      - name: Run tests\n        run: npm test\n```\n\n### Github Runners & Self Hosted Runners\n\n[Github Hosted Runner](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners):\n\n```yaml\nname: Workflow\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest # default runner\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run a script\n        run: echo \"Hello, world!\"\n```\n\n[Self Hosted Runner](https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/about-self-hosted-runners)\n\n```yaml\nname: Workflow with Self-Hosted Runner\non: [push]\njobs:\n  build:\n    runs-on: self-hosted\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run a script\n        run: echo \"Hello from self-hosted runner!\"\n```\n\n### Environment Variables\n\nCustom variable defined using environments.\n\n```yaml\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      CUSTOM_VARIABLE: \"Hello, World!\" # Custom variable defined using env:\n    steps:\n      - name: Check environment variable\n        run: echo \"Value of CUSTOM_VAR is $CUSTOM_VAR\"\n```\n\n### Secrets\n\nTo add a new secret in your github repository nagivate to `Repository` > `Settings` > `Security` >\n`Secrets and Variables` > `Actions` > `New Repository Secret`\n\nExample Secrets workflow:\n\n```yaml\nname: Workflow with Secrets\n\non: [push]\n\njobs:\n  example_job:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Use a secret\n        run: echo \"The secret is ${{ secrets.MY_SECRET }}\"\n```\n\n### Artifacts\n\nTo access your artifact navigate to `Repository` > `Actions` > `Workflow Run` > `Artifacts`\n\n```yaml\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Build project\n        run: make build\n      - name: Upload build artifact\n        uses: actions/upload-artifact@v3 # upload Artifacts prebuilt action\n        with:\n          name: my-artifact\n          path: path/to/artifact\n```\n\n### Caching Dependencies\n\nDependency caches stores downloaded packages or compiled binaries of your workflows.\n\n```yaml\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Cache dependencies\n        uses: actions/cache@v2 # stores downloaded packages or compiled binaries\n        with:\n          path: |\n            path/to/dependencies\n            another/path\n          key: ${{ runner.os }}-deps-${{ hashFiles('**/lockfile') }} # hash of the dependency lock file is generated in the OS\n      - name: Install dependencies\n        run: install-command\n```\n\n### Matrix Strategies\n\n```yaml\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [12.x, 14.x, 16.x]\n        # matrix strategy runs enables you to run jobs across multiple combinations of environments and OS's\n        os: [ubuntu-latest, windows-latest, macOS-latest]\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v1\n        with:\n          node-version: ${{ matrix.node-version }}\n      - run: npm install\n      - run: npm test\n        env:\n          CI: true\n```\n\n### Conditions and Expressions\n\nBranch Conditions:\n\n```yaml\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run build\n        if: github.ref == 'refs/heads/main' # \"Run build\" step will only execute if the current branch is main.\n        run: make build\n```\n\nEvent Trigger Conditions:\n\n```yaml\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run tests\n        if: github.event_name == 'pull_request' # \"Run tests\" step is executed only when the workflow is triggered by a pull request event\n        run: npm test\n```\n\n### Workflow Commands\n\nDepending on your OS, if you are running ubuntu-latest, bash commands should work\n\n```yaml\nsteps:\n  - name: Set environment variable\n    run: echo \"NAME=value\" >> $GITHUB_ENV\n```\n\n### Concurrency\n\nThe concurrency field creates a group based on the `github.head_ref`. If a new run starts within the same concurrency\ngroup, it cancels any in-progress runs.\n\n```yaml\njobs:\n  my_job:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.head_ref }}\n      cancel-in-progress: true\n    steps:\n      - name: Run a script\n        run: echo \"Running script...\"\n```\n"
            },
            {
                "title": "Also see",
                "content": "\n- [YAML](/yaml) _(cheatsheets.zip)_\n- [Github](/github) _(cheatsheets.zip)_\n- [Github Actions Documentation](https://docs.github.com/en/actions)_(docs.github.com/en/actions)_"
            }
        ]
    },
    {
        "name": "homebrew",
        "title": "Homebrew",
        "tags": [
            "packages manager",
            "macos"
        ],
        "categories": [
            "Toolkit"
        ],
        "background": "#fbb041",
        "icon": "https://raw.githubusercontent.com/Fechin/reference/main/source/assets/icon/homebrew.svg",
        "intro": "This is a quick reference cheat sheet to getting started with homebrew.",
        "sections": [
            {
                "title": "Getting Started",
                "content": "\n### Install\n\nIf not installed, install Command Line Tools (CLT)\n\n```bash\nxcode-select --install\n```\n\nInstall Homebrew :\n\n```bash \n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n[Official Website](https://brew.sh/) \n\n### Commands\n\n|                            |                                        |\n| -------------------------- | -------------------------------------- |\n| `brew install git`         | Install a package                      |\n| `brew uninstall git`       | Uninstall a package                    |\n| `brew upgrade git`         | Upgrade package                        |\n| `brew unlink git`          | Unlink                                 |\n| `brew link git`            | Link                                   |\n| `brew switch git  1.0.0`   | Switch package version                 |\n| `brew list --versions git` | List the installed versions of package |\n\n### Help\n\nDisplay the version of Homebrew.\n\n```bash\nbrew --version\n```\n\nPrint Help Information\n\n```bash\nbrew help\n```\n\nPrint Help Info for a brew command\n\n```bash\nbrew help <sub-command>\n```\n\nCheck system for potential problems.\n\n```bash\nbrew doctor\n```\n\n### Updates\n\nFetch latest version of homebrew and formula\n\n```bash\nbrew update\n```\n\nShow formulae with an updated version available\n\n```bash\nbrew outdated\n```\n\nUpgrade all outdated and unpinned brews\n\n```bash\nbrew upgrade\n```\n\nUpgrade only the specified brew\n\n```bash\nbrew upgrade <formula>\n```\n\nPrevent the specified formulae from being upgraded\n\n```bash\nbrew pin <formula>\n```\n\nAllow the specified formulae to be upgraded.\n\n```bash\nbrew unpin <formula>\n```\n\n### Repositories\n\nList all the current tapped repositories (taps)\n\n```bash\nbrew tap\n```\n\nTap a formula repository from Github using https for tap https://github.com/user/homebrew-repo\n\n```bash\nbrew tap <user/repo>\n```\n\nTap a formula repository from the specified URL\n\n```bash\nbrew tap <user/repo> <URL>\n```\n\nRemove the given tap from the repository\n\n```bash\nbrew untap <user/repo>\n```\n\n### Cask\n\nTap the Cask repository from Github.\n\n```bash\nbrew tap homebrew/cask\n```\n\nList all the installed casks .\n\n```bash\nbrew cask list\n```\n\nSearch all known casks based on the substring text.\n\n```bash\nbrew search <text>\n```\n\nInstall the given cask.\n\n```bash\nbrew cask install <cask>\n```\n\nReinstalls the given Cask\n\n```bash\nbrew cask reinstall <cask>\n```\n\nUninstall the given cask.\n\n```bash\nbrew cask uninstall <cask>\n```\n\n### Search, Install, Remove\n\nList all the installed formulae.\n\n```bash\nbrew list\n```\n\nDisplay all locally available formulae for brewing.\n\n```bash\nbrew search\n```\n\nPerform a substring search of formulae names for brewing.\n\n```bash\nbrew search <text>\n```\n\nDisplay information about the formula.\n\n```bash\nbrew info <formula>\n```\n\nInstall the formula.\n\n```bash\nbrew install <formula>\n```\n\nUninstall the formula.\n\n```bash\nbrew uninstall <formula>\n```\n\n### Cleanup\n\nRemove older versions of installed formulae.\n\n```bash\nbrew cleanup\n```\n\nRemove older versions of specified formula.\n\n```bash\nbrew cleanup <formula>\n```\n\nDisplay all formula that will be removed (dry run)\n\n```bash\nbrew cleanup -n\n```"
            }
        ]
    }
]
